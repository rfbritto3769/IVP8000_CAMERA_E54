
IVP8000_CAMERA_E54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005fa0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00005fa0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  000204a4  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  000204a4  2**0
                  CONTENTS
  4 .bss          00025ec8  200004b0  00006450  000204a4  2**4
                  ALLOC
  5 .stack        00010000  20026378  0002c318  000204a4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000204d2  2**0
                  CONTENTS, READONLY
  8 .debug_info   000248fc  00000000  00000000  0002052b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003832  00000000  00000000  00044e27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000cdb2  00000000  00000000  00048659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016e0  00000000  00000000  0005540b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001510  00000000  00000000  00056aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003789e  00000000  00000000  00057ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00019f14  00000000  00000000  0008f899  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123fb8  00000000  00000000  000a97ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000060f0  00000000  00000000  001cd768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 63 03 20 e1 02 00 00 7d 03 00 00 7d 03 00 00     xc. ....}...}...
      10:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      2c:	7d 03 00 00 7d 03 00 00 00 00 00 00 7d 03 00 00     }...}.......}...
      3c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      4c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      5c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      6c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      7c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      8c:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      9c:	7d 03 00 00 dd 2d 00 00 ed 2d 00 00 7d 03 00 00     }....-...-..}...
      ac:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
      bc:	8d 27 00 00 9d 27 00 00 ad 27 00 00 bd 27 00 00     .'...'...'...'..
      cc:	cd 27 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .'..}...}...}...
      dc:	7d 03 00 00 7d 03 00 00 7d 03 00 00 00 00 00 00     }...}...}.......
	...
      f4:	e1 35 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .5..}...}...}...
     104:	7d 03 00 00 15 4b 00 00 31 4b 00 00 4d 4b 00 00     }....K..1K..MK..
     114:	69 4b 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     iK..}...}...}...
     124:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     134:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     144:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     154:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     164:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     174:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     184:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     194:	1d 53 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     .S..}...}...}...
     1a4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1b4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1c4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1d4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1e4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     1f4:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     204:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     214:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     224:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     234:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...
     244:	55 35 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     U5..}...}...}...
     254:	7d 03 00 00 7d 03 00 00 7d 03 00 00 7d 03 00 00     }...}...}...}...

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	200004b0 	.word	0x200004b0
     280:	00000000 	.word	0x00000000
     284:	00005fa0 	.word	0x00005fa0

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00005fa0 	.word	0x00005fa0
     2c4:	200004b4 	.word	0x200004b4
     2c8:	00005fa0 	.word	0x00005fa0
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b580      	push	{r7, lr}
     2d2:	af00      	add	r7, sp, #0
	system_init();
     2d4:	4b01      	ldr	r3, [pc, #4]	; (2dc <atmel_start_init+0xc>)
     2d6:	4798      	blx	r3
}
     2d8:	bf00      	nop
     2da:	bd80      	pop	{r7, pc}
     2dc:	00000d31 	.word	0x00000d31

000002e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     2e0:	b580      	push	{r7, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
     2e6:	4b1c      	ldr	r3, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e8:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
     2ee:	687a      	ldr	r2, [r7, #4]
     2f0:	683b      	ldr	r3, [r7, #0]
     2f2:	429a      	cmp	r2, r3
     2f4:	d00c      	beq.n	310 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
     2f6:	e007      	b.n	308 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
     2f8:	683b      	ldr	r3, [r7, #0]
     2fa:	1d1a      	adds	r2, r3, #4
     2fc:	603a      	str	r2, [r7, #0]
     2fe:	687a      	ldr	r2, [r7, #4]
     300:	1d11      	adds	r1, r2, #4
     302:	6079      	str	r1, [r7, #4]
     304:	6812      	ldr	r2, [r2, #0]
     306:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
     308:	683b      	ldr	r3, [r7, #0]
     30a:	4a15      	ldr	r2, [pc, #84]	; (360 <Reset_Handler+0x80>)
     30c:	4293      	cmp	r3, r2
     30e:	d3f3      	bcc.n	2f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     310:	4b14      	ldr	r3, [pc, #80]	; (364 <Reset_Handler+0x84>)
     312:	603b      	str	r3, [r7, #0]
     314:	e004      	b.n	320 <Reset_Handler+0x40>
                *pDest++ = 0;
     316:	683b      	ldr	r3, [r7, #0]
     318:	1d1a      	adds	r2, r3, #4
     31a:	603a      	str	r2, [r7, #0]
     31c:	2200      	movs	r2, #0
     31e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
     320:	683b      	ldr	r3, [r7, #0]
     322:	4a11      	ldr	r2, [pc, #68]	; (368 <Reset_Handler+0x88>)
     324:	4293      	cmp	r3, r2
     326:	d3f6      	bcc.n	316 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
     328:	4b10      	ldr	r3, [pc, #64]	; (36c <Reset_Handler+0x8c>)
     32a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32c:	4a10      	ldr	r2, [pc, #64]	; (370 <Reset_Handler+0x90>)
     32e:	687b      	ldr	r3, [r7, #4]
     330:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     334:	6093      	str	r3, [r2, #8]

#if __FPU_USED
        /* Enable FPU */
        SCB->CPACR |=  (0xFu << 20);
     336:	4a0e      	ldr	r2, [pc, #56]	; (370 <Reset_Handler+0x90>)
     338:	4b0d      	ldr	r3, [pc, #52]	; (370 <Reset_Handler+0x90>)
     33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
     33e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
     342:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     346:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     34a:	f3bf 8f6f 	isb	sy
        __DSB();
        __ISB();
#endif

        /* Initialize the C library */
        __libc_init_array();
     34e:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     350:	4798      	blx	r3

        /* Branch to main function */
        main();
     352:	4b09      	ldr	r3, [pc, #36]	; (378 <Reset_Handler+0x98>)
     354:	4798      	blx	r3

        /* Infinite loop */
        while (1);
     356:	e7fe      	b.n	356 <Reset_Handler+0x76>
     358:	00005fa0 	.word	0x00005fa0
     35c:	20000000 	.word	0x20000000
     360:	200004a4 	.word	0x200004a4
     364:	200004b0 	.word	0x200004b0
     368:	20026378 	.word	0x20026378
     36c:	00000000 	.word	0x00000000
     370:	e000ed00 	.word	0xe000ed00
     374:	00005a05 	.word	0x00005a05
     378:	000058a9 	.word	0x000058a9

0000037c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     37c:	b480      	push	{r7}
     37e:	af00      	add	r7, sp, #0
        while (1) {
     380:	e7fe      	b.n	380 <Dummy_Handler+0x4>

00000382 <hri_gclk_write_PCHCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
     382:	b480      	push	{r7}
     384:	b085      	sub	sp, #20
     386:	af00      	add	r7, sp, #0
     388:	60f8      	str	r0, [r7, #12]
     38a:	460b      	mov	r3, r1
     38c:	607a      	str	r2, [r7, #4]
     38e:	72fb      	strb	r3, [r7, #11]
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     390:	7afa      	ldrb	r2, [r7, #11]
     392:	68fb      	ldr	r3, [r7, #12]
     394:	3220      	adds	r2, #32
     396:	6879      	ldr	r1, [r7, #4]
     398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	GCLK_CRITICAL_SECTION_LEAVE();
}
     39c:	bf00      	nop
     39e:	3714      	adds	r7, #20
     3a0:	46bd      	mov	sp, r7
     3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3a6:	4770      	bx	lr

000003a8 <hri_mclk_set_APBAMASK_EIC_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_RTC;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
     3a8:	b480      	push	{r7}
     3aa:	b083      	sub	sp, #12
     3ac:	af00      	add	r7, sp, #0
     3ae:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     3b0:	687b      	ldr	r3, [r7, #4]
     3b2:	695b      	ldr	r3, [r3, #20]
     3b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
     3b8:	687b      	ldr	r3, [r7, #4]
     3ba:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3bc:	bf00      	nop
     3be:	370c      	adds	r7, #12
     3c0:	46bd      	mov	sp, r7
     3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c6:	4770      	bx	lr

000003c8 <hri_mclk_set_APBAMASK_SERCOM1_bit>:
	((Mclk *)hw)->APBAMASK.reg ^= MCLK_APBAMASK_SERCOM0;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBAMASK_SERCOM1_bit(const void *const hw)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	695b      	ldr	r3, [r3, #20]
     3d4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	615a      	str	r2, [r3, #20]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3dc:	bf00      	nop
     3de:	370c      	adds	r7, #12
     3e0:	46bd      	mov	sp, r7
     3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     3e6:	4770      	bx	lr

000003e8 <hri_mclk_set_APBBMASK_EVSYS_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_HMATRIX;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
     3e8:	b480      	push	{r7}
     3ea:	b083      	sub	sp, #12
     3ec:	af00      	add	r7, sp, #0
     3ee:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     3f0:	687b      	ldr	r3, [r7, #4]
     3f2:	699b      	ldr	r3, [r3, #24]
     3f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
     3f8:	687b      	ldr	r3, [r7, #4]
     3fa:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     3fc:	bf00      	nop
     3fe:	370c      	adds	r7, #12
     400:	46bd      	mov	sp, r7
     402:	f85d 7b04 	ldr.w	r7, [sp], #4
     406:	4770      	bx	lr

00000408 <hri_mclk_set_APBBMASK_TCC0_bit>:
	((Mclk *)hw)->APBBMASK.reg ^= MCLK_APBBMASK_SERCOM3;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBBMASK_TCC0_bit(const void *const hw)
{
     408:	b480      	push	{r7}
     40a:	b083      	sub	sp, #12
     40c:	af00      	add	r7, sp, #0
     40e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     410:	687b      	ldr	r3, [r7, #4]
     412:	699b      	ldr	r3, [r3, #24]
     414:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     418:	687b      	ldr	r3, [r7, #4]
     41a:	619a      	str	r2, [r3, #24]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     41c:	bf00      	nop
     41e:	370c      	adds	r7, #12
     420:	46bd      	mov	sp, r7
     422:	f85d 7b04 	ldr.w	r7, [sp], #4
     426:	4770      	bx	lr

00000428 <hri_mclk_set_APBDMASK_SERCOM7_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_SERCOM6;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_SERCOM7_bit(const void *const hw)
{
     428:	b480      	push	{r7}
     42a:	b083      	sub	sp, #12
     42c:	af00      	add	r7, sp, #0
     42e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     430:	687b      	ldr	r3, [r7, #4]
     432:	6a1b      	ldr	r3, [r3, #32]
     434:	f043 0208 	orr.w	r2, r3, #8
     438:	687b      	ldr	r3, [r7, #4]
     43a:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     43c:	bf00      	nop
     43e:	370c      	adds	r7, #12
     440:	46bd      	mov	sp, r7
     442:	f85d 7b04 	ldr.w	r7, [sp], #4
     446:	4770      	bx	lr

00000448 <hri_mclk_set_APBDMASK_PCC_bit>:
	((Mclk *)hw)->APBDMASK.reg ^= MCLK_APBDMASK_I2S;
	MCLK_CRITICAL_SECTION_LEAVE();
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
     448:	b480      	push	{r7}
     44a:	b083      	sub	sp, #12
     44c:	af00      	add	r7, sp, #0
     44e:	6078      	str	r0, [r7, #4]
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     450:	687b      	ldr	r3, [r7, #4]
     452:	6a1b      	ldr	r3, [r3, #32]
     454:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
     458:	687b      	ldr	r3, [r7, #4]
     45a:	621a      	str	r2, [r3, #32]
	MCLK_CRITICAL_SECTION_LEAVE();
}
     45c:	bf00      	nop
     45e:	370c      	adds	r7, #12
     460:	46bd      	mov	sp, r7
     462:	f85d 7b04 	ldr.w	r7, [sp], #4
     466:	4770      	bx	lr

00000468 <hri_port_set_DIR_reg>:
{
	((Port *)hw)->Group[submodule_index].DIRTGL.reg = PORT_DIR_DIR(mask);
}

static inline void hri_port_set_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     468:	b480      	push	{r7}
     46a:	b085      	sub	sp, #20
     46c:	af00      	add	r7, sp, #0
     46e:	60f8      	str	r0, [r7, #12]
     470:	460b      	mov	r3, r1
     472:	607a      	str	r2, [r7, #4]
     474:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     476:	7afb      	ldrb	r3, [r7, #11]
     478:	68fa      	ldr	r2, [r7, #12]
     47a:	01db      	lsls	r3, r3, #7
     47c:	4413      	add	r3, r2
     47e:	3308      	adds	r3, #8
     480:	687a      	ldr	r2, [r7, #4]
     482:	601a      	str	r2, [r3, #0]
}
     484:	bf00      	nop
     486:	3714      	adds	r7, #20
     488:	46bd      	mov	sp, r7
     48a:	f85d 7b04 	ldr.w	r7, [sp], #4
     48e:	4770      	bx	lr

00000490 <hri_port_clear_DIR_reg>:
	((Port *)hw)->Group[submodule_index].DIRSET.reg = data;
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
     490:	b480      	push	{r7}
     492:	b085      	sub	sp, #20
     494:	af00      	add	r7, sp, #0
     496:	60f8      	str	r0, [r7, #12]
     498:	460b      	mov	r3, r1
     49a:	607a      	str	r2, [r7, #4]
     49c:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     49e:	7afb      	ldrb	r3, [r7, #11]
     4a0:	68fa      	ldr	r2, [r7, #12]
     4a2:	01db      	lsls	r3, r3, #7
     4a4:	4413      	add	r3, r2
     4a6:	3304      	adds	r3, #4
     4a8:	687a      	ldr	r2, [r7, #4]
     4aa:	601a      	str	r2, [r3, #0]
}
     4ac:	bf00      	nop
     4ae:	3714      	adds	r7, #20
     4b0:	46bd      	mov	sp, r7
     4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     4b6:	4770      	bx	lr

000004b8 <hri_port_set_OUT_reg>:
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = PORT_OUT_OUT(mask);
}

static inline void hri_port_set_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4b8:	b480      	push	{r7}
     4ba:	b085      	sub	sp, #20
     4bc:	af00      	add	r7, sp, #0
     4be:	60f8      	str	r0, [r7, #12]
     4c0:	460b      	mov	r3, r1
     4c2:	607a      	str	r2, [r7, #4]
     4c4:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     4c6:	7afb      	ldrb	r3, [r7, #11]
     4c8:	68fa      	ldr	r2, [r7, #12]
     4ca:	01db      	lsls	r3, r3, #7
     4cc:	4413      	add	r3, r2
     4ce:	3318      	adds	r3, #24
     4d0:	687a      	ldr	r2, [r7, #4]
     4d2:	601a      	str	r2, [r3, #0]
}
     4d4:	bf00      	nop
     4d6:	3714      	adds	r7, #20
     4d8:	46bd      	mov	sp, r7
     4da:	f85d 7b04 	ldr.w	r7, [sp], #4
     4de:	4770      	bx	lr

000004e0 <hri_port_clear_OUT_reg>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = data;
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
     4e0:	b480      	push	{r7}
     4e2:	b085      	sub	sp, #20
     4e4:	af00      	add	r7, sp, #0
     4e6:	60f8      	str	r0, [r7, #12]
     4e8:	460b      	mov	r3, r1
     4ea:	607a      	str	r2, [r7, #4]
     4ec:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4ee:	7afb      	ldrb	r3, [r7, #11]
     4f0:	68fa      	ldr	r2, [r7, #12]
     4f2:	01db      	lsls	r3, r3, #7
     4f4:	4413      	add	r3, r2
     4f6:	3314      	adds	r3, #20
     4f8:	687a      	ldr	r2, [r7, #4]
     4fa:	601a      	str	r2, [r3, #0]
}
     4fc:	bf00      	nop
     4fe:	3714      	adds	r7, #20
     500:	46bd      	mov	sp, r7
     502:	f85d 7b04 	ldr.w	r7, [sp], #4
     506:	4770      	bx	lr

00000508 <hri_port_write_PMUX_PMUXE_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXE_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     508:	b480      	push	{r7}
     50a:	b085      	sub	sp, #20
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
     510:	4608      	mov	r0, r1
     512:	4611      	mov	r1, r2
     514:	461a      	mov	r2, r3
     516:	4603      	mov	r3, r0
     518:	70fb      	strb	r3, [r7, #3]
     51a:	460b      	mov	r3, r1
     51c:	70bb      	strb	r3, [r7, #2]
     51e:	4613      	mov	r3, r2
     520:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     522:	78fa      	ldrb	r2, [r7, #3]
     524:	78bb      	ldrb	r3, [r7, #2]
     526:	6879      	ldr	r1, [r7, #4]
     528:	01d2      	lsls	r2, r2, #7
     52a:	440a      	add	r2, r1
     52c:	4413      	add	r3, r2
     52e:	3330      	adds	r3, #48	; 0x30
     530:	781b      	ldrb	r3, [r3, #0]
     532:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     534:	7bfb      	ldrb	r3, [r7, #15]
     536:	f023 030f 	bic.w	r3, r3, #15
     53a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXE(data);
     53c:	787b      	ldrb	r3, [r7, #1]
     53e:	f003 030f 	and.w	r3, r3, #15
     542:	b2da      	uxtb	r2, r3
     544:	7bfb      	ldrb	r3, [r7, #15]
     546:	4313      	orrs	r3, r2
     548:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54a:	78fa      	ldrb	r2, [r7, #3]
     54c:	78bb      	ldrb	r3, [r7, #2]
     54e:	6879      	ldr	r1, [r7, #4]
     550:	01d2      	lsls	r2, r2, #7
     552:	440a      	add	r2, r1
     554:	4413      	add	r3, r2
     556:	3330      	adds	r3, #48	; 0x30
     558:	7bfa      	ldrb	r2, [r7, #15]
     55a:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     55c:	bf00      	nop
     55e:	3714      	adds	r7, #20
     560:	46bd      	mov	sp, r7
     562:	f85d 7b04 	ldr.w	r7, [sp], #4
     566:	4770      	bx	lr

00000568 <hri_port_write_PMUX_PMUXO_bf>:
	return tmp;
}

static inline void hri_port_write_PMUX_PMUXO_bf(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                hri_port_pmux_reg_t data)
{
     568:	b480      	push	{r7}
     56a:	b085      	sub	sp, #20
     56c:	af00      	add	r7, sp, #0
     56e:	6078      	str	r0, [r7, #4]
     570:	4608      	mov	r0, r1
     572:	4611      	mov	r1, r2
     574:	461a      	mov	r2, r3
     576:	4603      	mov	r3, r0
     578:	70fb      	strb	r3, [r7, #3]
     57a:	460b      	mov	r3, r1
     57c:	70bb      	strb	r3, [r7, #2]
     57e:	4613      	mov	r3, r2
     580:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     582:	78fa      	ldrb	r2, [r7, #3]
     584:	78bb      	ldrb	r3, [r7, #2]
     586:	6879      	ldr	r1, [r7, #4]
     588:	01d2      	lsls	r2, r2, #7
     58a:	440a      	add	r2, r1
     58c:	4413      	add	r3, r2
     58e:	3330      	adds	r3, #48	; 0x30
     590:	781b      	ldrb	r3, [r3, #0]
     592:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     594:	7bfb      	ldrb	r3, [r7, #15]
     596:	f003 030f 	and.w	r3, r3, #15
     59a:	73fb      	strb	r3, [r7, #15]
	tmp |= PORT_PMUX_PMUXO(data);
     59c:	787b      	ldrb	r3, [r7, #1]
     59e:	011b      	lsls	r3, r3, #4
     5a0:	b2da      	uxtb	r2, r3
     5a2:	7bfb      	ldrb	r3, [r7, #15]
     5a4:	4313      	orrs	r3, r2
     5a6:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5a8:	78fa      	ldrb	r2, [r7, #3]
     5aa:	78bb      	ldrb	r3, [r7, #2]
     5ac:	6879      	ldr	r1, [r7, #4]
     5ae:	01d2      	lsls	r2, r2, #7
     5b0:	440a      	add	r2, r1
     5b2:	4413      	add	r3, r2
     5b4:	3330      	adds	r3, #48	; 0x30
     5b6:	7bfa      	ldrb	r2, [r7, #15]
     5b8:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     5ba:	bf00      	nop
     5bc:	3714      	adds	r7, #20
     5be:	46bd      	mov	sp, r7
     5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5c4:	4770      	bx	lr

000005c6 <hri_port_write_PINCFG_PMUXEN_bit>:
	return (bool)tmp;
}

static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
     5c6:	b480      	push	{r7}
     5c8:	b085      	sub	sp, #20
     5ca:	af00      	add	r7, sp, #0
     5cc:	6078      	str	r0, [r7, #4]
     5ce:	4608      	mov	r0, r1
     5d0:	4611      	mov	r1, r2
     5d2:	461a      	mov	r2, r3
     5d4:	4603      	mov	r3, r0
     5d6:	70fb      	strb	r3, [r7, #3]
     5d8:	460b      	mov	r3, r1
     5da:	70bb      	strb	r3, [r7, #2]
     5dc:	4613      	mov	r3, r2
     5de:	707b      	strb	r3, [r7, #1]
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5e0:	78fa      	ldrb	r2, [r7, #3]
     5e2:	78bb      	ldrb	r3, [r7, #2]
     5e4:	6879      	ldr	r1, [r7, #4]
     5e6:	01d2      	lsls	r2, r2, #7
     5e8:	440a      	add	r2, r1
     5ea:	4413      	add	r3, r2
     5ec:	3340      	adds	r3, #64	; 0x40
     5ee:	781b      	ldrb	r3, [r3, #0]
     5f0:	73fb      	strb	r3, [r7, #15]
	tmp &= ~PORT_PINCFG_PMUXEN;
     5f2:	7bfb      	ldrb	r3, [r7, #15]
     5f4:	f023 0301 	bic.w	r3, r3, #1
     5f8:	73fb      	strb	r3, [r7, #15]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5fa:	787a      	ldrb	r2, [r7, #1]
     5fc:	7bfb      	ldrb	r3, [r7, #15]
     5fe:	4313      	orrs	r3, r2
     600:	73fb      	strb	r3, [r7, #15]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     602:	78fa      	ldrb	r2, [r7, #3]
     604:	78bb      	ldrb	r3, [r7, #2]
     606:	6879      	ldr	r1, [r7, #4]
     608:	01d2      	lsls	r2, r2, #7
     60a:	440a      	add	r2, r1
     60c:	4413      	add	r3, r2
     60e:	3340      	adds	r3, #64	; 0x40
     610:	7bfa      	ldrb	r2, [r7, #15]
     612:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     614:	bf00      	nop
     616:	3714      	adds	r7, #20
     618:	46bd      	mov	sp, r7
     61a:	f85d 7b04 	ldr.w	r7, [sp], #4
     61e:	4770      	bx	lr

00000620 <hri_port_set_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg ^= PORT_PINCFG_INEN;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_set_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     620:	b490      	push	{r4, r7}
     622:	b082      	sub	sp, #8
     624:	af00      	add	r7, sp, #0
     626:	6078      	str	r0, [r7, #4]
     628:	460b      	mov	r3, r1
     62a:	70fb      	strb	r3, [r7, #3]
     62c:	4613      	mov	r3, r2
     62e:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     630:	78fa      	ldrb	r2, [r7, #3]
     632:	78bb      	ldrb	r3, [r7, #2]
     634:	78f8      	ldrb	r0, [r7, #3]
     636:	78b9      	ldrb	r1, [r7, #2]
     638:	687c      	ldr	r4, [r7, #4]
     63a:	01c0      	lsls	r0, r0, #7
     63c:	4420      	add	r0, r4
     63e:	4401      	add	r1, r0
     640:	3140      	adds	r1, #64	; 0x40
     642:	7809      	ldrb	r1, [r1, #0]
     644:	b2c9      	uxtb	r1, r1
     646:	f041 0104 	orr.w	r1, r1, #4
     64a:	b2c8      	uxtb	r0, r1
     64c:	6879      	ldr	r1, [r7, #4]
     64e:	01d2      	lsls	r2, r2, #7
     650:	440a      	add	r2, r1
     652:	4413      	add	r3, r2
     654:	3340      	adds	r3, #64	; 0x40
     656:	4602      	mov	r2, r0
     658:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     65a:	bf00      	nop
     65c:	3708      	adds	r7, #8
     65e:	46bd      	mov	sp, r7
     660:	bc90      	pop	{r4, r7}
     662:	4770      	bx	lr

00000664 <hri_port_clear_PINCFG_PULLEN_bit>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
	PORT_CRITICAL_SECTION_LEAVE();
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
     664:	b490      	push	{r4, r7}
     666:	b082      	sub	sp, #8
     668:	af00      	add	r7, sp, #0
     66a:	6078      	str	r0, [r7, #4]
     66c:	460b      	mov	r3, r1
     66e:	70fb      	strb	r3, [r7, #3]
     670:	4613      	mov	r3, r2
     672:	70bb      	strb	r3, [r7, #2]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     674:	78fa      	ldrb	r2, [r7, #3]
     676:	78bb      	ldrb	r3, [r7, #2]
     678:	78f8      	ldrb	r0, [r7, #3]
     67a:	78b9      	ldrb	r1, [r7, #2]
     67c:	687c      	ldr	r4, [r7, #4]
     67e:	01c0      	lsls	r0, r0, #7
     680:	4420      	add	r0, r4
     682:	4401      	add	r1, r0
     684:	3140      	adds	r1, #64	; 0x40
     686:	7809      	ldrb	r1, [r1, #0]
     688:	b2c9      	uxtb	r1, r1
     68a:	f021 0104 	bic.w	r1, r1, #4
     68e:	b2c8      	uxtb	r0, r1
     690:	6879      	ldr	r1, [r7, #4]
     692:	01d2      	lsls	r2, r2, #7
     694:	440a      	add	r2, r1
     696:	4413      	add	r3, r2
     698:	3340      	adds	r3, #64	; 0x40
     69a:	4602      	mov	r2, r0
     69c:	701a      	strb	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     69e:	bf00      	nop
     6a0:	3708      	adds	r7, #8
     6a2:	46bd      	mov	sp, r7
     6a4:	bc90      	pop	{r4, r7}
     6a6:	4770      	bx	lr

000006a8 <hri_port_write_WRCONFIG_reg>:
	return ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
}

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
     6a8:	b480      	push	{r7}
     6aa:	b085      	sub	sp, #20
     6ac:	af00      	add	r7, sp, #0
     6ae:	60f8      	str	r0, [r7, #12]
     6b0:	460b      	mov	r3, r1
     6b2:	607a      	str	r2, [r7, #4]
     6b4:	72fb      	strb	r3, [r7, #11]
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     6b6:	7afb      	ldrb	r3, [r7, #11]
     6b8:	68fa      	ldr	r2, [r7, #12]
     6ba:	01db      	lsls	r3, r3, #7
     6bc:	4413      	add	r3, r2
     6be:	3328      	adds	r3, #40	; 0x28
     6c0:	687a      	ldr	r2, [r7, #4]
     6c2:	601a      	str	r2, [r3, #0]
	PORT_CRITICAL_SECTION_LEAVE();
}
     6c4:	bf00      	nop
     6c6:	3714      	adds	r7, #20
     6c8:	46bd      	mov	sp, r7
     6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ce:	4770      	bx	lr

000006d0 <_gpio_set_direction>:
/**
 * \brief Set direction on port with mask
 */
static inline void _gpio_set_direction(const enum gpio_port port, const uint32_t mask,
                                       const enum gpio_direction direction)
{
     6d0:	b580      	push	{r7, lr}
     6d2:	b082      	sub	sp, #8
     6d4:	af00      	add	r7, sp, #0
     6d6:	4603      	mov	r3, r0
     6d8:	6039      	str	r1, [r7, #0]
     6da:	71fb      	strb	r3, [r7, #7]
     6dc:	4613      	mov	r3, r2
     6de:	71bb      	strb	r3, [r7, #6]
	switch (direction) {
     6e0:	79bb      	ldrb	r3, [r7, #6]
     6e2:	2b01      	cmp	r3, #1
     6e4:	d01c      	beq.n	720 <_gpio_set_direction+0x50>
     6e6:	2b02      	cmp	r3, #2
     6e8:	d037      	beq.n	75a <_gpio_set_direction+0x8a>
     6ea:	2b00      	cmp	r3, #0
     6ec:	d14e      	bne.n	78c <_gpio_set_direction+0xbc>
	case GPIO_DIRECTION_OFF:
		hri_port_clear_DIR_reg(PORT, port, mask);
     6ee:	79fb      	ldrb	r3, [r7, #7]
     6f0:	683a      	ldr	r2, [r7, #0]
     6f2:	4619      	mov	r1, r3
     6f4:	482a      	ldr	r0, [pc, #168]	; (7a0 <_gpio_set_direction+0xd0>)
     6f6:	4b2b      	ldr	r3, [pc, #172]	; (7a4 <_gpio_set_direction+0xd4>)
     6f8:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     6fa:	683b      	ldr	r3, [r7, #0]
     6fc:	b29b      	uxth	r3, r3
     6fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     702:	79fb      	ldrb	r3, [r7, #7]
     704:	4619      	mov	r1, r3
     706:	4826      	ldr	r0, [pc, #152]	; (7a0 <_gpio_set_direction+0xd0>)
     708:	4b27      	ldr	r3, [pc, #156]	; (7a8 <_gpio_set_direction+0xd8>)
     70a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     70c:	683b      	ldr	r3, [r7, #0]
     70e:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     710:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     714:	79fb      	ldrb	r3, [r7, #7]
     716:	4619      	mov	r1, r3
     718:	4821      	ldr	r0, [pc, #132]	; (7a0 <_gpio_set_direction+0xd0>)
     71a:	4b23      	ldr	r3, [pc, #140]	; (7a8 <_gpio_set_direction+0xd8>)
     71c:	4798      	blx	r3
		break;
     71e:	e03a      	b.n	796 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_IN:
		hri_port_clear_DIR_reg(PORT, port, mask);
     720:	79fb      	ldrb	r3, [r7, #7]
     722:	683a      	ldr	r2, [r7, #0]
     724:	4619      	mov	r1, r3
     726:	481e      	ldr	r0, [pc, #120]	; (7a0 <_gpio_set_direction+0xd0>)
     728:	4b1e      	ldr	r3, [pc, #120]	; (7a4 <_gpio_set_direction+0xd4>)
     72a:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN | (mask & 0xffff));
     72c:	683b      	ldr	r3, [r7, #0]
     72e:	b29b      	uxth	r3, r3
     730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
     734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     738:	79f9      	ldrb	r1, [r7, #7]
     73a:	461a      	mov	r2, r3
     73c:	4818      	ldr	r0, [pc, #96]	; (7a0 <_gpio_set_direction+0xd0>)
     73e:	4b1a      	ldr	r3, [pc, #104]	; (7a8 <_gpio_set_direction+0xd8>)
     740:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT,
		                            port,
		                            PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | PORT_WRCONFIG_INEN
		                                | ((mask & 0xffff0000) >> 16));
     742:	683b      	ldr	r3, [r7, #0]
     744:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(PORT,
     746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
     74a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     74e:	79f9      	ldrb	r1, [r7, #7]
     750:	461a      	mov	r2, r3
     752:	4813      	ldr	r0, [pc, #76]	; (7a0 <_gpio_set_direction+0xd0>)
     754:	4b14      	ldr	r3, [pc, #80]	; (7a8 <_gpio_set_direction+0xd8>)
     756:	4798      	blx	r3
		break;
     758:	e01d      	b.n	796 <_gpio_set_direction+0xc6>

	case GPIO_DIRECTION_OUT:
		hri_port_set_DIR_reg(PORT, port, mask);
     75a:	79fb      	ldrb	r3, [r7, #7]
     75c:	683a      	ldr	r2, [r7, #0]
     75e:	4619      	mov	r1, r3
     760:	480f      	ldr	r0, [pc, #60]	; (7a0 <_gpio_set_direction+0xd0>)
     762:	4b12      	ldr	r3, [pc, #72]	; (7ac <_gpio_set_direction+0xdc>)
     764:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(PORT, port, PORT_WRCONFIG_WRPINCFG | (mask & 0xffff));
     766:	683b      	ldr	r3, [r7, #0]
     768:	b29b      	uxth	r3, r3
     76a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
     76e:	79fb      	ldrb	r3, [r7, #7]
     770:	4619      	mov	r1, r3
     772:	480b      	ldr	r0, [pc, #44]	; (7a0 <_gpio_set_direction+0xd0>)
     774:	4b0c      	ldr	r3, [pc, #48]	; (7a8 <_gpio_set_direction+0xd8>)
     776:	4798      	blx	r3
		hri_port_write_WRCONFIG_reg(
		    PORT, port, PORT_WRCONFIG_HWSEL | PORT_WRCONFIG_WRPINCFG | ((mask & 0xffff0000) >> 16));
     778:	683b      	ldr	r3, [r7, #0]
     77a:	0c1b      	lsrs	r3, r3, #16
		hri_port_write_WRCONFIG_reg(
     77c:	f043 4240 	orr.w	r2, r3, #3221225472	; 0xc0000000
     780:	79fb      	ldrb	r3, [r7, #7]
     782:	4619      	mov	r1, r3
     784:	4806      	ldr	r0, [pc, #24]	; (7a0 <_gpio_set_direction+0xd0>)
     786:	4b08      	ldr	r3, [pc, #32]	; (7a8 <_gpio_set_direction+0xd8>)
     788:	4798      	blx	r3
		break;
     78a:	e004      	b.n	796 <_gpio_set_direction+0xc6>

	default:
		ASSERT(false);
     78c:	2246      	movs	r2, #70	; 0x46
     78e:	4908      	ldr	r1, [pc, #32]	; (7b0 <_gpio_set_direction+0xe0>)
     790:	2000      	movs	r0, #0
     792:	4b08      	ldr	r3, [pc, #32]	; (7b4 <_gpio_set_direction+0xe4>)
     794:	4798      	blx	r3
	}
}
     796:	bf00      	nop
     798:	3708      	adds	r7, #8
     79a:	46bd      	mov	sp, r7
     79c:	bd80      	pop	{r7, pc}
     79e:	bf00      	nop
     7a0:	41008000 	.word	0x41008000
     7a4:	00000491 	.word	0x00000491
     7a8:	000006a9 	.word	0x000006a9
     7ac:	00000469 	.word	0x00000469
     7b0:	00005c10 	.word	0x00005c10
     7b4:	00001869 	.word	0x00001869

000007b8 <_gpio_set_level>:

/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
     7b8:	b580      	push	{r7, lr}
     7ba:	b082      	sub	sp, #8
     7bc:	af00      	add	r7, sp, #0
     7be:	4603      	mov	r3, r0
     7c0:	6039      	str	r1, [r7, #0]
     7c2:	71fb      	strb	r3, [r7, #7]
     7c4:	4613      	mov	r3, r2
     7c6:	71bb      	strb	r3, [r7, #6]
	if (level) {
     7c8:	79bb      	ldrb	r3, [r7, #6]
     7ca:	2b00      	cmp	r3, #0
     7cc:	d006      	beq.n	7dc <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
     7ce:	79fb      	ldrb	r3, [r7, #7]
     7d0:	683a      	ldr	r2, [r7, #0]
     7d2:	4619      	mov	r1, r3
     7d4:	4806      	ldr	r0, [pc, #24]	; (7f0 <_gpio_set_level+0x38>)
     7d6:	4b07      	ldr	r3, [pc, #28]	; (7f4 <_gpio_set_level+0x3c>)
     7d8:	4798      	blx	r3
	} else {
		hri_port_clear_OUT_reg(PORT, port, mask);
	}
}
     7da:	e005      	b.n	7e8 <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
     7dc:	79fb      	ldrb	r3, [r7, #7]
     7de:	683a      	ldr	r2, [r7, #0]
     7e0:	4619      	mov	r1, r3
     7e2:	4803      	ldr	r0, [pc, #12]	; (7f0 <_gpio_set_level+0x38>)
     7e4:	4b04      	ldr	r3, [pc, #16]	; (7f8 <_gpio_set_level+0x40>)
     7e6:	4798      	blx	r3
}
     7e8:	bf00      	nop
     7ea:	3708      	adds	r7, #8
     7ec:	46bd      	mov	sp, r7
     7ee:	bd80      	pop	{r7, pc}
     7f0:	41008000 	.word	0x41008000
     7f4:	000004b9 	.word	0x000004b9
     7f8:	000004e1 	.word	0x000004e1

000007fc <_gpio_set_pin_pull_mode>:
/**
 * \brief Set pin pull mode
 */
static inline void _gpio_set_pin_pull_mode(const enum gpio_port port, const uint8_t pin,
                                           const enum gpio_pull_mode pull_mode)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	b082      	sub	sp, #8
     800:	af00      	add	r7, sp, #0
     802:	4603      	mov	r3, r0
     804:	71fb      	strb	r3, [r7, #7]
     806:	460b      	mov	r3, r1
     808:	71bb      	strb	r3, [r7, #6]
     80a:	4613      	mov	r3, r2
     80c:	717b      	strb	r3, [r7, #5]
	switch (pull_mode) {
     80e:	797b      	ldrb	r3, [r7, #5]
     810:	2b01      	cmp	r3, #1
     812:	d00a      	beq.n	82a <_gpio_set_pin_pull_mode+0x2e>
     814:	2b02      	cmp	r3, #2
     816:	d01f      	beq.n	858 <_gpio_set_pin_pull_mode+0x5c>
     818:	2b00      	cmp	r3, #0
     81a:	d134      	bne.n	886 <_gpio_set_pin_pull_mode+0x8a>
	case GPIO_PULL_OFF:
		hri_port_clear_PINCFG_PULLEN_bit(PORT, port, pin);
     81c:	79ba      	ldrb	r2, [r7, #6]
     81e:	79fb      	ldrb	r3, [r7, #7]
     820:	4619      	mov	r1, r3
     822:	481e      	ldr	r0, [pc, #120]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     824:	4b1e      	ldr	r3, [pc, #120]	; (8a0 <_gpio_set_pin_pull_mode+0xa4>)
     826:	4798      	blx	r3
		break;
     828:	e033      	b.n	892 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_UP:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     82a:	79bb      	ldrb	r3, [r7, #6]
     82c:	2201      	movs	r2, #1
     82e:	409a      	lsls	r2, r3
     830:	79fb      	ldrb	r3, [r7, #7]
     832:	4619      	mov	r1, r3
     834:	4819      	ldr	r0, [pc, #100]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     836:	4b1b      	ldr	r3, [pc, #108]	; (8a4 <_gpio_set_pin_pull_mode+0xa8>)
     838:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     83a:	79ba      	ldrb	r2, [r7, #6]
     83c:	79fb      	ldrb	r3, [r7, #7]
     83e:	4619      	mov	r1, r3
     840:	4816      	ldr	r0, [pc, #88]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     842:	4b19      	ldr	r3, [pc, #100]	; (8a8 <_gpio_set_pin_pull_mode+0xac>)
     844:	4798      	blx	r3
		hri_port_set_OUT_reg(PORT, port, 1U << pin);
     846:	79bb      	ldrb	r3, [r7, #6]
     848:	2201      	movs	r2, #1
     84a:	409a      	lsls	r2, r3
     84c:	79fb      	ldrb	r3, [r7, #7]
     84e:	4619      	mov	r1, r3
     850:	4812      	ldr	r0, [pc, #72]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     852:	4b16      	ldr	r3, [pc, #88]	; (8ac <_gpio_set_pin_pull_mode+0xb0>)
     854:	4798      	blx	r3
		break;
     856:	e01c      	b.n	892 <_gpio_set_pin_pull_mode+0x96>

	case GPIO_PULL_DOWN:
		hri_port_clear_DIR_reg(PORT, port, 1U << pin);
     858:	79bb      	ldrb	r3, [r7, #6]
     85a:	2201      	movs	r2, #1
     85c:	409a      	lsls	r2, r3
     85e:	79fb      	ldrb	r3, [r7, #7]
     860:	4619      	mov	r1, r3
     862:	480e      	ldr	r0, [pc, #56]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     864:	4b0f      	ldr	r3, [pc, #60]	; (8a4 <_gpio_set_pin_pull_mode+0xa8>)
     866:	4798      	blx	r3
		hri_port_set_PINCFG_PULLEN_bit(PORT, port, pin);
     868:	79ba      	ldrb	r2, [r7, #6]
     86a:	79fb      	ldrb	r3, [r7, #7]
     86c:	4619      	mov	r1, r3
     86e:	480b      	ldr	r0, [pc, #44]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     870:	4b0d      	ldr	r3, [pc, #52]	; (8a8 <_gpio_set_pin_pull_mode+0xac>)
     872:	4798      	blx	r3
		hri_port_clear_OUT_reg(PORT, port, 1U << pin);
     874:	79bb      	ldrb	r3, [r7, #6]
     876:	2201      	movs	r2, #1
     878:	409a      	lsls	r2, r3
     87a:	79fb      	ldrb	r3, [r7, #7]
     87c:	4619      	mov	r1, r3
     87e:	4807      	ldr	r0, [pc, #28]	; (89c <_gpio_set_pin_pull_mode+0xa0>)
     880:	4b0b      	ldr	r3, [pc, #44]	; (8b0 <_gpio_set_pin_pull_mode+0xb4>)
     882:	4798      	blx	r3
		break;
     884:	e005      	b.n	892 <_gpio_set_pin_pull_mode+0x96>

	default:
		ASSERT(false);
     886:	2289      	movs	r2, #137	; 0x89
     888:	490a      	ldr	r1, [pc, #40]	; (8b4 <_gpio_set_pin_pull_mode+0xb8>)
     88a:	2000      	movs	r0, #0
     88c:	4b0a      	ldr	r3, [pc, #40]	; (8b8 <_gpio_set_pin_pull_mode+0xbc>)
     88e:	4798      	blx	r3
		break;
     890:	bf00      	nop
	}
}
     892:	bf00      	nop
     894:	3708      	adds	r7, #8
     896:	46bd      	mov	sp, r7
     898:	bd80      	pop	{r7, pc}
     89a:	bf00      	nop
     89c:	41008000 	.word	0x41008000
     8a0:	00000665 	.word	0x00000665
     8a4:	00000491 	.word	0x00000491
     8a8:	00000621 	.word	0x00000621
     8ac:	000004b9 	.word	0x000004b9
     8b0:	000004e1 	.word	0x000004e1
     8b4:	00005c10 	.word	0x00005c10
     8b8:	00001869 	.word	0x00001869

000008bc <_gpio_set_pin_function>:

/**
 * \brief Set gpio pin function
 */
static inline void _gpio_set_pin_function(const uint32_t gpio, const uint32_t function)
{
     8bc:	b590      	push	{r4, r7, lr}
     8be:	b085      	sub	sp, #20
     8c0:	af00      	add	r7, sp, #0
     8c2:	6078      	str	r0, [r7, #4]
     8c4:	6039      	str	r1, [r7, #0]
	uint8_t port = GPIO_PORT(gpio);
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	095b      	lsrs	r3, r3, #5
     8ca:	73fb      	strb	r3, [r7, #15]
	uint8_t pin  = GPIO_PIN(gpio);
     8cc:	687b      	ldr	r3, [r7, #4]
     8ce:	b2db      	uxtb	r3, r3
     8d0:	f003 031f 	and.w	r3, r3, #31
     8d4:	73bb      	strb	r3, [r7, #14]

	if (function == GPIO_PIN_FUNCTION_OFF) {
     8d6:	683b      	ldr	r3, [r7, #0]
     8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
     8dc:	d106      	bne.n	8ec <_gpio_set_pin_function+0x30>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, false);
     8de:	7bba      	ldrb	r2, [r7, #14]
     8e0:	7bf9      	ldrb	r1, [r7, #15]
     8e2:	2300      	movs	r3, #0
     8e4:	4812      	ldr	r0, [pc, #72]	; (930 <_gpio_set_pin_function+0x74>)
     8e6:	4c13      	ldr	r4, [pc, #76]	; (934 <_gpio_set_pin_function+0x78>)
     8e8:	47a0      	blx	r4
		} else {
			// Even numbered pin
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
		}
	}
}
     8ea:	e01d      	b.n	928 <_gpio_set_pin_function+0x6c>
		hri_port_write_PINCFG_PMUXEN_bit(PORT, port, pin, true);
     8ec:	7bba      	ldrb	r2, [r7, #14]
     8ee:	7bf9      	ldrb	r1, [r7, #15]
     8f0:	2301      	movs	r3, #1
     8f2:	480f      	ldr	r0, [pc, #60]	; (930 <_gpio_set_pin_function+0x74>)
     8f4:	4c0f      	ldr	r4, [pc, #60]	; (934 <_gpio_set_pin_function+0x78>)
     8f6:	47a0      	blx	r4
		if (pin & 1) {
     8f8:	7bbb      	ldrb	r3, [r7, #14]
     8fa:	f003 0301 	and.w	r3, r3, #1
     8fe:	2b00      	cmp	r3, #0
     900:	d009      	beq.n	916 <_gpio_set_pin_function+0x5a>
			hri_port_write_PMUX_PMUXO_bf(PORT, port, pin >> 1, function & 0xffff);
     902:	7bbb      	ldrb	r3, [r7, #14]
     904:	085b      	lsrs	r3, r3, #1
     906:	b2da      	uxtb	r2, r3
     908:	683b      	ldr	r3, [r7, #0]
     90a:	b2db      	uxtb	r3, r3
     90c:	7bf9      	ldrb	r1, [r7, #15]
     90e:	4808      	ldr	r0, [pc, #32]	; (930 <_gpio_set_pin_function+0x74>)
     910:	4c09      	ldr	r4, [pc, #36]	; (938 <_gpio_set_pin_function+0x7c>)
     912:	47a0      	blx	r4
}
     914:	e008      	b.n	928 <_gpio_set_pin_function+0x6c>
			hri_port_write_PMUX_PMUXE_bf(PORT, port, pin >> 1, function & 0xffff);
     916:	7bbb      	ldrb	r3, [r7, #14]
     918:	085b      	lsrs	r3, r3, #1
     91a:	b2da      	uxtb	r2, r3
     91c:	683b      	ldr	r3, [r7, #0]
     91e:	b2db      	uxtb	r3, r3
     920:	7bf9      	ldrb	r1, [r7, #15]
     922:	4803      	ldr	r0, [pc, #12]	; (930 <_gpio_set_pin_function+0x74>)
     924:	4c05      	ldr	r4, [pc, #20]	; (93c <_gpio_set_pin_function+0x80>)
     926:	47a0      	blx	r4
}
     928:	bf00      	nop
     92a:	3714      	adds	r7, #20
     92c:	46bd      	mov	sp, r7
     92e:	bd90      	pop	{r4, r7, pc}
     930:	41008000 	.word	0x41008000
     934:	000005c7 	.word	0x000005c7
     938:	00000569 	.word	0x00000569
     93c:	00000509 	.word	0x00000509

00000940 <gpio_set_pin_pull_mode>:
 * \param[in] pull_mode GPIO_PULL_DOWN = Pull pin low with internal resistor
 *                      GPIO_PULL_UP   = Pull pin high with internal resistor
 *                      GPIO_PULL_OFF  = Disable pin pull mode
 */
static inline void gpio_set_pin_pull_mode(const uint8_t pin, const enum gpio_pull_mode pull_mode)
{
     940:	b580      	push	{r7, lr}
     942:	b082      	sub	sp, #8
     944:	af00      	add	r7, sp, #0
     946:	4603      	mov	r3, r0
     948:	460a      	mov	r2, r1
     94a:	71fb      	strb	r3, [r7, #7]
     94c:	4613      	mov	r3, r2
     94e:	71bb      	strb	r3, [r7, #6]
	_gpio_set_pin_pull_mode((enum gpio_port)GPIO_PORT(pin), pin & 0x1F, pull_mode);
     950:	79fb      	ldrb	r3, [r7, #7]
     952:	095b      	lsrs	r3, r3, #5
     954:	b2d8      	uxtb	r0, r3
     956:	79fb      	ldrb	r3, [r7, #7]
     958:	f003 031f 	and.w	r3, r3, #31
     95c:	b2db      	uxtb	r3, r3
     95e:	79ba      	ldrb	r2, [r7, #6]
     960:	4619      	mov	r1, r3
     962:	4b03      	ldr	r3, [pc, #12]	; (970 <gpio_set_pin_pull_mode+0x30>)
     964:	4798      	blx	r3
}
     966:	bf00      	nop
     968:	3708      	adds	r7, #8
     96a:	46bd      	mov	sp, r7
     96c:	bd80      	pop	{r7, pc}
     96e:	bf00      	nop
     970:	000007fd 	.word	0x000007fd

00000974 <gpio_set_pin_function>:
 * \param[in] function  The pin function is given by a 32-bit wide bitfield
 *                      found in the header files for the device
 *
 */
static inline void gpio_set_pin_function(const uint32_t pin, uint32_t function)
{
     974:	b580      	push	{r7, lr}
     976:	b082      	sub	sp, #8
     978:	af00      	add	r7, sp, #0
     97a:	6078      	str	r0, [r7, #4]
     97c:	6039      	str	r1, [r7, #0]
	_gpio_set_pin_function(pin, function);
     97e:	6839      	ldr	r1, [r7, #0]
     980:	6878      	ldr	r0, [r7, #4]
     982:	4b03      	ldr	r3, [pc, #12]	; (990 <gpio_set_pin_function+0x1c>)
     984:	4798      	blx	r3
}
     986:	bf00      	nop
     988:	3708      	adds	r7, #8
     98a:	46bd      	mov	sp, r7
     98c:	bd80      	pop	{r7, pc}
     98e:	bf00      	nop
     990:	000008bd 	.word	0x000008bd

00000994 <gpio_set_pin_direction>:
 *                      GPIO_DIRECTION_OUT = Data direction out
 *                      GPIO_DIRECTION_OFF = Disables the pin
 *                      (low power state)
 */
static inline void gpio_set_pin_direction(const uint8_t pin, const enum gpio_direction direction)
{
     994:	b580      	push	{r7, lr}
     996:	b082      	sub	sp, #8
     998:	af00      	add	r7, sp, #0
     99a:	4603      	mov	r3, r0
     99c:	460a      	mov	r2, r1
     99e:	71fb      	strb	r3, [r7, #7]
     9a0:	4613      	mov	r3, r2
     9a2:	71bb      	strb	r3, [r7, #6]
	_gpio_set_direction((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), direction);
     9a4:	79fb      	ldrb	r3, [r7, #7]
     9a6:	095b      	lsrs	r3, r3, #5
     9a8:	b2d8      	uxtb	r0, r3
     9aa:	79fb      	ldrb	r3, [r7, #7]
     9ac:	f003 031f 	and.w	r3, r3, #31
     9b0:	2201      	movs	r2, #1
     9b2:	fa02 f303 	lsl.w	r3, r2, r3
     9b6:	79ba      	ldrb	r2, [r7, #6]
     9b8:	4619      	mov	r1, r3
     9ba:	4b03      	ldr	r3, [pc, #12]	; (9c8 <gpio_set_pin_direction+0x34>)
     9bc:	4798      	blx	r3
}
     9be:	bf00      	nop
     9c0:	3708      	adds	r7, #8
     9c2:	46bd      	mov	sp, r7
     9c4:	bd80      	pop	{r7, pc}
     9c6:	bf00      	nop
     9c8:	000006d1 	.word	0x000006d1

000009cc <gpio_set_pin_level>:
 * \param[in] pin       The pin number for device
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void gpio_set_pin_level(const uint8_t pin, const bool level)
{
     9cc:	b580      	push	{r7, lr}
     9ce:	b082      	sub	sp, #8
     9d0:	af00      	add	r7, sp, #0
     9d2:	4603      	mov	r3, r0
     9d4:	460a      	mov	r2, r1
     9d6:	71fb      	strb	r3, [r7, #7]
     9d8:	4613      	mov	r3, r2
     9da:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
     9dc:	79fb      	ldrb	r3, [r7, #7]
     9de:	095b      	lsrs	r3, r3, #5
     9e0:	b2d8      	uxtb	r0, r3
     9e2:	79fb      	ldrb	r3, [r7, #7]
     9e4:	f003 031f 	and.w	r3, r3, #31
     9e8:	2201      	movs	r2, #1
     9ea:	fa02 f303 	lsl.w	r3, r2, r3
     9ee:	79ba      	ldrb	r2, [r7, #6]
     9f0:	4619      	mov	r1, r3
     9f2:	4b03      	ldr	r3, [pc, #12]	; (a00 <gpio_set_pin_level+0x34>)
     9f4:	4798      	blx	r3
}
     9f6:	bf00      	nop
     9f8:	3708      	adds	r7, #8
     9fa:	46bd      	mov	sp, r7
     9fc:	bd80      	pop	{r7, pc}
     9fe:	bf00      	nop
     a00:	000007b9 	.word	0x000007b9

00000a04 <init_mcu>:
 * This function calls the various initialization functions.
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
     a04:	b580      	push	{r7, lr}
     a06:	af00      	add	r7, sp, #0
	_init_chip();
     a08:	4b01      	ldr	r3, [pc, #4]	; (a10 <init_mcu+0xc>)
     a0a:	4798      	blx	r3
}
     a0c:	bf00      	nop
     a0e:	bd80      	pop	{r7, pc}
     a10:	00001ced 	.word	0x00001ced

00000a14 <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc PCC_SCCB;

struct pwm_descriptor PWM_0;

void EXTERNAL_IRQ_0_init(void)
{
     a14:	b580      	push	{r7, lr}
     a16:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EIC_GCLK_ID, CONF_GCLK_EIC_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a18:	2240      	movs	r2, #64	; 0x40
     a1a:	2104      	movs	r1, #4
     a1c:	4811      	ldr	r0, [pc, #68]	; (a64 <EXTERNAL_IRQ_0_init+0x50>)
     a1e:	4b12      	ldr	r3, [pc, #72]	; (a68 <EXTERNAL_IRQ_0_init+0x54>)
     a20:	4798      	blx	r3
	hri_mclk_set_APBAMASK_EIC_bit(MCLK);
     a22:	4812      	ldr	r0, [pc, #72]	; (a6c <EXTERNAL_IRQ_0_init+0x58>)
     a24:	4b12      	ldr	r3, [pc, #72]	; (a70 <EXTERNAL_IRQ_0_init+0x5c>)
     a26:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PCC_VSYNC, GPIO_DIRECTION_IN);
     a28:	2101      	movs	r1, #1
     a2a:	200c      	movs	r0, #12
     a2c:	4b11      	ldr	r3, [pc, #68]	; (a74 <EXTERNAL_IRQ_0_init+0x60>)
     a2e:	4798      	blx	r3

	gpio_set_pin_pull_mode(PCC_VSYNC,
     a30:	2101      	movs	r1, #1
     a32:	200c      	movs	r0, #12
     a34:	4b10      	ldr	r3, [pc, #64]	; (a78 <EXTERNAL_IRQ_0_init+0x64>)
     a36:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(PCC_VSYNC, PINMUX_PA12A_EIC_EXTINT12);
     a38:	f44f 2140 	mov.w	r1, #786432	; 0xc0000
     a3c:	200c      	movs	r0, #12
     a3e:	4b0f      	ldr	r3, [pc, #60]	; (a7c <EXTERNAL_IRQ_0_init+0x68>)
     a40:	4798      	blx	r3

	// Set pin direction to input
	gpio_set_pin_direction(PCC_HSYNC, GPIO_DIRECTION_IN);
     a42:	2101      	movs	r1, #1
     a44:	200d      	movs	r0, #13
     a46:	4b0b      	ldr	r3, [pc, #44]	; (a74 <EXTERNAL_IRQ_0_init+0x60>)
     a48:	4798      	blx	r3

	gpio_set_pin_pull_mode(PCC_HSYNC,
     a4a:	2100      	movs	r1, #0
     a4c:	200d      	movs	r0, #13
     a4e:	4b0a      	ldr	r3, [pc, #40]	; (a78 <EXTERNAL_IRQ_0_init+0x64>)
     a50:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PCC_HSYNC, PINMUX_PA13A_EIC_EXTINT13);
     a52:	f44f 2150 	mov.w	r1, #851968	; 0xd0000
     a56:	200d      	movs	r0, #13
     a58:	4b08      	ldr	r3, [pc, #32]	; (a7c <EXTERNAL_IRQ_0_init+0x68>)
     a5a:	4798      	blx	r3

	ext_irq_init();
     a5c:	4b08      	ldr	r3, [pc, #32]	; (a80 <EXTERNAL_IRQ_0_init+0x6c>)
     a5e:	4798      	blx	r3
}
     a60:	bf00      	nop
     a62:	bd80      	pop	{r7, pc}
     a64:	40001c00 	.word	0x40001c00
     a68:	00000383 	.word	0x00000383
     a6c:	40000800 	.word	0x40000800
     a70:	000003a9 	.word	0x000003a9
     a74:	00000995 	.word	0x00000995
     a78:	00000941 	.word	0x00000941
     a7c:	00000975 	.word	0x00000975
     a80:	00000f5d 	.word	0x00000f5d

00000a84 <EVENT_SYSTEM_0_init>:

void EVENT_SYSTEM_0_init(void)
{
     a84:	b580      	push	{r7, lr}
     a86:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     a88:	2240      	movs	r2, #64	; 0x40
     a8a:	210c      	movs	r1, #12
     a8c:	4804      	ldr	r0, [pc, #16]	; (aa0 <EVENT_SYSTEM_0_init+0x1c>)
     a8e:	4b05      	ldr	r3, [pc, #20]	; (aa4 <EVENT_SYSTEM_0_init+0x20>)
     a90:	4798      	blx	r3

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);
     a92:	4805      	ldr	r0, [pc, #20]	; (aa8 <EVENT_SYSTEM_0_init+0x24>)
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <EVENT_SYSTEM_0_init+0x28>)
     a96:	4798      	blx	r3

	event_system_init();
     a98:	4b05      	ldr	r3, [pc, #20]	; (ab0 <EVENT_SYSTEM_0_init+0x2c>)
     a9a:	4798      	blx	r3
}
     a9c:	bf00      	nop
     a9e:	bd80      	pop	{r7, pc}
     aa0:	40001c00 	.word	0x40001c00
     aa4:	00000383 	.word	0x00000383
     aa8:	40000800 	.word	0x40000800
     aac:	000003e9 	.word	0x000003e9
     ab0:	00000f49 	.word	0x00000f49

00000ab4 <CAMERA_OV7670_PORT_init>:

void CAMERA_OV7670_PORT_init(void)
{
     ab4:	b580      	push	{r7, lr}
     ab6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PCC_PCLK, PINMUX_PA14K_PCC_CLK);
     ab8:	4912      	ldr	r1, [pc, #72]	; (b04 <CAMERA_OV7670_PORT_init+0x50>)
     aba:	200e      	movs	r0, #14
     abc:	4b12      	ldr	r3, [pc, #72]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     abe:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA0, PINMUX_PA16K_PCC_DATA0);
     ac0:	4912      	ldr	r1, [pc, #72]	; (b0c <CAMERA_OV7670_PORT_init+0x58>)
     ac2:	2010      	movs	r0, #16
     ac4:	4b10      	ldr	r3, [pc, #64]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     ac6:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA1, PINMUX_PA17K_PCC_DATA1);
     ac8:	4911      	ldr	r1, [pc, #68]	; (b10 <CAMERA_OV7670_PORT_init+0x5c>)
     aca:	2011      	movs	r0, #17
     acc:	4b0e      	ldr	r3, [pc, #56]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     ace:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA2, PINMUX_PA18K_PCC_DATA2);
     ad0:	4910      	ldr	r1, [pc, #64]	; (b14 <CAMERA_OV7670_PORT_init+0x60>)
     ad2:	2012      	movs	r0, #18
     ad4:	4b0c      	ldr	r3, [pc, #48]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     ad6:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA3, PINMUX_PA19K_PCC_DATA3);
     ad8:	490f      	ldr	r1, [pc, #60]	; (b18 <CAMERA_OV7670_PORT_init+0x64>)
     ada:	2013      	movs	r0, #19
     adc:	4b0a      	ldr	r3, [pc, #40]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     ade:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA4, PINMUX_PA20K_PCC_DATA4);
     ae0:	490e      	ldr	r1, [pc, #56]	; (b1c <CAMERA_OV7670_PORT_init+0x68>)
     ae2:	2014      	movs	r0, #20
     ae4:	4b08      	ldr	r3, [pc, #32]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     ae6:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA5, PINMUX_PA21K_PCC_DATA5);
     ae8:	490d      	ldr	r1, [pc, #52]	; (b20 <CAMERA_OV7670_PORT_init+0x6c>)
     aea:	2015      	movs	r0, #21
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     aee:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA6, PINMUX_PA22K_PCC_DATA6);
     af0:	490c      	ldr	r1, [pc, #48]	; (b24 <CAMERA_OV7670_PORT_init+0x70>)
     af2:	2016      	movs	r0, #22
     af4:	4b04      	ldr	r3, [pc, #16]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     af6:	4798      	blx	r3

	gpio_set_pin_function(PCC_DATA7, PINMUX_PA23K_PCC_DATA7);
     af8:	490b      	ldr	r1, [pc, #44]	; (b28 <CAMERA_OV7670_PORT_init+0x74>)
     afa:	2017      	movs	r0, #23
     afc:	4b02      	ldr	r3, [pc, #8]	; (b08 <CAMERA_OV7670_PORT_init+0x54>)
     afe:	4798      	blx	r3
}
     b00:	bf00      	nop
     b02:	bd80      	pop	{r7, pc}
     b04:	000e000a 	.word	0x000e000a
     b08:	00000975 	.word	0x00000975
     b0c:	0010000a 	.word	0x0010000a
     b10:	0011000a 	.word	0x0011000a
     b14:	0012000a 	.word	0x0012000a
     b18:	0013000a 	.word	0x0013000a
     b1c:	0014000a 	.word	0x0014000a
     b20:	0015000a 	.word	0x0015000a
     b24:	0016000a 	.word	0x0016000a
     b28:	0017000a 	.word	0x0017000a

00000b2c <CAMERA_OV7670_CLOCK_init>:

void CAMERA_OV7670_CLOCK_init(void)
{
     b2c:	b580      	push	{r7, lr}
     b2e:	af00      	add	r7, sp, #0
	hri_mclk_set_APBDMASK_PCC_bit(MCLK);
     b30:	4802      	ldr	r0, [pc, #8]	; (b3c <CAMERA_OV7670_CLOCK_init+0x10>)
     b32:	4b03      	ldr	r3, [pc, #12]	; (b40 <CAMERA_OV7670_CLOCK_init+0x14>)
     b34:	4798      	blx	r3
}
     b36:	bf00      	nop
     b38:	bd80      	pop	{r7, pc}
     b3a:	bf00      	nop
     b3c:	40000800 	.word	0x40000800
     b40:	00000449 	.word	0x00000449

00000b44 <CAMERA_OV7670_init>:

void CAMERA_OV7670_init(void)
{
     b44:	b580      	push	{r7, lr}
     b46:	af00      	add	r7, sp, #0
	CAMERA_OV7670_CLOCK_init();
     b48:	4b04      	ldr	r3, [pc, #16]	; (b5c <CAMERA_OV7670_init+0x18>)
     b4a:	4798      	blx	r3
	camera_async_init(&CAMERA_OV7670, PCC);
     b4c:	4904      	ldr	r1, [pc, #16]	; (b60 <CAMERA_OV7670_init+0x1c>)
     b4e:	4805      	ldr	r0, [pc, #20]	; (b64 <CAMERA_OV7670_init+0x20>)
     b50:	4b05      	ldr	r3, [pc, #20]	; (b68 <CAMERA_OV7670_init+0x24>)
     b52:	4798      	blx	r3
	CAMERA_OV7670_PORT_init();
     b54:	4b05      	ldr	r3, [pc, #20]	; (b6c <CAMERA_OV7670_init+0x28>)
     b56:	4798      	blx	r3
}
     b58:	bf00      	nop
     b5a:	bd80      	pop	{r7, pc}
     b5c:	00000b2d 	.word	0x00000b2d
     b60:	43002c00 	.word	0x43002c00
     b64:	20026300 	.word	0x20026300
     b68:	00000e61 	.word	0x00000e61
     b6c:	00000ab5 	.word	0x00000ab5

00000b70 <EDBG_COM_CLOCK_init>:
 * \brief USART Clock initialization function
 *
 * Enables register interface and peripheral clock
 */
void EDBG_COM_CLOCK_init()
{
     b70:	b580      	push	{r7, lr}
     b72:	af00      	add	r7, sp, #0

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b74:	2240      	movs	r2, #64	; 0x40
     b76:	2108      	movs	r1, #8
     b78:	4806      	ldr	r0, [pc, #24]	; (b94 <EDBG_COM_CLOCK_init+0x24>)
     b7a:	4b07      	ldr	r3, [pc, #28]	; (b98 <EDBG_COM_CLOCK_init+0x28>)
     b7c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     b7e:	2242      	movs	r2, #66	; 0x42
     b80:	2103      	movs	r1, #3
     b82:	4804      	ldr	r0, [pc, #16]	; (b94 <EDBG_COM_CLOCK_init+0x24>)
     b84:	4b04      	ldr	r3, [pc, #16]	; (b98 <EDBG_COM_CLOCK_init+0x28>)
     b86:	4798      	blx	r3

	hri_mclk_set_APBAMASK_SERCOM1_bit(MCLK);
     b88:	4804      	ldr	r0, [pc, #16]	; (b9c <EDBG_COM_CLOCK_init+0x2c>)
     b8a:	4b05      	ldr	r3, [pc, #20]	; (ba0 <EDBG_COM_CLOCK_init+0x30>)
     b8c:	4798      	blx	r3
}
     b8e:	bf00      	nop
     b90:	bd80      	pop	{r7, pc}
     b92:	bf00      	nop
     b94:	40001c00 	.word	0x40001c00
     b98:	00000383 	.word	0x00000383
     b9c:	40000800 	.word	0x40000800
     ba0:	000003c9 	.word	0x000003c9

00000ba4 <EDBG_COM_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void EDBG_COM_PORT_init()
{
     ba4:	b580      	push	{r7, lr}
     ba6:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PC27, PINMUX_PC27C_SERCOM1_PAD0);
     ba8:	4904      	ldr	r1, [pc, #16]	; (bbc <EDBG_COM_PORT_init+0x18>)
     baa:	205b      	movs	r0, #91	; 0x5b
     bac:	4b04      	ldr	r3, [pc, #16]	; (bc0 <EDBG_COM_PORT_init+0x1c>)
     bae:	4798      	blx	r3

	gpio_set_pin_function(PC28, PINMUX_PC28C_SERCOM1_PAD1);
     bb0:	4904      	ldr	r1, [pc, #16]	; (bc4 <EDBG_COM_PORT_init+0x20>)
     bb2:	205c      	movs	r0, #92	; 0x5c
     bb4:	4b02      	ldr	r3, [pc, #8]	; (bc0 <EDBG_COM_PORT_init+0x1c>)
     bb6:	4798      	blx	r3
}
     bb8:	bf00      	nop
     bba:	bd80      	pop	{r7, pc}
     bbc:	005b0002 	.word	0x005b0002
     bc0:	00000975 	.word	0x00000975
     bc4:	005c0002 	.word	0x005c0002

00000bc8 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
     bc8:	b590      	push	{r4, r7, lr}
     bca:	b083      	sub	sp, #12
     bcc:	af02      	add	r7, sp, #8
	EDBG_COM_CLOCK_init();
     bce:	4b08      	ldr	r3, [pc, #32]	; (bf0 <EDBG_COM_init+0x28>)
     bd0:	4798      	blx	r3
	usart_async_init(&EDBG_COM, SERCOM1, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, (void *)NULL);
     bd2:	2300      	movs	r3, #0
     bd4:	9300      	str	r3, [sp, #0]
     bd6:	2310      	movs	r3, #16
     bd8:	4a06      	ldr	r2, [pc, #24]	; (bf4 <EDBG_COM_init+0x2c>)
     bda:	4907      	ldr	r1, [pc, #28]	; (bf8 <EDBG_COM_init+0x30>)
     bdc:	4807      	ldr	r0, [pc, #28]	; (bfc <EDBG_COM_init+0x34>)
     bde:	4c08      	ldr	r4, [pc, #32]	; (c00 <EDBG_COM_init+0x38>)
     be0:	47a0      	blx	r4
	EDBG_COM_PORT_init();
     be2:	4b08      	ldr	r3, [pc, #32]	; (c04 <EDBG_COM_init+0x3c>)
     be4:	4798      	blx	r3
}
     be6:	bf00      	nop
     be8:	3704      	adds	r7, #4
     bea:	46bd      	mov	sp, r7
     bec:	bd90      	pop	{r4, r7, pc}
     bee:	bf00      	nop
     bf0:	00000b71 	.word	0x00000b71
     bf4:	200004cc 	.word	0x200004cc
     bf8:	40003400 	.word	0x40003400
     bfc:	200262b0 	.word	0x200262b0
     c00:	00001525 	.word	0x00001525
     c04:	00000ba5 	.word	0x00000ba5

00000c08 <PCC_SCCB_PORT_init>:

void PCC_SCCB_PORT_init(void)
{
     c08:	b580      	push	{r7, lr}
     c0a:	af00      	add	r7, sp, #0

	gpio_set_pin_pull_mode(PCC_SCCB_SDA,
     c0c:	2100      	movs	r1, #0
     c0e:	2068      	movs	r0, #104	; 0x68
     c10:	4b07      	ldr	r3, [pc, #28]	; (c30 <PCC_SCCB_PORT_init+0x28>)
     c12:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PCC_SCCB_SDA, PINMUX_PD08C_SERCOM7_PAD0);
     c14:	4907      	ldr	r1, [pc, #28]	; (c34 <PCC_SCCB_PORT_init+0x2c>)
     c16:	2068      	movs	r0, #104	; 0x68
     c18:	4b07      	ldr	r3, [pc, #28]	; (c38 <PCC_SCCB_PORT_init+0x30>)
     c1a:	4798      	blx	r3

	gpio_set_pin_pull_mode(PCC_SCCB_SCL,
     c1c:	2100      	movs	r1, #0
     c1e:	2069      	movs	r0, #105	; 0x69
     c20:	4b03      	ldr	r3, [pc, #12]	; (c30 <PCC_SCCB_PORT_init+0x28>)
     c22:	4798      	blx	r3
	                       // <GPIO_PULL_OFF"> Off
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PCC_SCCB_SCL, PINMUX_PD09C_SERCOM7_PAD1);
     c24:	4905      	ldr	r1, [pc, #20]	; (c3c <PCC_SCCB_PORT_init+0x34>)
     c26:	2069      	movs	r0, #105	; 0x69
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <PCC_SCCB_PORT_init+0x30>)
     c2a:	4798      	blx	r3
}
     c2c:	bf00      	nop
     c2e:	bd80      	pop	{r7, pc}
     c30:	00000941 	.word	0x00000941
     c34:	00680002 	.word	0x00680002
     c38:	00000975 	.word	0x00000975
     c3c:	00690002 	.word	0x00690002

00000c40 <PCC_SCCB_CLOCK_init>:

void PCC_SCCB_CLOCK_init(void)
{
     c40:	b580      	push	{r7, lr}
     c42:	af00      	add	r7, sp, #0
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_CORE, CONF_GCLK_SERCOM7_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c44:	2243      	movs	r2, #67	; 0x43
     c46:	2125      	movs	r1, #37	; 0x25
     c48:	4806      	ldr	r0, [pc, #24]	; (c64 <PCC_SCCB_CLOCK_init+0x24>)
     c4a:	4b07      	ldr	r3, [pc, #28]	; (c68 <PCC_SCCB_CLOCK_init+0x28>)
     c4c:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM7_GCLK_ID_SLOW, CONF_GCLK_SERCOM7_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     c4e:	2242      	movs	r2, #66	; 0x42
     c50:	2103      	movs	r1, #3
     c52:	4804      	ldr	r0, [pc, #16]	; (c64 <PCC_SCCB_CLOCK_init+0x24>)
     c54:	4b04      	ldr	r3, [pc, #16]	; (c68 <PCC_SCCB_CLOCK_init+0x28>)
     c56:	4798      	blx	r3

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
     c58:	4804      	ldr	r0, [pc, #16]	; (c6c <PCC_SCCB_CLOCK_init+0x2c>)
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <PCC_SCCB_CLOCK_init+0x30>)
     c5c:	4798      	blx	r3
}
     c5e:	bf00      	nop
     c60:	bd80      	pop	{r7, pc}
     c62:	bf00      	nop
     c64:	40001c00 	.word	0x40001c00
     c68:	00000383 	.word	0x00000383
     c6c:	40000800 	.word	0x40000800
     c70:	00000429 	.word	0x00000429

00000c74 <PCC_SCCB_init>:

void PCC_SCCB_init(void)
{
     c74:	b580      	push	{r7, lr}
     c76:	af00      	add	r7, sp, #0
	PCC_SCCB_CLOCK_init();
     c78:	4b04      	ldr	r3, [pc, #16]	; (c8c <PCC_SCCB_init+0x18>)
     c7a:	4798      	blx	r3
	i2c_m_sync_init(&PCC_SCCB, SERCOM7);
     c7c:	4904      	ldr	r1, [pc, #16]	; (c90 <PCC_SCCB_init+0x1c>)
     c7e:	4805      	ldr	r0, [pc, #20]	; (c94 <PCC_SCCB_init+0x20>)
     c80:	4b05      	ldr	r3, [pc, #20]	; (c98 <PCC_SCCB_init+0x24>)
     c82:	4798      	blx	r3
	PCC_SCCB_PORT_init();
     c84:	4b05      	ldr	r3, [pc, #20]	; (c9c <PCC_SCCB_init+0x28>)
     c86:	4798      	blx	r3
}
     c88:	bf00      	nop
     c8a:	bd80      	pop	{r7, pc}
     c8c:	00000c41 	.word	0x00000c41
     c90:	43000c00 	.word	0x43000c00
     c94:	20026314 	.word	0x20026314
     c98:	00001265 	.word	0x00001265
     c9c:	00000c09 	.word	0x00000c09

00000ca0 <delay_driver_init>:

void delay_driver_init(void)
{
     ca0:	b580      	push	{r7, lr}
     ca2:	af00      	add	r7, sp, #0
	delay_init(SysTick);
     ca4:	4802      	ldr	r0, [pc, #8]	; (cb0 <delay_driver_init+0x10>)
     ca6:	4b03      	ldr	r3, [pc, #12]	; (cb4 <delay_driver_init+0x14>)
     ca8:	4798      	blx	r3
}
     caa:	bf00      	nop
     cac:	bd80      	pop	{r7, pc}
     cae:	bf00      	nop
     cb0:	e000e010 	.word	0xe000e010
     cb4:	00000eb9 	.word	0x00000eb9

00000cb8 <PWM_0_PORT_init>:

void PWM_0_PORT_init(void)
{
     cb8:	b580      	push	{r7, lr}
     cba:	af00      	add	r7, sp, #0

	gpio_set_pin_function(PD11, PINMUX_PD11F_TCC0_WO4);
     cbc:	4902      	ldr	r1, [pc, #8]	; (cc8 <PWM_0_PORT_init+0x10>)
     cbe:	206b      	movs	r0, #107	; 0x6b
     cc0:	4b02      	ldr	r3, [pc, #8]	; (ccc <PWM_0_PORT_init+0x14>)
     cc2:	4798      	blx	r3
}
     cc4:	bf00      	nop
     cc6:	bd80      	pop	{r7, pc}
     cc8:	006b0005 	.word	0x006b0005
     ccc:	00000975 	.word	0x00000975

00000cd0 <PWM_0_CLOCK_init>:

void PWM_0_CLOCK_init(void)
{
     cd0:	b580      	push	{r7, lr}
     cd2:	af00      	add	r7, sp, #0

	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
     cd4:	4804      	ldr	r0, [pc, #16]	; (ce8 <PWM_0_CLOCK_init+0x18>)
     cd6:	4b05      	ldr	r3, [pc, #20]	; (cec <PWM_0_CLOCK_init+0x1c>)
     cd8:	4798      	blx	r3
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
     cda:	2240      	movs	r2, #64	; 0x40
     cdc:	2119      	movs	r1, #25
     cde:	4804      	ldr	r0, [pc, #16]	; (cf0 <PWM_0_CLOCK_init+0x20>)
     ce0:	4b04      	ldr	r3, [pc, #16]	; (cf4 <PWM_0_CLOCK_init+0x24>)
     ce2:	4798      	blx	r3
}
     ce4:	bf00      	nop
     ce6:	bd80      	pop	{r7, pc}
     ce8:	40000800 	.word	0x40000800
     cec:	00000409 	.word	0x00000409
     cf0:	40001c00 	.word	0x40001c00
     cf4:	00000383 	.word	0x00000383

00000cf8 <PWM_0_init>:

void PWM_0_init(void)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	af00      	add	r7, sp, #0
	PWM_0_CLOCK_init();
     cfc:	4b06      	ldr	r3, [pc, #24]	; (d18 <PWM_0_init+0x20>)
     cfe:	4798      	blx	r3
	PWM_0_PORT_init();
     d00:	4b06      	ldr	r3, [pc, #24]	; (d1c <PWM_0_init+0x24>)
     d02:	4798      	blx	r3
	pwm_init(&PWM_0, TCC0, _tcc_get_pwm());
     d04:	4b06      	ldr	r3, [pc, #24]	; (d20 <PWM_0_init+0x28>)
     d06:	4798      	blx	r3
     d08:	4603      	mov	r3, r0
     d0a:	461a      	mov	r2, r3
     d0c:	4905      	ldr	r1, [pc, #20]	; (d24 <PWM_0_init+0x2c>)
     d0e:	4806      	ldr	r0, [pc, #24]	; (d28 <PWM_0_init+0x30>)
     d10:	4b06      	ldr	r3, [pc, #24]	; (d2c <PWM_0_init+0x34>)
     d12:	4798      	blx	r3
}
     d14:	bf00      	nop
     d16:	bd80      	pop	{r7, pc}
     d18:	00000cd1 	.word	0x00000cd1
     d1c:	00000cb9 	.word	0x00000cb9
     d20:	000052a1 	.word	0x000052a1
     d24:	41016000 	.word	0x41016000
     d28:	20026294 	.word	0x20026294
     d2c:	000013e1 	.word	0x000013e1

00000d30 <system_init>:

void system_init(void)
{
     d30:	b580      	push	{r7, lr}
     d32:	af00      	add	r7, sp, #0
	init_mcu();
     d34:	4b22      	ldr	r3, [pc, #136]	; (dc0 <system_init+0x90>)
     d36:	4798      	blx	r3

	// GPIO on PC11

	gpio_set_pin_level(PC11,
     d38:	2100      	movs	r1, #0
     d3a:	204b      	movs	r0, #75	; 0x4b
     d3c:	4b21      	ldr	r3, [pc, #132]	; (dc4 <system_init+0x94>)
     d3e:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC11, GPIO_DIRECTION_OUT);
     d40:	2102      	movs	r1, #2
     d42:	204b      	movs	r0, #75	; 0x4b
     d44:	4b20      	ldr	r3, [pc, #128]	; (dc8 <system_init+0x98>)
     d46:	4798      	blx	r3

	gpio_set_pin_function(PC11, GPIO_PIN_FUNCTION_OFF);
     d48:	f04f 31ff 	mov.w	r1, #4294967295
     d4c:	204b      	movs	r0, #75	; 0x4b
     d4e:	4b1f      	ldr	r3, [pc, #124]	; (dcc <system_init+0x9c>)
     d50:	4798      	blx	r3

	// GPIO on PC12

	gpio_set_pin_level(PC12,
     d52:	2100      	movs	r1, #0
     d54:	204c      	movs	r0, #76	; 0x4c
     d56:	4b1b      	ldr	r3, [pc, #108]	; (dc4 <system_init+0x94>)
     d58:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PC12, GPIO_DIRECTION_OUT);
     d5a:	2102      	movs	r1, #2
     d5c:	204c      	movs	r0, #76	; 0x4c
     d5e:	4b1a      	ldr	r3, [pc, #104]	; (dc8 <system_init+0x98>)
     d60:	4798      	blx	r3

	gpio_set_pin_function(PC12, GPIO_PIN_FUNCTION_OFF);
     d62:	f04f 31ff 	mov.w	r1, #4294967295
     d66:	204c      	movs	r0, #76	; 0x4c
     d68:	4b18      	ldr	r3, [pc, #96]	; (dcc <system_init+0x9c>)
     d6a:	4798      	blx	r3

	// GPIO on PC22

	gpio_set_pin_level(PCC_PWDN,
     d6c:	2100      	movs	r1, #0
     d6e:	2056      	movs	r0, #86	; 0x56
     d70:	4b14      	ldr	r3, [pc, #80]	; (dc4 <system_init+0x94>)
     d72:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   false);

	// Set pin direction to output
	gpio_set_pin_direction(PCC_PWDN, GPIO_DIRECTION_OUT);
     d74:	2102      	movs	r1, #2
     d76:	2056      	movs	r0, #86	; 0x56
     d78:	4b13      	ldr	r3, [pc, #76]	; (dc8 <system_init+0x98>)
     d7a:	4798      	blx	r3

	gpio_set_pin_function(PCC_PWDN, GPIO_PIN_FUNCTION_OFF);
     d7c:	f04f 31ff 	mov.w	r1, #4294967295
     d80:	2056      	movs	r0, #86	; 0x56
     d82:	4b12      	ldr	r3, [pc, #72]	; (dcc <system_init+0x9c>)
     d84:	4798      	blx	r3

	// GPIO on PC23

	gpio_set_pin_level(PCC_RESET,
     d86:	2101      	movs	r1, #1
     d88:	2057      	movs	r0, #87	; 0x57
     d8a:	4b0e      	ldr	r3, [pc, #56]	; (dc4 <system_init+0x94>)
     d8c:	4798      	blx	r3
	                   // <false"> Low
	                   // <true"> High
	                   true);

	// Set pin direction to output
	gpio_set_pin_direction(PCC_RESET, GPIO_DIRECTION_OUT);
     d8e:	2102      	movs	r1, #2
     d90:	2057      	movs	r0, #87	; 0x57
     d92:	4b0d      	ldr	r3, [pc, #52]	; (dc8 <system_init+0x98>)
     d94:	4798      	blx	r3

	gpio_set_pin_function(PCC_RESET, GPIO_PIN_FUNCTION_OFF);
     d96:	f04f 31ff 	mov.w	r1, #4294967295
     d9a:	2057      	movs	r0, #87	; 0x57
     d9c:	4b0b      	ldr	r3, [pc, #44]	; (dcc <system_init+0x9c>)
     d9e:	4798      	blx	r3

	EXTERNAL_IRQ_0_init();
     da0:	4b0b      	ldr	r3, [pc, #44]	; (dd0 <system_init+0xa0>)
     da2:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     da4:	4b0b      	ldr	r3, [pc, #44]	; (dd4 <system_init+0xa4>)
     da6:	4798      	blx	r3

	CAMERA_OV7670_init();
     da8:	4b0b      	ldr	r3, [pc, #44]	; (dd8 <system_init+0xa8>)
     daa:	4798      	blx	r3

	EDBG_COM_init();
     dac:	4b0b      	ldr	r3, [pc, #44]	; (ddc <system_init+0xac>)
     dae:	4798      	blx	r3

	PCC_SCCB_init();
     db0:	4b0b      	ldr	r3, [pc, #44]	; (de0 <system_init+0xb0>)
     db2:	4798      	blx	r3

	delay_driver_init();
     db4:	4b0b      	ldr	r3, [pc, #44]	; (de4 <system_init+0xb4>)
     db6:	4798      	blx	r3

	PWM_0_init();
     db8:	4b0b      	ldr	r3, [pc, #44]	; (de8 <system_init+0xb8>)
     dba:	4798      	blx	r3
}
     dbc:	bf00      	nop
     dbe:	bd80      	pop	{r7, pc}
     dc0:	00000a05 	.word	0x00000a05
     dc4:	000009cd 	.word	0x000009cd
     dc8:	00000995 	.word	0x00000995
     dcc:	00000975 	.word	0x00000975
     dd0:	00000a15 	.word	0x00000a15
     dd4:	00000a85 	.word	0x00000a85
     dd8:	00000b45 	.word	0x00000b45
     ddc:	00000bc9 	.word	0x00000bc9
     de0:	00000c75 	.word	0x00000c75
     de4:	00000ca1 	.word	0x00000ca1
     de8:	00000cf9 	.word	0x00000cf9

00000dec <atomic_enter_critical>:

/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
     dec:	b480      	push	{r7}
     dee:	b085      	sub	sp, #20
     df0:	af00      	add	r7, sp, #0
     df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     df4:	f3ef 8310 	mrs	r3, PRIMASK
     df8:	60fb      	str	r3, [r7, #12]
  return(result);
     dfa:	68fa      	ldr	r2, [r7, #12]
	*atomic = __get_PRIMASK();
     dfc:	687b      	ldr	r3, [r7, #4]
     dfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     e00:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     e02:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     e06:	bf00      	nop
     e08:	3714      	adds	r7, #20
     e0a:	46bd      	mov	sp, r7
     e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
     e10:	4770      	bx	lr

00000e12 <atomic_leave_critical>:

/**
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
     e12:	b480      	push	{r7}
     e14:	b085      	sub	sp, #20
     e16:	af00      	add	r7, sp, #0
     e18:	6078      	str	r0, [r7, #4]
     e1a:	f3bf 8f5f 	dmb	sy
	__DMB();
	__set_PRIMASK(*atomic);
     e1e:	687b      	ldr	r3, [r7, #4]
     e20:	681b      	ldr	r3, [r3, #0]
     e22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     e24:	68fb      	ldr	r3, [r7, #12]
     e26:	f383 8810 	msr	PRIMASK, r3
}
     e2a:	bf00      	nop
     e2c:	3714      	adds	r7, #20
     e2e:	46bd      	mov	sp, r7
     e30:	f85d 7b04 	ldr.w	r7, [sp], #4
     e34:	4770      	bx	lr

00000e36 <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     e36:	b580      	push	{r7, lr}
     e38:	b084      	sub	sp, #16
     e3a:	af00      	add	r7, sp, #0
     e3c:	6078      	str	r0, [r7, #4]
     e3e:	6039      	str	r1, [r7, #0]
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);
     e40:	687b      	ldr	r3, [r7, #4]
     e42:	60fb      	str	r3, [r7, #12]

	if (descr->capture_done) {
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	691b      	ldr	r3, [r3, #16]
     e48:	2b00      	cmp	r3, #0
     e4a:	d004      	beq.n	e56 <camera_async_capture_done+0x20>
		descr->capture_done(descr, ch);
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	691b      	ldr	r3, [r3, #16]
     e50:	6839      	ldr	r1, [r7, #0]
     e52:	68f8      	ldr	r0, [r7, #12]
     e54:	4798      	blx	r3
	}
}
     e56:	bf00      	nop
     e58:	3710      	adds	r7, #16
     e5a:	46bd      	mov	sp, r7
     e5c:	bd80      	pop	{r7, pc}
	...

00000e60 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     e60:	b580      	push	{r7, lr}
     e62:	b082      	sub	sp, #8
     e64:	af00      	add	r7, sp, #0
     e66:	6078      	str	r0, [r7, #4]
     e68:	6039      	str	r1, [r7, #0]
	ASSERT(descr && hw);
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	2b00      	cmp	r3, #0
     e6e:	d004      	beq.n	e7a <camera_async_init+0x1a>
     e70:	683b      	ldr	r3, [r7, #0]
     e72:	2b00      	cmp	r3, #0
     e74:	d001      	beq.n	e7a <camera_async_init+0x1a>
     e76:	2301      	movs	r3, #1
     e78:	e000      	b.n	e7c <camera_async_init+0x1c>
     e7a:	2300      	movs	r3, #0
     e7c:	f003 0301 	and.w	r3, r3, #1
     e80:	b2db      	uxtb	r3, r3
     e82:	2232      	movs	r2, #50	; 0x32
     e84:	4908      	ldr	r1, [pc, #32]	; (ea8 <camera_async_init+0x48>)
     e86:	4618      	mov	r0, r3
     e88:	4b08      	ldr	r3, [pc, #32]	; (eac <camera_async_init+0x4c>)
     e8a:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     e8c:	687b      	ldr	r3, [r7, #4]
     e8e:	6839      	ldr	r1, [r7, #0]
     e90:	4618      	mov	r0, r3
     e92:	4b07      	ldr	r3, [pc, #28]	; (eb0 <camera_async_init+0x50>)
     e94:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     e96:	687b      	ldr	r3, [r7, #4]
     e98:	4a06      	ldr	r2, [pc, #24]	; (eb4 <camera_async_init+0x54>)
     e9a:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
     e9c:	2300      	movs	r3, #0
}
     e9e:	4618      	mov	r0, r3
     ea0:	3708      	adds	r7, #8
     ea2:	46bd      	mov	sp, r7
     ea4:	bd80      	pop	{r7, pc}
     ea6:	bf00      	nop
     ea8:	00005c2c 	.word	0x00005c2c
     eac:	00001869 	.word	0x00001869
     eb0:	00003441 	.word	0x00003441
     eb4:	00000e37 	.word	0x00000e37

00000eb8 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     eb8:	b580      	push	{r7, lr}
     eba:	b082      	sub	sp, #8
     ebc:	af00      	add	r7, sp, #0
     ebe:	6078      	str	r0, [r7, #4]
	_delay_init(hardware = hw);
     ec0:	4a05      	ldr	r2, [pc, #20]	; (ed8 <delay_init+0x20>)
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	6013      	str	r3, [r2, #0]
     ec6:	4b04      	ldr	r3, [pc, #16]	; (ed8 <delay_init+0x20>)
     ec8:	681b      	ldr	r3, [r3, #0]
     eca:	4618      	mov	r0, r3
     ecc:	4b03      	ldr	r3, [pc, #12]	; (edc <delay_init+0x24>)
     ece:	4798      	blx	r3
}
     ed0:	bf00      	nop
     ed2:	3708      	adds	r7, #8
     ed4:	46bd      	mov	sp, r7
     ed6:	bd80      	pop	{r7, pc}
     ed8:	200004dc 	.word	0x200004dc
     edc:	00004bad 	.word	0x00004bad

00000ee0 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     ee0:	b590      	push	{r4, r7, lr}
     ee2:	b083      	sub	sp, #12
     ee4:	af00      	add	r7, sp, #0
     ee6:	4603      	mov	r3, r0
     ee8:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_us(us));
     eea:	4b07      	ldr	r3, [pc, #28]	; (f08 <delay_us+0x28>)
     eec:	681c      	ldr	r4, [r3, #0]
     eee:	88fb      	ldrh	r3, [r7, #6]
     ef0:	4618      	mov	r0, r3
     ef2:	4b06      	ldr	r3, [pc, #24]	; (f0c <delay_us+0x2c>)
     ef4:	4798      	blx	r3
     ef6:	4603      	mov	r3, r0
     ef8:	4619      	mov	r1, r3
     efa:	4620      	mov	r0, r4
     efc:	4b04      	ldr	r3, [pc, #16]	; (f10 <delay_us+0x30>)
     efe:	4798      	blx	r3
}
     f00:	bf00      	nop
     f02:	370c      	adds	r7, #12
     f04:	46bd      	mov	sp, r7
     f06:	bd90      	pop	{r4, r7, pc}
     f08:	200004dc 	.word	0x200004dc
     f0c:	00001b3d 	.word	0x00001b3d
     f10:	00004bc9 	.word	0x00004bc9

00000f14 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     f14:	b590      	push	{r4, r7, lr}
     f16:	b083      	sub	sp, #12
     f18:	af00      	add	r7, sp, #0
     f1a:	4603      	mov	r3, r0
     f1c:	80fb      	strh	r3, [r7, #6]
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     f1e:	4b07      	ldr	r3, [pc, #28]	; (f3c <delay_ms+0x28>)
     f20:	681c      	ldr	r4, [r3, #0]
     f22:	88fb      	ldrh	r3, [r7, #6]
     f24:	4618      	mov	r0, r3
     f26:	4b06      	ldr	r3, [pc, #24]	; (f40 <delay_ms+0x2c>)
     f28:	4798      	blx	r3
     f2a:	4603      	mov	r3, r0
     f2c:	4619      	mov	r1, r3
     f2e:	4620      	mov	r0, r4
     f30:	4b04      	ldr	r3, [pc, #16]	; (f44 <delay_ms+0x30>)
     f32:	4798      	blx	r3
}
     f34:	bf00      	nop
     f36:	370c      	adds	r7, #12
     f38:	46bd      	mov	sp, r7
     f3a:	bd90      	pop	{r4, r7, pc}
     f3c:	200004dc 	.word	0x200004dc
     f40:	00001c71 	.word	0x00001c71
     f44:	00004bc9 	.word	0x00004bc9

00000f48 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     f48:	b580      	push	{r7, lr}
     f4a:	af00      	add	r7, sp, #0
	return _event_system_init();
     f4c:	4b02      	ldr	r3, [pc, #8]	; (f58 <event_system_init+0x10>)
     f4e:	4798      	blx	r3
     f50:	4603      	mov	r3, r0
}
     f52:	4618      	mov	r0, r3
     f54:	bd80      	pop	{r7, pc}
     f56:	bf00      	nop
     f58:	00002e89 	.word	0x00002e89

00000f5c <ext_irq_init>:

/**
 * \brief Initialize external irq component if any
 */
int32_t ext_irq_init(void)
{
     f5c:	b580      	push	{r7, lr}
     f5e:	b082      	sub	sp, #8
     f60:	af00      	add	r7, sp, #0
	uint16_t i;

	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     f62:	2300      	movs	r3, #0
     f64:	80fb      	strh	r3, [r7, #6]
     f66:	e00e      	b.n	f86 <ext_irq_init+0x2a>
		ext_irqs[i].pin = 0xFFFFFFFF;
     f68:	88fb      	ldrh	r3, [r7, #6]
     f6a:	4a0c      	ldr	r2, [pc, #48]	; (f9c <ext_irq_init+0x40>)
     f6c:	00db      	lsls	r3, r3, #3
     f6e:	4413      	add	r3, r2
     f70:	f04f 32ff 	mov.w	r2, #4294967295
     f74:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     f76:	88fb      	ldrh	r3, [r7, #6]
     f78:	4a08      	ldr	r2, [pc, #32]	; (f9c <ext_irq_init+0x40>)
     f7a:	2100      	movs	r1, #0
     f7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     f80:	88fb      	ldrh	r3, [r7, #6]
     f82:	3301      	adds	r3, #1
     f84:	80fb      	strh	r3, [r7, #6]
     f86:	88fb      	ldrh	r3, [r7, #6]
     f88:	2b01      	cmp	r3, #1
     f8a:	d9ed      	bls.n	f68 <ext_irq_init+0xc>
	}

	return _ext_irq_init(process_ext_irq);
     f8c:	4804      	ldr	r0, [pc, #16]	; (fa0 <ext_irq_init+0x44>)
     f8e:	4b05      	ldr	r3, [pc, #20]	; (fa4 <ext_irq_init+0x48>)
     f90:	4798      	blx	r3
     f92:	4603      	mov	r3, r0
}
     f94:	4618      	mov	r0, r3
     f96:	3708      	adds	r7, #8
     f98:	46bd      	mov	sp, r7
     f9a:	bd80      	pop	{r7, pc}
     f9c:	200004e0 	.word	0x200004e0
     fa0:	00001141 	.word	0x00001141
     fa4:	00002afd 	.word	0x00002afd

00000fa8 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b086      	sub	sp, #24
     fac:	af00      	add	r7, sp, #0
     fae:	6078      	str	r0, [r7, #4]
     fb0:	6039      	str	r1, [r7, #0]
	uint8_t i = 0, j = 0;
     fb2:	2300      	movs	r3, #0
     fb4:	75fb      	strb	r3, [r7, #23]
     fb6:	2300      	movs	r3, #0
     fb8:	75bb      	strb	r3, [r7, #22]
	bool    found = false;
     fba:	2300      	movs	r3, #0
     fbc:	757b      	strb	r3, [r7, #21]

	for (; i < EXT_IRQ_AMOUNT; i++) {
     fbe:	e012      	b.n	fe6 <ext_irq_register+0x3e>
		if (ext_irqs[i].pin == pin) {
     fc0:	7dfb      	ldrb	r3, [r7, #23]
     fc2:	4a4d      	ldr	r2, [pc, #308]	; (10f8 <ext_irq_register+0x150>)
     fc4:	00db      	lsls	r3, r3, #3
     fc6:	4413      	add	r3, r2
     fc8:	685a      	ldr	r2, [r3, #4]
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	429a      	cmp	r2, r3
     fce:	d107      	bne.n	fe0 <ext_irq_register+0x38>
			ext_irqs[i].cb = cb;
     fd0:	7dfb      	ldrb	r3, [r7, #23]
     fd2:	4949      	ldr	r1, [pc, #292]	; (10f8 <ext_irq_register+0x150>)
     fd4:	683a      	ldr	r2, [r7, #0]
     fd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			found          = true;
     fda:	2301      	movs	r3, #1
     fdc:	757b      	strb	r3, [r7, #21]
			break;
     fde:	e005      	b.n	fec <ext_irq_register+0x44>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     fe0:	7dfb      	ldrb	r3, [r7, #23]
     fe2:	3301      	adds	r3, #1
     fe4:	75fb      	strb	r3, [r7, #23]
     fe6:	7dfb      	ldrb	r3, [r7, #23]
     fe8:	2b01      	cmp	r3, #1
     fea:	d9e9      	bls.n	fc0 <ext_irq_register+0x18>
		}
	}

	if (NULL == cb) {
     fec:	683b      	ldr	r3, [r7, #0]
     fee:	2b00      	cmp	r3, #0
     ff0:	d10e      	bne.n	1010 <ext_irq_register+0x68>
		if (!found) {
     ff2:	7d7b      	ldrb	r3, [r7, #21]
     ff4:	f083 0301 	eor.w	r3, r3, #1
     ff8:	b2db      	uxtb	r3, r3
     ffa:	2b00      	cmp	r3, #0
     ffc:	d002      	beq.n	1004 <ext_irq_register+0x5c>
			return ERR_INVALID_ARG;
     ffe:	f06f 030c 	mvn.w	r3, #12
    1002:	e074      	b.n	10ee <ext_irq_register+0x146>
		}
		return _ext_irq_enable(pin, false);
    1004:	2100      	movs	r1, #0
    1006:	6878      	ldr	r0, [r7, #4]
    1008:	4b3c      	ldr	r3, [pc, #240]	; (10fc <ext_irq_register+0x154>)
    100a:	4798      	blx	r3
    100c:	4603      	mov	r3, r0
    100e:	e06e      	b.n	10ee <ext_irq_register+0x146>
	}

	if (!found) {
    1010:	7d7b      	ldrb	r3, [r7, #21]
    1012:	f083 0301 	eor.w	r3, r3, #1
    1016:	b2db      	uxtb	r3, r3
    1018:	2b00      	cmp	r3, #0
    101a:	d05a      	beq.n	10d2 <ext_irq_register+0x12a>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    101c:	2300      	movs	r3, #0
    101e:	75fb      	strb	r3, [r7, #23]
    1020:	e016      	b.n	1050 <ext_irq_register+0xa8>
			if (NULL == ext_irqs[i].cb) {
    1022:	7dfb      	ldrb	r3, [r7, #23]
    1024:	4a34      	ldr	r2, [pc, #208]	; (10f8 <ext_irq_register+0x150>)
    1026:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    102a:	2b00      	cmp	r3, #0
    102c:	d10d      	bne.n	104a <ext_irq_register+0xa2>
				ext_irqs[i].cb  = cb;
    102e:	7dfb      	ldrb	r3, [r7, #23]
    1030:	4931      	ldr	r1, [pc, #196]	; (10f8 <ext_irq_register+0x150>)
    1032:	683a      	ldr	r2, [r7, #0]
    1034:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				ext_irqs[i].pin = pin;
    1038:	7dfb      	ldrb	r3, [r7, #23]
    103a:	4a2f      	ldr	r2, [pc, #188]	; (10f8 <ext_irq_register+0x150>)
    103c:	00db      	lsls	r3, r3, #3
    103e:	4413      	add	r3, r2
    1040:	687a      	ldr	r2, [r7, #4]
    1042:	605a      	str	r2, [r3, #4]
				found           = true;
    1044:	2301      	movs	r3, #1
    1046:	757b      	strb	r3, [r7, #21]
				break;
    1048:	e005      	b.n	1056 <ext_irq_register+0xae>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
    104a:	7dfb      	ldrb	r3, [r7, #23]
    104c:	3301      	adds	r3, #1
    104e:	75fb      	strb	r3, [r7, #23]
    1050:	7dfb      	ldrb	r3, [r7, #23]
    1052:	2b01      	cmp	r3, #1
    1054:	d9e5      	bls.n	1022 <ext_irq_register+0x7a>
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    1056:	e036      	b.n	10c6 <ext_irq_register+0x11e>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
    1058:	7dfb      	ldrb	r3, [r7, #23]
    105a:	4a27      	ldr	r2, [pc, #156]	; (10f8 <ext_irq_register+0x150>)
    105c:	00db      	lsls	r3, r3, #3
    105e:	4413      	add	r3, r2
    1060:	685a      	ldr	r2, [r3, #4]
    1062:	7dbb      	ldrb	r3, [r7, #22]
    1064:	4924      	ldr	r1, [pc, #144]	; (10f8 <ext_irq_register+0x150>)
    1066:	00db      	lsls	r3, r3, #3
    1068:	440b      	add	r3, r1
    106a:	685b      	ldr	r3, [r3, #4]
    106c:	429a      	cmp	r2, r3
    106e:	d227      	bcs.n	10c0 <ext_irq_register+0x118>
    1070:	7dbb      	ldrb	r3, [r7, #22]
    1072:	4a21      	ldr	r2, [pc, #132]	; (10f8 <ext_irq_register+0x150>)
    1074:	00db      	lsls	r3, r3, #3
    1076:	4413      	add	r3, r2
    1078:	685b      	ldr	r3, [r3, #4]
    107a:	f1b3 3fff 	cmp.w	r3, #4294967295
    107e:	d01f      	beq.n	10c0 <ext_irq_register+0x118>
				struct ext_irq tmp = ext_irqs[j];
    1080:	7dbb      	ldrb	r3, [r7, #22]
    1082:	491d      	ldr	r1, [pc, #116]	; (10f8 <ext_irq_register+0x150>)
    1084:	f107 020c 	add.w	r2, r7, #12
    1088:	00db      	lsls	r3, r3, #3
    108a:	440b      	add	r3, r1
    108c:	e893 0003 	ldmia.w	r3, {r0, r1}
    1090:	e882 0003 	stmia.w	r2, {r0, r1}

				ext_irqs[j] = ext_irqs[i];
    1094:	7dbb      	ldrb	r3, [r7, #22]
    1096:	7dfa      	ldrb	r2, [r7, #23]
    1098:	4817      	ldr	r0, [pc, #92]	; (10f8 <ext_irq_register+0x150>)
    109a:	4917      	ldr	r1, [pc, #92]	; (10f8 <ext_irq_register+0x150>)
    109c:	00db      	lsls	r3, r3, #3
    109e:	4403      	add	r3, r0
    10a0:	00d2      	lsls	r2, r2, #3
    10a2:	440a      	add	r2, r1
    10a4:	e892 0003 	ldmia.w	r2, {r0, r1}
    10a8:	e883 0003 	stmia.w	r3, {r0, r1}
				ext_irqs[i] = tmp;
    10ac:	7dfb      	ldrb	r3, [r7, #23]
    10ae:	4a12      	ldr	r2, [pc, #72]	; (10f8 <ext_irq_register+0x150>)
    10b0:	00db      	lsls	r3, r3, #3
    10b2:	4413      	add	r3, r2
    10b4:	f107 020c 	add.w	r2, r7, #12
    10b8:	e892 0003 	ldmia.w	r2, {r0, r1}
    10bc:	e883 0003 	stmia.w	r3, {r0, r1}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
    10c0:	7dbb      	ldrb	r3, [r7, #22]
    10c2:	3301      	adds	r3, #1
    10c4:	75bb      	strb	r3, [r7, #22]
    10c6:	7dbb      	ldrb	r3, [r7, #22]
    10c8:	2b01      	cmp	r3, #1
    10ca:	d802      	bhi.n	10d2 <ext_irq_register+0x12a>
    10cc:	7dfb      	ldrb	r3, [r7, #23]
    10ce:	2b01      	cmp	r3, #1
    10d0:	d9c2      	bls.n	1058 <ext_irq_register+0xb0>
			}
		}
	}

	if (!found) {
    10d2:	7d7b      	ldrb	r3, [r7, #21]
    10d4:	f083 0301 	eor.w	r3, r3, #1
    10d8:	b2db      	uxtb	r3, r3
    10da:	2b00      	cmp	r3, #0
    10dc:	d002      	beq.n	10e4 <ext_irq_register+0x13c>
		return ERR_INVALID_ARG;
    10de:	f06f 030c 	mvn.w	r3, #12
    10e2:	e004      	b.n	10ee <ext_irq_register+0x146>
	}

	return _ext_irq_enable(pin, true);
    10e4:	2101      	movs	r1, #1
    10e6:	6878      	ldr	r0, [r7, #4]
    10e8:	4b04      	ldr	r3, [pc, #16]	; (10fc <ext_irq_register+0x154>)
    10ea:	4798      	blx	r3
    10ec:	4603      	mov	r3, r0
}
    10ee:	4618      	mov	r0, r3
    10f0:	3718      	adds	r7, #24
    10f2:	46bd      	mov	sp, r7
    10f4:	bd80      	pop	{r7, pc}
    10f6:	bf00      	nop
    10f8:	200004e0 	.word	0x200004e0
    10fc:	00002c11 	.word	0x00002c11

00001100 <ext_irq_enable>:

/**
 * \brief Enable external irq
 */
int32_t ext_irq_enable(const uint32_t pin)
{
    1100:	b580      	push	{r7, lr}
    1102:	b082      	sub	sp, #8
    1104:	af00      	add	r7, sp, #0
    1106:	6078      	str	r0, [r7, #4]
	return _ext_irq_enable(pin, true);
    1108:	2101      	movs	r1, #1
    110a:	6878      	ldr	r0, [r7, #4]
    110c:	4b03      	ldr	r3, [pc, #12]	; (111c <ext_irq_enable+0x1c>)
    110e:	4798      	blx	r3
    1110:	4603      	mov	r3, r0
}
    1112:	4618      	mov	r0, r3
    1114:	3708      	adds	r7, #8
    1116:	46bd      	mov	sp, r7
    1118:	bd80      	pop	{r7, pc}
    111a:	bf00      	nop
    111c:	00002c11 	.word	0x00002c11

00001120 <ext_irq_disable>:

/**
 * \brief Disable external irq
 */
int32_t ext_irq_disable(const uint32_t pin)
{
    1120:	b580      	push	{r7, lr}
    1122:	b082      	sub	sp, #8
    1124:	af00      	add	r7, sp, #0
    1126:	6078      	str	r0, [r7, #4]
	return _ext_irq_enable(pin, false);
    1128:	2100      	movs	r1, #0
    112a:	6878      	ldr	r0, [r7, #4]
    112c:	4b03      	ldr	r3, [pc, #12]	; (113c <ext_irq_disable+0x1c>)
    112e:	4798      	blx	r3
    1130:	4603      	mov	r3, r0
}
    1132:	4618      	mov	r0, r3
    1134:	3708      	adds	r7, #8
    1136:	46bd      	mov	sp, r7
    1138:	bd80      	pop	{r7, pc}
    113a:	bf00      	nop
    113c:	00002c11 	.word	0x00002c11

00001140 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
    1140:	b580      	push	{r7, lr}
    1142:	b084      	sub	sp, #16
    1144:	af00      	add	r7, sp, #0
    1146:	6078      	str	r0, [r7, #4]
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    1148:	2300      	movs	r3, #0
    114a:	73fb      	strb	r3, [r7, #15]
    114c:	2302      	movs	r3, #2
    114e:	73bb      	strb	r3, [r7, #14]

	while (upper >= lower) {
    1150:	e02a      	b.n	11a8 <process_ext_irq+0x68>
		middle = (upper + lower) >> 1;
    1152:	7bba      	ldrb	r2, [r7, #14]
    1154:	7bfb      	ldrb	r3, [r7, #15]
    1156:	4413      	add	r3, r2
    1158:	105b      	asrs	r3, r3, #1
    115a:	737b      	strb	r3, [r7, #13]
		if (middle >= EXT_IRQ_AMOUNT) {
    115c:	7b7b      	ldrb	r3, [r7, #13]
    115e:	2b01      	cmp	r3, #1
    1160:	d827      	bhi.n	11b2 <process_ext_irq+0x72>
			return;
		}

		if (ext_irqs[middle].pin == pin) {
    1162:	7b7b      	ldrb	r3, [r7, #13]
    1164:	4a16      	ldr	r2, [pc, #88]	; (11c0 <process_ext_irq+0x80>)
    1166:	00db      	lsls	r3, r3, #3
    1168:	4413      	add	r3, r2
    116a:	685a      	ldr	r2, [r3, #4]
    116c:	687b      	ldr	r3, [r7, #4]
    116e:	429a      	cmp	r2, r3
    1170:	d10b      	bne.n	118a <process_ext_irq+0x4a>
			if (ext_irqs[middle].cb) {
    1172:	7b7b      	ldrb	r3, [r7, #13]
    1174:	4a12      	ldr	r2, [pc, #72]	; (11c0 <process_ext_irq+0x80>)
    1176:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    117a:	2b00      	cmp	r3, #0
    117c:	d01b      	beq.n	11b6 <process_ext_irq+0x76>
				ext_irqs[middle].cb();
    117e:	7b7b      	ldrb	r3, [r7, #13]
    1180:	4a0f      	ldr	r2, [pc, #60]	; (11c0 <process_ext_irq+0x80>)
    1182:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1186:	4798      	blx	r3
			}
			return;
    1188:	e015      	b.n	11b6 <process_ext_irq+0x76>
		}

		if (ext_irqs[middle].pin < pin) {
    118a:	7b7b      	ldrb	r3, [r7, #13]
    118c:	4a0c      	ldr	r2, [pc, #48]	; (11c0 <process_ext_irq+0x80>)
    118e:	00db      	lsls	r3, r3, #3
    1190:	4413      	add	r3, r2
    1192:	685a      	ldr	r2, [r3, #4]
    1194:	687b      	ldr	r3, [r7, #4]
    1196:	429a      	cmp	r2, r3
    1198:	d203      	bcs.n	11a2 <process_ext_irq+0x62>
			lower = middle + 1;
    119a:	7b7b      	ldrb	r3, [r7, #13]
    119c:	3301      	adds	r3, #1
    119e:	73fb      	strb	r3, [r7, #15]
    11a0:	e002      	b.n	11a8 <process_ext_irq+0x68>
		} else {
			upper = middle - 1;
    11a2:	7b7b      	ldrb	r3, [r7, #13]
    11a4:	3b01      	subs	r3, #1
    11a6:	73bb      	strb	r3, [r7, #14]
	while (upper >= lower) {
    11a8:	7bba      	ldrb	r2, [r7, #14]
    11aa:	7bfb      	ldrb	r3, [r7, #15]
    11ac:	429a      	cmp	r2, r3
    11ae:	d2d0      	bcs.n	1152 <process_ext_irq+0x12>
    11b0:	e002      	b.n	11b8 <process_ext_irq+0x78>
			return;
    11b2:	bf00      	nop
    11b4:	e000      	b.n	11b8 <process_ext_irq+0x78>
			return;
    11b6:	bf00      	nop
		}
	}
}
    11b8:	3710      	adds	r7, #16
    11ba:	46bd      	mov	sp, r7
    11bc:	bd80      	pop	{r7, pc}
    11be:	bf00      	nop
    11c0:	200004e0 	.word	0x200004e0

000011c4 <i2c_m_sync_read>:

/**
 * \brief Sync version of I2C I/O read
 */
static int32_t i2c_m_sync_read(struct io_descriptor *io, uint8_t *buf, const uint16_t n)
{
    11c4:	b580      	push	{r7, lr}
    11c6:	b08a      	sub	sp, #40	; 0x28
    11c8:	af00      	add	r7, sp, #0
    11ca:	60f8      	str	r0, [r7, #12]
    11cc:	60b9      	str	r1, [r7, #8]
    11ce:	4613      	mov	r3, r2
    11d0:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    11d2:	68fb      	ldr	r3, [r7, #12]
    11d4:	3b14      	subs	r3, #20
    11d6:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    11d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11da:	8b9b      	ldrh	r3, [r3, #28]
    11dc:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    11de:	88fb      	ldrh	r3, [r7, #6]
    11e0:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
    11e2:	f248 0301 	movw	r3, #32769	; 0x8001
    11e6:	82fb      	strh	r3, [r7, #22]
	msg.buffer = buf;
    11e8:	68bb      	ldr	r3, [r7, #8]
    11ea:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    11ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    11ee:	f107 0214 	add.w	r2, r7, #20
    11f2:	4611      	mov	r1, r2
    11f4:	4618      	mov	r0, r3
    11f6:	4b06      	ldr	r3, [pc, #24]	; (1210 <i2c_m_sync_read+0x4c>)
    11f8:	4798      	blx	r3
    11fa:	6238      	str	r0, [r7, #32]

	if (ret) {
    11fc:	6a3b      	ldr	r3, [r7, #32]
    11fe:	2b00      	cmp	r3, #0
    1200:	d001      	beq.n	1206 <i2c_m_sync_read+0x42>
		return ret;
    1202:	6a3b      	ldr	r3, [r7, #32]
    1204:	e000      	b.n	1208 <i2c_m_sync_read+0x44>
	}

	return n;
    1206:	88fb      	ldrh	r3, [r7, #6]
}
    1208:	4618      	mov	r0, r3
    120a:	3728      	adds	r7, #40	; 0x28
    120c:	46bd      	mov	sp, r7
    120e:	bd80      	pop	{r7, pc}
    1210:	0000481d 	.word	0x0000481d

00001214 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
    1214:	b580      	push	{r7, lr}
    1216:	b08a      	sub	sp, #40	; 0x28
    1218:	af00      	add	r7, sp, #0
    121a:	60f8      	str	r0, [r7, #12]
    121c:	60b9      	str	r1, [r7, #8]
    121e:	4613      	mov	r3, r2
    1220:	80fb      	strh	r3, [r7, #6]
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
    1222:	68fb      	ldr	r3, [r7, #12]
    1224:	3b14      	subs	r3, #20
    1226:	627b      	str	r3, [r7, #36]	; 0x24
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
    1228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    122a:	8b9b      	ldrh	r3, [r3, #28]
    122c:	82bb      	strh	r3, [r7, #20]
	msg.len    = n;
    122e:	88fb      	ldrh	r3, [r7, #6]
    1230:	61bb      	str	r3, [r7, #24]
	msg.flags  = I2C_M_STOP;
    1232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    1236:	82fb      	strh	r3, [r7, #22]
	msg.buffer = (uint8_t *)buf;
    1238:	68bb      	ldr	r3, [r7, #8]
    123a:	61fb      	str	r3, [r7, #28]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
    123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    123e:	f107 0214 	add.w	r2, r7, #20
    1242:	4611      	mov	r1, r2
    1244:	4618      	mov	r0, r3
    1246:	4b06      	ldr	r3, [pc, #24]	; (1260 <i2c_m_sync_write+0x4c>)
    1248:	4798      	blx	r3
    124a:	6238      	str	r0, [r7, #32]

	if (ret) {
    124c:	6a3b      	ldr	r3, [r7, #32]
    124e:	2b00      	cmp	r3, #0
    1250:	d001      	beq.n	1256 <i2c_m_sync_write+0x42>
		return ret;
    1252:	6a3b      	ldr	r3, [r7, #32]
    1254:	e000      	b.n	1258 <i2c_m_sync_write+0x44>
	}

	return n;
    1256:	88fb      	ldrh	r3, [r7, #6]
}
    1258:	4618      	mov	r0, r3
    125a:	3728      	adds	r7, #40	; 0x28
    125c:	46bd      	mov	sp, r7
    125e:	bd80      	pop	{r7, pc}
    1260:	0000481d 	.word	0x0000481d

00001264 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
    1264:	b580      	push	{r7, lr}
    1266:	b084      	sub	sp, #16
    1268:	af00      	add	r7, sp, #0
    126a:	6078      	str	r0, [r7, #4]
    126c:	6039      	str	r1, [r7, #0]
	int32_t init_status;
	ASSERT(i2c);
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	2b00      	cmp	r3, #0
    1272:	bf14      	ite	ne
    1274:	2301      	movne	r3, #1
    1276:	2300      	moveq	r3, #0
    1278:	b2db      	uxtb	r3, r3
    127a:	225e      	movs	r2, #94	; 0x5e
    127c:	490c      	ldr	r1, [pc, #48]	; (12b0 <i2c_m_sync_init+0x4c>)
    127e:	4618      	mov	r0, r3
    1280:	4b0c      	ldr	r3, [pc, #48]	; (12b4 <i2c_m_sync_init+0x50>)
    1282:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	6839      	ldr	r1, [r7, #0]
    1288:	4618      	mov	r0, r3
    128a:	4b0b      	ldr	r3, [pc, #44]	; (12b8 <i2c_m_sync_init+0x54>)
    128c:	4798      	blx	r3
    128e:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    1290:	68fb      	ldr	r3, [r7, #12]
    1292:	2b00      	cmp	r3, #0
    1294:	d001      	beq.n	129a <i2c_m_sync_init+0x36>
		return init_status;
    1296:	68fb      	ldr	r3, [r7, #12]
    1298:	e006      	b.n	12a8 <i2c_m_sync_init+0x44>
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
    129a:	687b      	ldr	r3, [r7, #4]
    129c:	4a07      	ldr	r2, [pc, #28]	; (12bc <i2c_m_sync_init+0x58>)
    129e:	619a      	str	r2, [r3, #24]
	i2c->io.write = i2c_m_sync_write;
    12a0:	687b      	ldr	r3, [r7, #4]
    12a2:	4a07      	ldr	r2, [pc, #28]	; (12c0 <i2c_m_sync_init+0x5c>)
    12a4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    12a6:	2300      	movs	r3, #0
}
    12a8:	4618      	mov	r0, r3
    12aa:	3710      	adds	r7, #16
    12ac:	46bd      	mov	sp, r7
    12ae:	bd80      	pop	{r7, pc}
    12b0:	00005c4c 	.word	0x00005c4c
    12b4:	00001869 	.word	0x00001869
    12b8:	00004619 	.word	0x00004619
    12bc:	000011c5 	.word	0x000011c5
    12c0:	00001215 	.word	0x00001215

000012c4 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
    12c4:	b580      	push	{r7, lr}
    12c6:	b082      	sub	sp, #8
    12c8:	af00      	add	r7, sp, #0
    12ca:	6078      	str	r0, [r7, #4]
	return _i2c_m_sync_enable(&i2c->device);
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	4618      	mov	r0, r3
    12d0:	4b03      	ldr	r3, [pc, #12]	; (12e0 <i2c_m_sync_enable+0x1c>)
    12d2:	4798      	blx	r3
    12d4:	4603      	mov	r3, r0
}
    12d6:	4618      	mov	r0, r3
    12d8:	3708      	adds	r7, #8
    12da:	46bd      	mov	sp, r7
    12dc:	bd80      	pop	{r7, pc}
    12de:	bf00      	nop
    12e0:	00004661 	.word	0x00004661

000012e4 <i2c_m_sync_set_slaveaddr>:

/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
    12e4:	b480      	push	{r7}
    12e6:	b085      	sub	sp, #20
    12e8:	af00      	add	r7, sp, #0
    12ea:	60f8      	str	r0, [r7, #12]
    12ec:	460b      	mov	r3, r1
    12ee:	607a      	str	r2, [r7, #4]
    12f0:	817b      	strh	r3, [r7, #10]
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
    12f2:	897b      	ldrh	r3, [r7, #10]
    12f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    12f8:	b21a      	sxth	r2, r3
    12fa:	687b      	ldr	r3, [r7, #4]
    12fc:	b21b      	sxth	r3, r3
    12fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1302:	b21b      	sxth	r3, r3
    1304:	4313      	orrs	r3, r2
    1306:	b21b      	sxth	r3, r3
    1308:	b29a      	uxth	r2, r3
    130a:	68fb      	ldr	r3, [r7, #12]
    130c:	839a      	strh	r2, [r3, #28]
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	8b9b      	ldrh	r3, [r3, #28]
}
    1312:	4618      	mov	r0, r3
    1314:	3714      	adds	r7, #20
    1316:	46bd      	mov	sp, r7
    1318:	f85d 7b04 	ldr.w	r7, [sp], #4
    131c:	4770      	bx	lr

0000131e <i2c_m_sync_get_io_descriptor>:

/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
    131e:	b480      	push	{r7}
    1320:	b083      	sub	sp, #12
    1322:	af00      	add	r7, sp, #0
    1324:	6078      	str	r0, [r7, #4]
    1326:	6039      	str	r1, [r7, #0]
	*io = &i2c->io;
    1328:	687b      	ldr	r3, [r7, #4]
    132a:	f103 0214 	add.w	r2, r3, #20
    132e:	683b      	ldr	r3, [r7, #0]
    1330:	601a      	str	r2, [r3, #0]
	return ERR_NONE;
    1332:	2300      	movs	r3, #0
}
    1334:	4618      	mov	r0, r3
    1336:	370c      	adds	r7, #12
    1338:	46bd      	mov	sp, r7
    133a:	f85d 7b04 	ldr.w	r7, [sp], #4
    133e:	4770      	bx	lr

00001340 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1340:	b580      	push	{r7, lr}
    1342:	b084      	sub	sp, #16
    1344:	af00      	add	r7, sp, #0
    1346:	60f8      	str	r0, [r7, #12]
    1348:	60b9      	str	r1, [r7, #8]
    134a:	4613      	mov	r3, r2
    134c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	2b00      	cmp	r3, #0
    1352:	d004      	beq.n	135e <io_write+0x1e>
    1354:	68bb      	ldr	r3, [r7, #8]
    1356:	2b00      	cmp	r3, #0
    1358:	d001      	beq.n	135e <io_write+0x1e>
    135a:	2301      	movs	r3, #1
    135c:	e000      	b.n	1360 <io_write+0x20>
    135e:	2300      	movs	r3, #0
    1360:	f003 0301 	and.w	r3, r3, #1
    1364:	b2db      	uxtb	r3, r3
    1366:	2234      	movs	r2, #52	; 0x34
    1368:	4907      	ldr	r1, [pc, #28]	; (1388 <io_write+0x48>)
    136a:	4618      	mov	r0, r3
    136c:	4b07      	ldr	r3, [pc, #28]	; (138c <io_write+0x4c>)
    136e:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
    1370:	68fb      	ldr	r3, [r7, #12]
    1372:	681b      	ldr	r3, [r3, #0]
    1374:	88fa      	ldrh	r2, [r7, #6]
    1376:	68b9      	ldr	r1, [r7, #8]
    1378:	68f8      	ldr	r0, [r7, #12]
    137a:	4798      	blx	r3
    137c:	4603      	mov	r3, r0
}
    137e:	4618      	mov	r0, r3
    1380:	3710      	adds	r7, #16
    1382:	46bd      	mov	sp, r7
    1384:	bd80      	pop	{r7, pc}
    1386:	bf00      	nop
    1388:	00005c68 	.word	0x00005c68
    138c:	00001869 	.word	0x00001869

00001390 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    1390:	b580      	push	{r7, lr}
    1392:	b084      	sub	sp, #16
    1394:	af00      	add	r7, sp, #0
    1396:	60f8      	str	r0, [r7, #12]
    1398:	60b9      	str	r1, [r7, #8]
    139a:	4613      	mov	r3, r2
    139c:	80fb      	strh	r3, [r7, #6]
	ASSERT(io_descr && buf);
    139e:	68fb      	ldr	r3, [r7, #12]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d004      	beq.n	13ae <io_read+0x1e>
    13a4:	68bb      	ldr	r3, [r7, #8]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d001      	beq.n	13ae <io_read+0x1e>
    13aa:	2301      	movs	r3, #1
    13ac:	e000      	b.n	13b0 <io_read+0x20>
    13ae:	2300      	movs	r3, #0
    13b0:	f003 0301 	and.w	r3, r3, #1
    13b4:	b2db      	uxtb	r3, r3
    13b6:	223d      	movs	r2, #61	; 0x3d
    13b8:	4907      	ldr	r1, [pc, #28]	; (13d8 <io_read+0x48>)
    13ba:	4618      	mov	r0, r3
    13bc:	4b07      	ldr	r3, [pc, #28]	; (13dc <io_read+0x4c>)
    13be:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
    13c0:	68fb      	ldr	r3, [r7, #12]
    13c2:	685b      	ldr	r3, [r3, #4]
    13c4:	88fa      	ldrh	r2, [r7, #6]
    13c6:	68b9      	ldr	r1, [r7, #8]
    13c8:	68f8      	ldr	r0, [r7, #12]
    13ca:	4798      	blx	r3
    13cc:	4603      	mov	r3, r0
}
    13ce:	4618      	mov	r0, r3
    13d0:	3710      	adds	r7, #16
    13d2:	46bd      	mov	sp, r7
    13d4:	bd80      	pop	{r7, pc}
    13d6:	bf00      	nop
    13d8:	00005c68 	.word	0x00005c68
    13dc:	00001869 	.word	0x00001869

000013e0 <pwm_init>:

/**
 * \brief Initialize pwm
 */
int32_t pwm_init(struct pwm_descriptor *const descr, void *const hw, struct _pwm_hpl_interface *const func)
{
    13e0:	b580      	push	{r7, lr}
    13e2:	b084      	sub	sp, #16
    13e4:	af00      	add	r7, sp, #0
    13e6:	60f8      	str	r0, [r7, #12]
    13e8:	60b9      	str	r1, [r7, #8]
    13ea:	607a      	str	r2, [r7, #4]
	ASSERT(descr && hw);
    13ec:	68fb      	ldr	r3, [r7, #12]
    13ee:	2b00      	cmp	r3, #0
    13f0:	d004      	beq.n	13fc <pwm_init+0x1c>
    13f2:	68bb      	ldr	r3, [r7, #8]
    13f4:	2b00      	cmp	r3, #0
    13f6:	d001      	beq.n	13fc <pwm_init+0x1c>
    13f8:	2301      	movs	r3, #1
    13fa:	e000      	b.n	13fe <pwm_init+0x1e>
    13fc:	2300      	movs	r3, #0
    13fe:	f003 0301 	and.w	r3, r3, #1
    1402:	b2db      	uxtb	r3, r3
    1404:	2233      	movs	r2, #51	; 0x33
    1406:	490a      	ldr	r1, [pc, #40]	; (1430 <pwm_init+0x50>)
    1408:	4618      	mov	r0, r3
    140a:	4b0a      	ldr	r3, [pc, #40]	; (1434 <pwm_init+0x54>)
    140c:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
    140e:	68fb      	ldr	r3, [r7, #12]
    1410:	68b9      	ldr	r1, [r7, #8]
    1412:	4618      	mov	r0, r3
    1414:	4b08      	ldr	r3, [pc, #32]	; (1438 <pwm_init+0x58>)
    1416:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
    1418:	68fb      	ldr	r3, [r7, #12]
    141a:	4a08      	ldr	r2, [pc, #32]	; (143c <pwm_init+0x5c>)
    141c:	601a      	str	r2, [r3, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	4a07      	ldr	r2, [pc, #28]	; (1440 <pwm_init+0x60>)
    1422:	605a      	str	r2, [r3, #4]
	return ERR_NONE;
    1424:	2300      	movs	r3, #0
}
    1426:	4618      	mov	r0, r3
    1428:	3710      	adds	r7, #16
    142a:	46bd      	mov	sp, r7
    142c:	bd80      	pop	{r7, pc}
    142e:	bf00      	nop
    1430:	00005c7c 	.word	0x00005c7c
    1434:	00001869 	.word	0x00001869
    1438:	00005009 	.word	0x00005009
    143c:	000014dd 	.word	0x000014dd
    1440:	00001501 	.word	0x00001501

00001444 <pwm_enable>:

/**
 * \brief Start pwm
 */
int32_t pwm_enable(struct pwm_descriptor *const descr)
{
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    144c:	687b      	ldr	r3, [r7, #4]
    144e:	2b00      	cmp	r3, #0
    1450:	bf14      	ite	ne
    1452:	2301      	movne	r3, #1
    1454:	2300      	moveq	r3, #0
    1456:	b2db      	uxtb	r3, r3
    1458:	224a      	movs	r2, #74	; 0x4a
    145a:	490b      	ldr	r1, [pc, #44]	; (1488 <pwm_enable+0x44>)
    145c:	4618      	mov	r0, r3
    145e:	4b0b      	ldr	r3, [pc, #44]	; (148c <pwm_enable+0x48>)
    1460:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
    1462:	687b      	ldr	r3, [r7, #4]
    1464:	4618      	mov	r0, r3
    1466:	4b0a      	ldr	r3, [pc, #40]	; (1490 <pwm_enable+0x4c>)
    1468:	4798      	blx	r3
    146a:	4603      	mov	r3, r0
    146c:	2b00      	cmp	r3, #0
    146e:	d002      	beq.n	1476 <pwm_enable+0x32>
		return ERR_DENIED;
    1470:	f06f 0310 	mvn.w	r3, #16
    1474:	e004      	b.n	1480 <pwm_enable+0x3c>
	}
	_pwm_enable(&descr->device);
    1476:	687b      	ldr	r3, [r7, #4]
    1478:	4618      	mov	r0, r3
    147a:	4b06      	ldr	r3, [pc, #24]	; (1494 <pwm_enable+0x50>)
    147c:	4798      	blx	r3

	return ERR_NONE;
    147e:	2300      	movs	r3, #0
}
    1480:	4618      	mov	r0, r3
    1482:	3708      	adds	r7, #8
    1484:	46bd      	mov	sp, r7
    1486:	bd80      	pop	{r7, pc}
    1488:	00005c7c 	.word	0x00005c7c
    148c:	00001869 	.word	0x00001869
    1490:	00005281 	.word	0x00005281
    1494:	00005215 	.word	0x00005215

00001498 <pwm_set_parameters>:

/**
 * \brief Change PWM parameter
 */
int32_t pwm_set_parameters(struct pwm_descriptor *const descr, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    1498:	b580      	push	{r7, lr}
    149a:	b084      	sub	sp, #16
    149c:	af00      	add	r7, sp, #0
    149e:	60f8      	str	r0, [r7, #12]
    14a0:	60b9      	str	r1, [r7, #8]
    14a2:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	2b00      	cmp	r3, #0
    14a8:	bf14      	ite	ne
    14aa:	2301      	movne	r3, #1
    14ac:	2300      	moveq	r3, #0
    14ae:	b2db      	uxtb	r3, r3
    14b0:	227c      	movs	r2, #124	; 0x7c
    14b2:	4907      	ldr	r1, [pc, #28]	; (14d0 <pwm_set_parameters+0x38>)
    14b4:	4618      	mov	r0, r3
    14b6:	4b07      	ldr	r3, [pc, #28]	; (14d4 <pwm_set_parameters+0x3c>)
    14b8:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	687a      	ldr	r2, [r7, #4]
    14be:	68b9      	ldr	r1, [r7, #8]
    14c0:	4618      	mov	r0, r3
    14c2:	4b05      	ldr	r3, [pc, #20]	; (14d8 <pwm_set_parameters+0x40>)
    14c4:	4798      	blx	r3
	return ERR_NONE;
    14c6:	2300      	movs	r3, #0
}
    14c8:	4618      	mov	r0, r3
    14ca:	3710      	adds	r7, #16
    14cc:	46bd      	mov	sp, r7
    14ce:	bd80      	pop	{r7, pc}
    14d0:	00005c7c 	.word	0x00005c7c
    14d4:	00001869 	.word	0x00001869
    14d8:	00005235 	.word	0x00005235

000014dc <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
    14dc:	b580      	push	{r7, lr}
    14de:	b084      	sub	sp, #16
    14e0:	af00      	add	r7, sp, #0
    14e2:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    14e4:	687b      	ldr	r3, [r7, #4]
    14e6:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.period) {
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	695b      	ldr	r3, [r3, #20]
    14ec:	2b00      	cmp	r3, #0
    14ee:	d003      	beq.n	14f8 <pwm_period_expired+0x1c>
		descr->pwm_cb.period(descr);
    14f0:	68fb      	ldr	r3, [r7, #12]
    14f2:	695b      	ldr	r3, [r3, #20]
    14f4:	68f8      	ldr	r0, [r7, #12]
    14f6:	4798      	blx	r3
	}
}
    14f8:	bf00      	nop
    14fa:	3710      	adds	r7, #16
    14fc:	46bd      	mov	sp, r7
    14fe:	bd80      	pop	{r7, pc}

00001500 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	60fb      	str	r3, [r7, #12]

	if (descr->pwm_cb.error) {
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	699b      	ldr	r3, [r3, #24]
    1510:	2b00      	cmp	r3, #0
    1512:	d003      	beq.n	151c <pwm_detect_fault+0x1c>
		descr->pwm_cb.error(descr);
    1514:	68fb      	ldr	r3, [r7, #12]
    1516:	699b      	ldr	r3, [r3, #24]
    1518:	68f8      	ldr	r0, [r7, #12]
    151a:	4798      	blx	r3
	}
}
    151c:	bf00      	nop
    151e:	3710      	adds	r7, #16
    1520:	46bd      	mov	sp, r7
    1522:	bd80      	pop	{r7, pc}

00001524 <usart_async_init>:
/**
 * \brief Initialize usart interface
 */
int32_t usart_async_init(struct usart_async_descriptor *const descr, void *const hw, uint8_t *rx_buffer,
                         uint16_t rx_buffer_length, void *const func)
{
    1524:	b580      	push	{r7, lr}
    1526:	b086      	sub	sp, #24
    1528:	af00      	add	r7, sp, #0
    152a:	60f8      	str	r0, [r7, #12]
    152c:	60b9      	str	r1, [r7, #8]
    152e:	607a      	str	r2, [r7, #4]
    1530:	807b      	strh	r3, [r7, #2]
	int32_t init_status;
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
    1532:	68fb      	ldr	r3, [r7, #12]
    1534:	2b00      	cmp	r3, #0
    1536:	d00a      	beq.n	154e <usart_async_init+0x2a>
    1538:	68bb      	ldr	r3, [r7, #8]
    153a:	2b00      	cmp	r3, #0
    153c:	d007      	beq.n	154e <usart_async_init+0x2a>
    153e:	687b      	ldr	r3, [r7, #4]
    1540:	2b00      	cmp	r3, #0
    1542:	d004      	beq.n	154e <usart_async_init+0x2a>
    1544:	887b      	ldrh	r3, [r7, #2]
    1546:	2b00      	cmp	r3, #0
    1548:	d001      	beq.n	154e <usart_async_init+0x2a>
    154a:	2301      	movs	r3, #1
    154c:	e000      	b.n	1550 <usart_async_init+0x2c>
    154e:	2300      	movs	r3, #0
    1550:	f003 0301 	and.w	r3, r3, #1
    1554:	b2db      	uxtb	r3, r3
    1556:	223a      	movs	r2, #58	; 0x3a
    1558:	4919      	ldr	r1, [pc, #100]	; (15c0 <usart_async_init+0x9c>)
    155a:	4618      	mov	r0, r3
    155c:	4b19      	ldr	r3, [pc, #100]	; (15c4 <usart_async_init+0xa0>)
    155e:	4798      	blx	r3

	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
    1560:	68fb      	ldr	r3, [r7, #12]
    1562:	3334      	adds	r3, #52	; 0x34
    1564:	887a      	ldrh	r2, [r7, #2]
    1566:	6879      	ldr	r1, [r7, #4]
    1568:	4618      	mov	r0, r3
    156a:	4b17      	ldr	r3, [pc, #92]	; (15c8 <usart_async_init+0xa4>)
    156c:	4798      	blx	r3
    156e:	4603      	mov	r3, r0
    1570:	2b00      	cmp	r3, #0
    1572:	d002      	beq.n	157a <usart_async_init+0x56>
		return ERR_INVALID_ARG;
    1574:	f06f 030c 	mvn.w	r3, #12
    1578:	e01e      	b.n	15b8 <usart_async_init+0x94>
	}
	init_status = _usart_async_init(&descr->device, hw);
    157a:	68fb      	ldr	r3, [r7, #12]
    157c:	3308      	adds	r3, #8
    157e:	68b9      	ldr	r1, [r7, #8]
    1580:	4618      	mov	r0, r3
    1582:	4b12      	ldr	r3, [pc, #72]	; (15cc <usart_async_init+0xa8>)
    1584:	4798      	blx	r3
    1586:	6178      	str	r0, [r7, #20]
	if (init_status) {
    1588:	697b      	ldr	r3, [r7, #20]
    158a:	2b00      	cmp	r3, #0
    158c:	d001      	beq.n	1592 <usart_async_init+0x6e>
		return init_status;
    158e:	697b      	ldr	r3, [r7, #20]
    1590:	e012      	b.n	15b8 <usart_async_init+0x94>
	}

	descr->io.read  = usart_async_read;
    1592:	68fb      	ldr	r3, [r7, #12]
    1594:	4a0e      	ldr	r2, [pc, #56]	; (15d0 <usart_async_init+0xac>)
    1596:	605a      	str	r2, [r3, #4]
	descr->io.write = usart_async_write;
    1598:	68fb      	ldr	r3, [r7, #12]
    159a:	4a0e      	ldr	r2, [pc, #56]	; (15d4 <usart_async_init+0xb0>)
    159c:	601a      	str	r2, [r3, #0]

	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	4a0d      	ldr	r2, [pc, #52]	; (15d8 <usart_async_init+0xb4>)
    15a2:	609a      	str	r2, [r3, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
    15a4:	68fb      	ldr	r3, [r7, #12]
    15a6:	4a0d      	ldr	r2, [pc, #52]	; (15dc <usart_async_init+0xb8>)
    15a8:	60da      	str	r2, [r3, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	4a0c      	ldr	r2, [pc, #48]	; (15e0 <usart_async_init+0xbc>)
    15ae:	611a      	str	r2, [r3, #16]
	descr->device.usart_cb.error_cb     = usart_error;
    15b0:	68fb      	ldr	r3, [r7, #12]
    15b2:	4a0c      	ldr	r2, [pc, #48]	; (15e4 <usart_async_init+0xc0>)
    15b4:	615a      	str	r2, [r3, #20]

	return ERR_NONE;
    15b6:	2300      	movs	r3, #0
}
    15b8:	4618      	mov	r0, r3
    15ba:	3718      	adds	r7, #24
    15bc:	46bd      	mov	sp, r7
    15be:	bd80      	pop	{r7, pc}
    15c0:	00005c94 	.word	0x00005c94
    15c4:	00001869 	.word	0x00001869
    15c8:	00001891 	.word	0x00001891
    15cc:	00003e41 	.word	0x00003e41
    15d0:	000016b9 	.word	0x000016b9
    15d4:	00001629 	.word	0x00001629
    15d8:	00001769 	.word	0x00001769
    15dc:	00001801 	.word	0x00001801
    15e0:	000017d5 	.word	0x000017d5
    15e4:	0000183d 	.word	0x0000183d

000015e8 <usart_async_enable>:

/**
 * \brief Enable usart interface
 */
int32_t usart_async_enable(struct usart_async_descriptor *const descr)
{
    15e8:	b580      	push	{r7, lr}
    15ea:	b082      	sub	sp, #8
    15ec:	af00      	add	r7, sp, #0
    15ee:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    15f0:	687b      	ldr	r3, [r7, #4]
    15f2:	2b00      	cmp	r3, #0
    15f4:	bf14      	ite	ne
    15f6:	2301      	movne	r3, #1
    15f8:	2300      	moveq	r3, #0
    15fa:	b2db      	uxtb	r3, r3
    15fc:	2261      	movs	r2, #97	; 0x61
    15fe:	4907      	ldr	r1, [pc, #28]	; (161c <usart_async_enable+0x34>)
    1600:	4618      	mov	r0, r3
    1602:	4b07      	ldr	r3, [pc, #28]	; (1620 <usart_async_enable+0x38>)
    1604:	4798      	blx	r3
	_usart_async_enable(&descr->device);
    1606:	687b      	ldr	r3, [r7, #4]
    1608:	3308      	adds	r3, #8
    160a:	4618      	mov	r0, r3
    160c:	4b05      	ldr	r3, [pc, #20]	; (1624 <usart_async_enable+0x3c>)
    160e:	4798      	blx	r3

	return ERR_NONE;
    1610:	2300      	movs	r3, #0
}
    1612:	4618      	mov	r0, r3
    1614:	3708      	adds	r7, #8
    1616:	46bd      	mov	sp, r7
    1618:	bd80      	pop	{r7, pc}
    161a:	bf00      	nop
    161c:	00005c94 	.word	0x00005c94
    1620:	00001869 	.word	0x00001869
    1624:	00003eed 	.word	0x00003eed

00001628 <usart_async_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_async_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
    1628:	b580      	push	{r7, lr}
    162a:	b086      	sub	sp, #24
    162c:	af00      	add	r7, sp, #0
    162e:	60f8      	str	r0, [r7, #12]
    1630:	60b9      	str	r1, [r7, #8]
    1632:	4613      	mov	r3, r2
    1634:	80fb      	strh	r3, [r7, #6]
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	617b      	str	r3, [r7, #20]

	ASSERT(descr && buf && length);
    163a:	697b      	ldr	r3, [r7, #20]
    163c:	2b00      	cmp	r3, #0
    163e:	d007      	beq.n	1650 <usart_async_write+0x28>
    1640:	68bb      	ldr	r3, [r7, #8]
    1642:	2b00      	cmp	r3, #0
    1644:	d004      	beq.n	1650 <usart_async_write+0x28>
    1646:	88fb      	ldrh	r3, [r7, #6]
    1648:	2b00      	cmp	r3, #0
    164a:	d001      	beq.n	1650 <usart_async_write+0x28>
    164c:	2301      	movs	r3, #1
    164e:	e000      	b.n	1652 <usart_async_write+0x2a>
    1650:	2300      	movs	r3, #0
    1652:	f003 0301 	and.w	r3, r3, #1
    1656:	b2db      	uxtb	r3, r3
    1658:	f240 123b 	movw	r2, #315	; 0x13b
    165c:	4913      	ldr	r1, [pc, #76]	; (16ac <usart_async_write+0x84>)
    165e:	4618      	mov	r0, r3
    1660:	4b13      	ldr	r3, [pc, #76]	; (16b0 <usart_async_write+0x88>)
    1662:	4798      	blx	r3

	if (descr->tx_por != descr->tx_buffer_length) {
    1664:	697b      	ldr	r3, [r7, #20]
    1666:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    166a:	697b      	ldr	r3, [r7, #20]
    166c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1670:	429a      	cmp	r2, r3
    1672:	d002      	beq.n	167a <usart_async_write+0x52>
		return ERR_NO_RESOURCE;
    1674:	f06f 031b 	mvn.w	r3, #27
    1678:	e013      	b.n	16a2 <usart_async_write+0x7a>
	}
	descr->tx_buffer        = (uint8_t *)buf;
    167a:	697b      	ldr	r3, [r7, #20]
    167c:	68ba      	ldr	r2, [r7, #8]
    167e:	649a      	str	r2, [r3, #72]	; 0x48
	descr->tx_buffer_length = length;
    1680:	697b      	ldr	r3, [r7, #20]
    1682:	88fa      	ldrh	r2, [r7, #6]
    1684:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	descr->tx_por           = 0;
    1688:	697b      	ldr	r3, [r7, #20]
    168a:	2200      	movs	r2, #0
    168c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
    1690:	697b      	ldr	r3, [r7, #20]
    1692:	2201      	movs	r2, #1
    1694:	631a      	str	r2, [r3, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
    1696:	697b      	ldr	r3, [r7, #20]
    1698:	3308      	adds	r3, #8
    169a:	4618      	mov	r0, r3
    169c:	4b05      	ldr	r3, [pc, #20]	; (16b4 <usart_async_write+0x8c>)
    169e:	4798      	blx	r3

	return (int32_t)length;
    16a0:	88fb      	ldrh	r3, [r7, #6]
}
    16a2:	4618      	mov	r0, r3
    16a4:	3718      	adds	r7, #24
    16a6:	46bd      	mov	sp, r7
    16a8:	bd80      	pop	{r7, pc}
    16aa:	bf00      	nop
    16ac:	00005c94 	.word	0x00005c94
    16b0:	00001869 	.word	0x00001869
    16b4:	00003f55 	.word	0x00003f55

000016b8 <usart_async_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_async_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
    16b8:	b580      	push	{r7, lr}
    16ba:	b088      	sub	sp, #32
    16bc:	af00      	add	r7, sp, #0
    16be:	60f8      	str	r0, [r7, #12]
    16c0:	60b9      	str	r1, [r7, #8]
    16c2:	4613      	mov	r3, r2
    16c4:	80fb      	strh	r3, [r7, #6]
	uint16_t                       was_read = 0;
    16c6:	2300      	movs	r3, #0
    16c8:	83fb      	strh	r3, [r7, #30]
	uint32_t                       num;
	struct usart_async_descriptor *descr = CONTAINER_OF(io_descr, struct usart_async_descriptor, io);
    16ca:	68fb      	ldr	r3, [r7, #12]
    16cc:	61bb      	str	r3, [r7, #24]

	ASSERT(descr && buf && length);
    16ce:	69bb      	ldr	r3, [r7, #24]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d007      	beq.n	16e4 <usart_async_read+0x2c>
    16d4:	68bb      	ldr	r3, [r7, #8]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d004      	beq.n	16e4 <usart_async_read+0x2c>
    16da:	88fb      	ldrh	r3, [r7, #6]
    16dc:	2b00      	cmp	r3, #0
    16de:	d001      	beq.n	16e4 <usart_async_read+0x2c>
    16e0:	2301      	movs	r3, #1
    16e2:	e000      	b.n	16e6 <usart_async_read+0x2e>
    16e4:	2300      	movs	r3, #0
    16e6:	f003 0301 	and.w	r3, r3, #1
    16ea:	b2db      	uxtb	r3, r3
    16ec:	f44f 72ac 	mov.w	r2, #344	; 0x158
    16f0:	4917      	ldr	r1, [pc, #92]	; (1750 <usart_async_read+0x98>)
    16f2:	4618      	mov	r0, r3
    16f4:	4b17      	ldr	r3, [pc, #92]	; (1754 <usart_async_read+0x9c>)
    16f6:	4798      	blx	r3

	CRITICAL_SECTION_ENTER()
    16f8:	f107 0310 	add.w	r3, r7, #16
    16fc:	4618      	mov	r0, r3
    16fe:	4b16      	ldr	r3, [pc, #88]	; (1758 <usart_async_read+0xa0>)
    1700:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
    1702:	69bb      	ldr	r3, [r7, #24]
    1704:	3334      	adds	r3, #52	; 0x34
    1706:	4618      	mov	r0, r3
    1708:	4b14      	ldr	r3, [pc, #80]	; (175c <usart_async_read+0xa4>)
    170a:	4798      	blx	r3
    170c:	6178      	str	r0, [r7, #20]
	CRITICAL_SECTION_LEAVE()
    170e:	f107 0310 	add.w	r3, r7, #16
    1712:	4618      	mov	r0, r3
    1714:	4b12      	ldr	r3, [pc, #72]	; (1760 <usart_async_read+0xa8>)
    1716:	4798      	blx	r3

	while ((was_read < num) && (was_read < length)) {
    1718:	e00c      	b.n	1734 <usart_async_read+0x7c>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
    171a:	69bb      	ldr	r3, [r7, #24]
    171c:	f103 0234 	add.w	r2, r3, #52	; 0x34
    1720:	8bfb      	ldrh	r3, [r7, #30]
    1722:	1c59      	adds	r1, r3, #1
    1724:	83f9      	strh	r1, [r7, #30]
    1726:	4619      	mov	r1, r3
    1728:	68bb      	ldr	r3, [r7, #8]
    172a:	440b      	add	r3, r1
    172c:	4619      	mov	r1, r3
    172e:	4610      	mov	r0, r2
    1730:	4b0c      	ldr	r3, [pc, #48]	; (1764 <usart_async_read+0xac>)
    1732:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
    1734:	8bfa      	ldrh	r2, [r7, #30]
    1736:	697b      	ldr	r3, [r7, #20]
    1738:	429a      	cmp	r2, r3
    173a:	d203      	bcs.n	1744 <usart_async_read+0x8c>
    173c:	8bfa      	ldrh	r2, [r7, #30]
    173e:	88fb      	ldrh	r3, [r7, #6]
    1740:	429a      	cmp	r2, r3
    1742:	d3ea      	bcc.n	171a <usart_async_read+0x62>
	}

	return (int32_t)was_read;
    1744:	8bfb      	ldrh	r3, [r7, #30]
}
    1746:	4618      	mov	r0, r3
    1748:	3720      	adds	r7, #32
    174a:	46bd      	mov	sp, r7
    174c:	bd80      	pop	{r7, pc}
    174e:	bf00      	nop
    1750:	00005c94 	.word	0x00005c94
    1754:	00001869 	.word	0x00001869
    1758:	00000ded 	.word	0x00000ded
    175c:	000019e9 	.word	0x000019e9
    1760:	00000e13 	.word	0x00000e13
    1764:	00001905 	.word	0x00001905

00001768 <usart_process_byte_sent>:
 * \brief Process "byte is sent" interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_process_byte_sent(struct _usart_async_device *device)
{
    1768:	b590      	push	{r4, r7, lr}
    176a:	b085      	sub	sp, #20
    176c:	af00      	add	r7, sp, #0
    176e:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1770:	687b      	ldr	r3, [r7, #4]
    1772:	3b08      	subs	r3, #8
    1774:	60fb      	str	r3, [r7, #12]
	if (descr->tx_por != descr->tx_buffer_length) {
    1776:	68fb      	ldr	r3, [r7, #12]
    1778:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    177c:	68fb      	ldr	r3, [r7, #12]
    177e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
    1782:	429a      	cmp	r2, r3
    1784:	d017      	beq.n	17b6 <usart_process_byte_sent+0x4e>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
    1786:	68fb      	ldr	r3, [r7, #12]
    1788:	f103 0008 	add.w	r0, r3, #8
    178c:	68fb      	ldr	r3, [r7, #12]
    178e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    1796:	1c59      	adds	r1, r3, #1
    1798:	b28c      	uxth	r4, r1
    179a:	68f9      	ldr	r1, [r7, #12]
    179c:	f8a1 4044 	strh.w	r4, [r1, #68]	; 0x44
    17a0:	4413      	add	r3, r2
    17a2:	781b      	ldrb	r3, [r3, #0]
    17a4:	4619      	mov	r1, r3
    17a6:	4b08      	ldr	r3, [pc, #32]	; (17c8 <usart_process_byte_sent+0x60>)
    17a8:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
    17aa:	68fb      	ldr	r3, [r7, #12]
    17ac:	3308      	adds	r3, #8
    17ae:	4618      	mov	r0, r3
    17b0:	4b06      	ldr	r3, [pc, #24]	; (17cc <usart_process_byte_sent+0x64>)
    17b2:	4798      	blx	r3
	} else {
		_usart_async_enable_tx_done_irq(&descr->device);
	}
}
    17b4:	e004      	b.n	17c0 <usart_process_byte_sent+0x58>
		_usart_async_enable_tx_done_irq(&descr->device);
    17b6:	68fb      	ldr	r3, [r7, #12]
    17b8:	3308      	adds	r3, #8
    17ba:	4618      	mov	r0, r3
    17bc:	4b04      	ldr	r3, [pc, #16]	; (17d0 <usart_process_byte_sent+0x68>)
    17be:	4798      	blx	r3
}
    17c0:	bf00      	nop
    17c2:	3714      	adds	r7, #20
    17c4:	46bd      	mov	sp, r7
    17c6:	bd90      	pop	{r4, r7, pc}
    17c8:	00003f0d 	.word	0x00003f0d
    17cc:	00003f55 	.word	0x00003f55
    17d0:	00003f75 	.word	0x00003f75

000017d4 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
    17d4:	b580      	push	{r7, lr}
    17d6:	b084      	sub	sp, #16
    17d8:	af00      	add	r7, sp, #0
    17da:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    17dc:	687b      	ldr	r3, [r7, #4]
    17de:	3b08      	subs	r3, #8
    17e0:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    17e2:	68fb      	ldr	r3, [r7, #12]
    17e4:	2200      	movs	r2, #0
    17e6:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
    17e8:	68fb      	ldr	r3, [r7, #12]
    17ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17ec:	2b00      	cmp	r3, #0
    17ee:	d003      	beq.n	17f8 <usart_transmission_complete+0x24>
		descr->usart_cb.tx_done(descr);
    17f0:	68fb      	ldr	r3, [r7, #12]
    17f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    17f4:	68f8      	ldr	r0, [r7, #12]
    17f6:	4798      	blx	r3
	}
}
    17f8:	bf00      	nop
    17fa:	3710      	adds	r7, #16
    17fc:	46bd      	mov	sp, r7
    17fe:	bd80      	pop	{r7, pc}

00001800 <usart_fill_rx_buffer>:
 *
 * \param[in] device The pointer to device structure
 * \param[in] data Data read
 */
static void usart_fill_rx_buffer(struct _usart_async_device *device, uint8_t data)
{
    1800:	b580      	push	{r7, lr}
    1802:	b084      	sub	sp, #16
    1804:	af00      	add	r7, sp, #0
    1806:	6078      	str	r0, [r7, #4]
    1808:	460b      	mov	r3, r1
    180a:	70fb      	strb	r3, [r7, #3]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    180c:	687b      	ldr	r3, [r7, #4]
    180e:	3b08      	subs	r3, #8
    1810:	60fb      	str	r3, [r7, #12]

	ringbuffer_put(&descr->rx, data);
    1812:	68fb      	ldr	r3, [r7, #12]
    1814:	3334      	adds	r3, #52	; 0x34
    1816:	78fa      	ldrb	r2, [r7, #3]
    1818:	4611      	mov	r1, r2
    181a:	4618      	mov	r0, r3
    181c:	4b06      	ldr	r3, [pc, #24]	; (1838 <usart_fill_rx_buffer+0x38>)
    181e:	4798      	blx	r3

	if (descr->usart_cb.rx_done) {
    1820:	68fb      	ldr	r3, [r7, #12]
    1822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1824:	2b00      	cmp	r3, #0
    1826:	d003      	beq.n	1830 <usart_fill_rx_buffer+0x30>
		descr->usart_cb.rx_done(descr);
    1828:	68fb      	ldr	r3, [r7, #12]
    182a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    182c:	68f8      	ldr	r0, [r7, #12]
    182e:	4798      	blx	r3
	}
}
    1830:	bf00      	nop
    1832:	3710      	adds	r7, #16
    1834:	46bd      	mov	sp, r7
    1836:	bd80      	pop	{r7, pc}
    1838:	00001975 	.word	0x00001975

0000183c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
    183c:	b580      	push	{r7, lr}
    183e:	b084      	sub	sp, #16
    1840:	af00      	add	r7, sp, #0
    1842:	6078      	str	r0, [r7, #4]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
    1844:	687b      	ldr	r3, [r7, #4]
    1846:	3b08      	subs	r3, #8
    1848:	60fb      	str	r3, [r7, #12]

	descr->stat = 0;
    184a:	68fb      	ldr	r3, [r7, #12]
    184c:	2200      	movs	r2, #0
    184e:	631a      	str	r2, [r3, #48]	; 0x30
	if (descr->usart_cb.error) {
    1850:	68fb      	ldr	r3, [r7, #12]
    1852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1854:	2b00      	cmp	r3, #0
    1856:	d003      	beq.n	1860 <usart_error+0x24>
		descr->usart_cb.error(descr);
    1858:	68fb      	ldr	r3, [r7, #12]
    185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    185c:	68f8      	ldr	r0, [r7, #12]
    185e:	4798      	blx	r3
	}
}
    1860:	bf00      	nop
    1862:	3710      	adds	r7, #16
    1864:	46bd      	mov	sp, r7
    1866:	bd80      	pop	{r7, pc}

00001868 <assert>:

/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
    1868:	b480      	push	{r7}
    186a:	b085      	sub	sp, #20
    186c:	af00      	add	r7, sp, #0
    186e:	4603      	mov	r3, r0
    1870:	60b9      	str	r1, [r7, #8]
    1872:	607a      	str	r2, [r7, #4]
    1874:	73fb      	strb	r3, [r7, #15]
	if (!(condition)) {
    1876:	7bfb      	ldrb	r3, [r7, #15]
    1878:	f083 0301 	eor.w	r3, r3, #1
    187c:	b2db      	uxtb	r3, r3
    187e:	2b00      	cmp	r3, #0
    1880:	d000      	beq.n	1884 <assert+0x1c>
		__asm("BKPT #0");
    1882:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
    1884:	bf00      	nop
    1886:	3714      	adds	r7, #20
    1888:	46bd      	mov	sp, r7
    188a:	f85d 7b04 	ldr.w	r7, [sp], #4
    188e:	4770      	bx	lr

00001890 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
    1890:	b580      	push	{r7, lr}
    1892:	b084      	sub	sp, #16
    1894:	af00      	add	r7, sp, #0
    1896:	60f8      	str	r0, [r7, #12]
    1898:	60b9      	str	r1, [r7, #8]
    189a:	607a      	str	r2, [r7, #4]
	ASSERT(rb && buf && size);
    189c:	68fb      	ldr	r3, [r7, #12]
    189e:	2b00      	cmp	r3, #0
    18a0:	d007      	beq.n	18b2 <ringbuffer_init+0x22>
    18a2:	68bb      	ldr	r3, [r7, #8]
    18a4:	2b00      	cmp	r3, #0
    18a6:	d004      	beq.n	18b2 <ringbuffer_init+0x22>
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	2b00      	cmp	r3, #0
    18ac:	d001      	beq.n	18b2 <ringbuffer_init+0x22>
    18ae:	2301      	movs	r3, #1
    18b0:	e000      	b.n	18b4 <ringbuffer_init+0x24>
    18b2:	2300      	movs	r3, #0
    18b4:	f003 0301 	and.w	r3, r3, #1
    18b8:	b2db      	uxtb	r3, r3
    18ba:	2228      	movs	r2, #40	; 0x28
    18bc:	490f      	ldr	r1, [pc, #60]	; (18fc <ringbuffer_init+0x6c>)
    18be:	4618      	mov	r0, r3
    18c0:	4b0f      	ldr	r3, [pc, #60]	; (1900 <ringbuffer_init+0x70>)
    18c2:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
    18c4:	687b      	ldr	r3, [r7, #4]
    18c6:	1e5a      	subs	r2, r3, #1
    18c8:	687b      	ldr	r3, [r7, #4]
    18ca:	4013      	ands	r3, r2
    18cc:	2b00      	cmp	r3, #0
    18ce:	d002      	beq.n	18d6 <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
    18d0:	f06f 030c 	mvn.w	r3, #12
    18d4:	e00e      	b.n	18f4 <ringbuffer_init+0x64>
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
    18d6:	687b      	ldr	r3, [r7, #4]
    18d8:	1e5a      	subs	r2, r3, #1
    18da:	68fb      	ldr	r3, [r7, #12]
    18dc:	605a      	str	r2, [r3, #4]
	rb->read_index  = 0;
    18de:	68fb      	ldr	r3, [r7, #12]
    18e0:	2200      	movs	r2, #0
    18e2:	609a      	str	r2, [r3, #8]
	rb->write_index = rb->read_index;
    18e4:	68fb      	ldr	r3, [r7, #12]
    18e6:	689a      	ldr	r2, [r3, #8]
    18e8:	68fb      	ldr	r3, [r7, #12]
    18ea:	60da      	str	r2, [r3, #12]
	rb->buf         = (uint8_t *)buf;
    18ec:	68fb      	ldr	r3, [r7, #12]
    18ee:	68ba      	ldr	r2, [r7, #8]
    18f0:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    18f2:	2300      	movs	r3, #0
}
    18f4:	4618      	mov	r0, r3
    18f6:	3710      	adds	r7, #16
    18f8:	46bd      	mov	sp, r7
    18fa:	bd80      	pop	{r7, pc}
    18fc:	00005cb4 	.word	0x00005cb4
    1900:	00001869 	.word	0x00001869

00001904 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
    1904:	b580      	push	{r7, lr}
    1906:	b082      	sub	sp, #8
    1908:	af00      	add	r7, sp, #0
    190a:	6078      	str	r0, [r7, #4]
    190c:	6039      	str	r1, [r7, #0]
	ASSERT(rb && data);
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	2b00      	cmp	r3, #0
    1912:	d004      	beq.n	191e <ringbuffer_get+0x1a>
    1914:	683b      	ldr	r3, [r7, #0]
    1916:	2b00      	cmp	r3, #0
    1918:	d001      	beq.n	191e <ringbuffer_get+0x1a>
    191a:	2301      	movs	r3, #1
    191c:	e000      	b.n	1920 <ringbuffer_get+0x1c>
    191e:	2300      	movs	r3, #0
    1920:	f003 0301 	and.w	r3, r3, #1
    1924:	b2db      	uxtb	r3, r3
    1926:	2240      	movs	r2, #64	; 0x40
    1928:	4910      	ldr	r1, [pc, #64]	; (196c <ringbuffer_get+0x68>)
    192a:	4618      	mov	r0, r3
    192c:	4b10      	ldr	r3, [pc, #64]	; (1970 <ringbuffer_get+0x6c>)
    192e:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
    1930:	687b      	ldr	r3, [r7, #4]
    1932:	68da      	ldr	r2, [r3, #12]
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	689b      	ldr	r3, [r3, #8]
    1938:	429a      	cmp	r2, r3
    193a:	d011      	beq.n	1960 <ringbuffer_get+0x5c>
		*data = rb->buf[rb->read_index & rb->size];
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	681a      	ldr	r2, [r3, #0]
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	6899      	ldr	r1, [r3, #8]
    1944:	687b      	ldr	r3, [r7, #4]
    1946:	685b      	ldr	r3, [r3, #4]
    1948:	400b      	ands	r3, r1
    194a:	4413      	add	r3, r2
    194c:	781a      	ldrb	r2, [r3, #0]
    194e:	683b      	ldr	r3, [r7, #0]
    1950:	701a      	strb	r2, [r3, #0]
		rb->read_index++;
    1952:	687b      	ldr	r3, [r7, #4]
    1954:	689b      	ldr	r3, [r3, #8]
    1956:	1c5a      	adds	r2, r3, #1
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	609a      	str	r2, [r3, #8]
		return ERR_NONE;
    195c:	2300      	movs	r3, #0
    195e:	e001      	b.n	1964 <ringbuffer_get+0x60>
	}

	return ERR_NOT_FOUND;
    1960:	f06f 0309 	mvn.w	r3, #9
}
    1964:	4618      	mov	r0, r3
    1966:	3708      	adds	r7, #8
    1968:	46bd      	mov	sp, r7
    196a:	bd80      	pop	{r7, pc}
    196c:	00005cb4 	.word	0x00005cb4
    1970:	00001869 	.word	0x00001869

00001974 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
    1974:	b580      	push	{r7, lr}
    1976:	b082      	sub	sp, #8
    1978:	af00      	add	r7, sp, #0
    197a:	6078      	str	r0, [r7, #4]
    197c:	460b      	mov	r3, r1
    197e:	70fb      	strb	r3, [r7, #3]
	ASSERT(rb);
    1980:	687b      	ldr	r3, [r7, #4]
    1982:	2b00      	cmp	r3, #0
    1984:	bf14      	ite	ne
    1986:	2301      	movne	r3, #1
    1988:	2300      	moveq	r3, #0
    198a:	b2db      	uxtb	r3, r3
    198c:	2251      	movs	r2, #81	; 0x51
    198e:	4914      	ldr	r1, [pc, #80]	; (19e0 <ringbuffer_put+0x6c>)
    1990:	4618      	mov	r0, r3
    1992:	4b14      	ldr	r3, [pc, #80]	; (19e4 <ringbuffer_put+0x70>)
    1994:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
    1996:	687b      	ldr	r3, [r7, #4]
    1998:	681a      	ldr	r2, [r3, #0]
    199a:	687b      	ldr	r3, [r7, #4]
    199c:	68d9      	ldr	r1, [r3, #12]
    199e:	687b      	ldr	r3, [r7, #4]
    19a0:	685b      	ldr	r3, [r3, #4]
    19a2:	400b      	ands	r3, r1
    19a4:	4413      	add	r3, r2
    19a6:	78fa      	ldrb	r2, [r7, #3]
    19a8:	701a      	strb	r2, [r3, #0]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
    19aa:	687b      	ldr	r3, [r7, #4]
    19ac:	68da      	ldr	r2, [r3, #12]
    19ae:	687b      	ldr	r3, [r7, #4]
    19b0:	689b      	ldr	r3, [r3, #8]
    19b2:	1ad2      	subs	r2, r2, r3
    19b4:	687b      	ldr	r3, [r7, #4]
    19b6:	685b      	ldr	r3, [r3, #4]
    19b8:	429a      	cmp	r2, r3
    19ba:	d906      	bls.n	19ca <ringbuffer_put+0x56>
		rb->read_index = rb->write_index - rb->size;
    19bc:	687b      	ldr	r3, [r7, #4]
    19be:	68da      	ldr	r2, [r3, #12]
    19c0:	687b      	ldr	r3, [r7, #4]
    19c2:	685b      	ldr	r3, [r3, #4]
    19c4:	1ad2      	subs	r2, r2, r3
    19c6:	687b      	ldr	r3, [r7, #4]
    19c8:	609a      	str	r2, [r3, #8]
	}

	rb->write_index++;
    19ca:	687b      	ldr	r3, [r7, #4]
    19cc:	68db      	ldr	r3, [r3, #12]
    19ce:	1c5a      	adds	r2, r3, #1
    19d0:	687b      	ldr	r3, [r7, #4]
    19d2:	60da      	str	r2, [r3, #12]

	return ERR_NONE;
    19d4:	2300      	movs	r3, #0
}
    19d6:	4618      	mov	r0, r3
    19d8:	3708      	adds	r7, #8
    19da:	46bd      	mov	sp, r7
    19dc:	bd80      	pop	{r7, pc}
    19de:	bf00      	nop
    19e0:	00005cb4 	.word	0x00005cb4
    19e4:	00001869 	.word	0x00001869

000019e8 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
    19e8:	b580      	push	{r7, lr}
    19ea:	b082      	sub	sp, #8
    19ec:	af00      	add	r7, sp, #0
    19ee:	6078      	str	r0, [r7, #4]
	ASSERT(rb);
    19f0:	687b      	ldr	r3, [r7, #4]
    19f2:	2b00      	cmp	r3, #0
    19f4:	bf14      	ite	ne
    19f6:	2301      	movne	r3, #1
    19f8:	2300      	moveq	r3, #0
    19fa:	b2db      	uxtb	r3, r3
    19fc:	2267      	movs	r2, #103	; 0x67
    19fe:	4906      	ldr	r1, [pc, #24]	; (1a18 <ringbuffer_num+0x30>)
    1a00:	4618      	mov	r0, r3
    1a02:	4b06      	ldr	r3, [pc, #24]	; (1a1c <ringbuffer_num+0x34>)
    1a04:	4798      	blx	r3

	return rb->write_index - rb->read_index;
    1a06:	687b      	ldr	r3, [r7, #4]
    1a08:	68da      	ldr	r2, [r3, #12]
    1a0a:	687b      	ldr	r3, [r7, #4]
    1a0c:	689b      	ldr	r3, [r3, #8]
    1a0e:	1ad3      	subs	r3, r2, r3
}
    1a10:	4618      	mov	r0, r3
    1a12:	3708      	adds	r7, #8
    1a14:	46bd      	mov	sp, r7
    1a16:	bd80      	pop	{r7, pc}
    1a18:	00005cb4 	.word	0x00005cb4
    1a1c:	00001869 	.word	0x00001869

00001a20 <_get_cycles_for_us_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
static inline uint32_t _get_cycles_for_us_internal(const uint16_t us, const uint32_t freq, const uint8_t power)
{
    1a20:	b480      	push	{r7}
    1a22:	b083      	sub	sp, #12
    1a24:	af00      	add	r7, sp, #0
    1a26:	4603      	mov	r3, r0
    1a28:	6039      	str	r1, [r7, #0]
    1a2a:	80fb      	strh	r3, [r7, #6]
    1a2c:	4613      	mov	r3, r2
    1a2e:	717b      	strb	r3, [r7, #5]
	switch (power) {
    1a30:	797b      	ldrb	r3, [r7, #5]
    1a32:	3b04      	subs	r3, #4
    1a34:	2b05      	cmp	r3, #5
    1a36:	d865      	bhi.n	1b04 <_get_cycles_for_us_internal+0xe4>
    1a38:	a201      	add	r2, pc, #4	; (adr r2, 1a40 <_get_cycles_for_us_internal+0x20>)
    1a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1a3e:	bf00      	nop
    1a40:	00001ae5 	.word	0x00001ae5
    1a44:	00001ac7 	.word	0x00001ac7
    1a48:	00001aa9 	.word	0x00001aa9
    1a4c:	00001a8b 	.word	0x00001a8b
    1a50:	00001a6b 	.word	0x00001a6b
    1a54:	00001a59 	.word	0x00001a59
	case 9:
		return (us * (freq / 1000000) - 1) + 1;
    1a58:	88fb      	ldrh	r3, [r7, #6]
    1a5a:	683a      	ldr	r2, [r7, #0]
    1a5c:	4931      	ldr	r1, [pc, #196]	; (1b24 <_get_cycles_for_us_internal+0x104>)
    1a5e:	fba1 1202 	umull	r1, r2, r1, r2
    1a62:	0c92      	lsrs	r2, r2, #18
    1a64:	fb02 f303 	mul.w	r3, r2, r3
    1a68:	e056      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	case 8:
		return (us * (freq / 100000) - 1) / 10 + 1;
    1a6a:	88fb      	ldrh	r3, [r7, #6]
    1a6c:	683a      	ldr	r2, [r7, #0]
    1a6e:	0952      	lsrs	r2, r2, #5
    1a70:	492d      	ldr	r1, [pc, #180]	; (1b28 <_get_cycles_for_us_internal+0x108>)
    1a72:	fba1 1202 	umull	r1, r2, r1, r2
    1a76:	09d2      	lsrs	r2, r2, #7
    1a78:	fb02 f303 	mul.w	r3, r2, r3
    1a7c:	3b01      	subs	r3, #1
    1a7e:	4a2b      	ldr	r2, [pc, #172]	; (1b2c <_get_cycles_for_us_internal+0x10c>)
    1a80:	fba2 2303 	umull	r2, r3, r2, r3
    1a84:	08db      	lsrs	r3, r3, #3
    1a86:	3301      	adds	r3, #1
    1a88:	e046      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	case 7:
		return (us * (freq / 10000) - 1) / 100 + 1;
    1a8a:	88fb      	ldrh	r3, [r7, #6]
    1a8c:	683a      	ldr	r2, [r7, #0]
    1a8e:	4928      	ldr	r1, [pc, #160]	; (1b30 <_get_cycles_for_us_internal+0x110>)
    1a90:	fba1 1202 	umull	r1, r2, r1, r2
    1a94:	0b52      	lsrs	r2, r2, #13
    1a96:	fb02 f303 	mul.w	r3, r2, r3
    1a9a:	3b01      	subs	r3, #1
    1a9c:	4a25      	ldr	r2, [pc, #148]	; (1b34 <_get_cycles_for_us_internal+0x114>)
    1a9e:	fba2 2303 	umull	r2, r3, r2, r3
    1aa2:	095b      	lsrs	r3, r3, #5
    1aa4:	3301      	adds	r3, #1
    1aa6:	e037      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	case 6:
		return (us * (freq / 1000) - 1) / 1000 + 1;
    1aa8:	88fb      	ldrh	r3, [r7, #6]
    1aaa:	683a      	ldr	r2, [r7, #0]
    1aac:	4922      	ldr	r1, [pc, #136]	; (1b38 <_get_cycles_for_us_internal+0x118>)
    1aae:	fba1 1202 	umull	r1, r2, r1, r2
    1ab2:	0992      	lsrs	r2, r2, #6
    1ab4:	fb02 f303 	mul.w	r3, r2, r3
    1ab8:	3b01      	subs	r3, #1
    1aba:	4a1f      	ldr	r2, [pc, #124]	; (1b38 <_get_cycles_for_us_internal+0x118>)
    1abc:	fba2 2303 	umull	r2, r3, r2, r3
    1ac0:	099b      	lsrs	r3, r3, #6
    1ac2:	3301      	adds	r3, #1
    1ac4:	e028      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	case 5:
		return (us * (freq / 100) - 1) / 10000 + 1;
    1ac6:	88fb      	ldrh	r3, [r7, #6]
    1ac8:	683a      	ldr	r2, [r7, #0]
    1aca:	491a      	ldr	r1, [pc, #104]	; (1b34 <_get_cycles_for_us_internal+0x114>)
    1acc:	fba1 1202 	umull	r1, r2, r1, r2
    1ad0:	0952      	lsrs	r2, r2, #5
    1ad2:	fb02 f303 	mul.w	r3, r2, r3
    1ad6:	3b01      	subs	r3, #1
    1ad8:	4a15      	ldr	r2, [pc, #84]	; (1b30 <_get_cycles_for_us_internal+0x110>)
    1ada:	fba2 2303 	umull	r2, r3, r2, r3
    1ade:	0b5b      	lsrs	r3, r3, #13
    1ae0:	3301      	adds	r3, #1
    1ae2:	e019      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	case 4:
		return (us * (freq / 10) - 1) / 100000 + 1;
    1ae4:	88fb      	ldrh	r3, [r7, #6]
    1ae6:	683a      	ldr	r2, [r7, #0]
    1ae8:	4910      	ldr	r1, [pc, #64]	; (1b2c <_get_cycles_for_us_internal+0x10c>)
    1aea:	fba1 1202 	umull	r1, r2, r1, r2
    1aee:	08d2      	lsrs	r2, r2, #3
    1af0:	fb02 f303 	mul.w	r3, r2, r3
    1af4:	3b01      	subs	r3, #1
    1af6:	095b      	lsrs	r3, r3, #5
    1af8:	4a0b      	ldr	r2, [pc, #44]	; (1b28 <_get_cycles_for_us_internal+0x108>)
    1afa:	fba2 2303 	umull	r2, r3, r2, r3
    1afe:	09db      	lsrs	r3, r3, #7
    1b00:	3301      	adds	r3, #1
    1b02:	e009      	b.n	1b18 <_get_cycles_for_us_internal+0xf8>
	default:
		return (us * freq - 1) / 1000000 + 1;
    1b04:	88fb      	ldrh	r3, [r7, #6]
    1b06:	683a      	ldr	r2, [r7, #0]
    1b08:	fb02 f303 	mul.w	r3, r2, r3
    1b0c:	3b01      	subs	r3, #1
    1b0e:	4a05      	ldr	r2, [pc, #20]	; (1b24 <_get_cycles_for_us_internal+0x104>)
    1b10:	fba2 2303 	umull	r2, r3, r2, r3
    1b14:	0c9b      	lsrs	r3, r3, #18
    1b16:	3301      	adds	r3, #1
	}
}
    1b18:	4618      	mov	r0, r3
    1b1a:	370c      	adds	r7, #12
    1b1c:	46bd      	mov	sp, r7
    1b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b22:	4770      	bx	lr
    1b24:	431bde83 	.word	0x431bde83
    1b28:	0a7c5ac5 	.word	0x0a7c5ac5
    1b2c:	cccccccd 	.word	0xcccccccd
    1b30:	d1b71759 	.word	0xd1b71759
    1b34:	51eb851f 	.word	0x51eb851f
    1b38:	10624dd3 	.word	0x10624dd3

00001b3c <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
    1b3c:	b580      	push	{r7, lr}
    1b3e:	b082      	sub	sp, #8
    1b40:	af00      	add	r7, sp, #0
    1b42:	4603      	mov	r3, r0
    1b44:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    1b46:	88fb      	ldrh	r3, [r7, #6]
    1b48:	2209      	movs	r2, #9
    1b4a:	4904      	ldr	r1, [pc, #16]	; (1b5c <_get_cycles_for_us+0x20>)
    1b4c:	4618      	mov	r0, r3
    1b4e:	4b04      	ldr	r3, [pc, #16]	; (1b60 <_get_cycles_for_us+0x24>)
    1b50:	4798      	blx	r3
    1b52:	4603      	mov	r3, r0
}
    1b54:	4618      	mov	r0, r3
    1b56:	3708      	adds	r7, #8
    1b58:	46bd      	mov	sp, r7
    1b5a:	bd80      	pop	{r7, pc}
    1b5c:	07270e00 	.word	0x07270e00
    1b60:	00001a21 	.word	0x00001a21

00001b64 <_get_cycles_for_ms_internal>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
    1b64:	b480      	push	{r7}
    1b66:	b083      	sub	sp, #12
    1b68:	af00      	add	r7, sp, #0
    1b6a:	4603      	mov	r3, r0
    1b6c:	6039      	str	r1, [r7, #0]
    1b6e:	80fb      	strh	r3, [r7, #6]
    1b70:	4613      	mov	r3, r2
    1b72:	717b      	strb	r3, [r7, #5]
	switch (power) {
    1b74:	797b      	ldrb	r3, [r7, #5]
    1b76:	3b04      	subs	r3, #4
    1b78:	2b05      	cmp	r3, #5
    1b7a:	d85d      	bhi.n	1c38 <_get_cycles_for_ms_internal+0xd4>
    1b7c:	a201      	add	r2, pc, #4	; (adr r2, 1b84 <_get_cycles_for_ms_internal+0x20>)
    1b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1b82:	bf00      	nop
    1b84:	00001c1b 	.word	0x00001c1b
    1b88:	00001bfd 	.word	0x00001bfd
    1b8c:	00001beb 	.word	0x00001beb
    1b90:	00001bd1 	.word	0x00001bd1
    1b94:	00001bb7 	.word	0x00001bb7
    1b98:	00001b9d 	.word	0x00001b9d
	case 9:
		return (ms * (freq / 1000000)) * 1000;
    1b9c:	88fb      	ldrh	r3, [r7, #6]
    1b9e:	683a      	ldr	r2, [r7, #0]
    1ba0:	492d      	ldr	r1, [pc, #180]	; (1c58 <_get_cycles_for_ms_internal+0xf4>)
    1ba2:	fba1 1202 	umull	r1, r2, r1, r2
    1ba6:	0c92      	lsrs	r2, r2, #18
    1ba8:	fb02 f303 	mul.w	r3, r2, r3
    1bac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1bb0:	fb02 f303 	mul.w	r3, r2, r3
    1bb4:	e04a      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	case 8:
		return (ms * (freq / 100000)) * 100;
    1bb6:	88fb      	ldrh	r3, [r7, #6]
    1bb8:	683a      	ldr	r2, [r7, #0]
    1bba:	0952      	lsrs	r2, r2, #5
    1bbc:	4927      	ldr	r1, [pc, #156]	; (1c5c <_get_cycles_for_ms_internal+0xf8>)
    1bbe:	fba1 1202 	umull	r1, r2, r1, r2
    1bc2:	09d2      	lsrs	r2, r2, #7
    1bc4:	fb02 f303 	mul.w	r3, r2, r3
    1bc8:	2264      	movs	r2, #100	; 0x64
    1bca:	fb02 f303 	mul.w	r3, r2, r3
    1bce:	e03d      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	case 7:
		return (ms * (freq / 10000)) * 10;
    1bd0:	88fb      	ldrh	r3, [r7, #6]
    1bd2:	683a      	ldr	r2, [r7, #0]
    1bd4:	4922      	ldr	r1, [pc, #136]	; (1c60 <_get_cycles_for_ms_internal+0xfc>)
    1bd6:	fba1 1202 	umull	r1, r2, r1, r2
    1bda:	0b52      	lsrs	r2, r2, #13
    1bdc:	fb02 f203 	mul.w	r2, r2, r3
    1be0:	4613      	mov	r3, r2
    1be2:	009b      	lsls	r3, r3, #2
    1be4:	4413      	add	r3, r2
    1be6:	005b      	lsls	r3, r3, #1
    1be8:	e030      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	case 6:
		return (ms * (freq / 1000));
    1bea:	88fb      	ldrh	r3, [r7, #6]
    1bec:	683a      	ldr	r2, [r7, #0]
    1bee:	491d      	ldr	r1, [pc, #116]	; (1c64 <_get_cycles_for_ms_internal+0x100>)
    1bf0:	fba1 1202 	umull	r1, r2, r1, r2
    1bf4:	0992      	lsrs	r2, r2, #6
    1bf6:	fb02 f303 	mul.w	r3, r2, r3
    1bfa:	e027      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	case 5:
		return (ms * (freq / 100) - 1) / 10 + 1;
    1bfc:	88fb      	ldrh	r3, [r7, #6]
    1bfe:	683a      	ldr	r2, [r7, #0]
    1c00:	4919      	ldr	r1, [pc, #100]	; (1c68 <_get_cycles_for_ms_internal+0x104>)
    1c02:	fba1 1202 	umull	r1, r2, r1, r2
    1c06:	0952      	lsrs	r2, r2, #5
    1c08:	fb02 f303 	mul.w	r3, r2, r3
    1c0c:	3b01      	subs	r3, #1
    1c0e:	4a17      	ldr	r2, [pc, #92]	; (1c6c <_get_cycles_for_ms_internal+0x108>)
    1c10:	fba2 2303 	umull	r2, r3, r2, r3
    1c14:	08db      	lsrs	r3, r3, #3
    1c16:	3301      	adds	r3, #1
    1c18:	e018      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	case 4:
		return (ms * (freq / 10) - 1) / 100 + 1;
    1c1a:	88fb      	ldrh	r3, [r7, #6]
    1c1c:	683a      	ldr	r2, [r7, #0]
    1c1e:	4913      	ldr	r1, [pc, #76]	; (1c6c <_get_cycles_for_ms_internal+0x108>)
    1c20:	fba1 1202 	umull	r1, r2, r1, r2
    1c24:	08d2      	lsrs	r2, r2, #3
    1c26:	fb02 f303 	mul.w	r3, r2, r3
    1c2a:	3b01      	subs	r3, #1
    1c2c:	4a0e      	ldr	r2, [pc, #56]	; (1c68 <_get_cycles_for_ms_internal+0x104>)
    1c2e:	fba2 2303 	umull	r2, r3, r2, r3
    1c32:	095b      	lsrs	r3, r3, #5
    1c34:	3301      	adds	r3, #1
    1c36:	e009      	b.n	1c4c <_get_cycles_for_ms_internal+0xe8>
	default:
		return (ms * freq - 1) / 1000 + 1;
    1c38:	88fb      	ldrh	r3, [r7, #6]
    1c3a:	683a      	ldr	r2, [r7, #0]
    1c3c:	fb02 f303 	mul.w	r3, r2, r3
    1c40:	3b01      	subs	r3, #1
    1c42:	4a08      	ldr	r2, [pc, #32]	; (1c64 <_get_cycles_for_ms_internal+0x100>)
    1c44:	fba2 2303 	umull	r2, r3, r2, r3
    1c48:	099b      	lsrs	r3, r3, #6
    1c4a:	3301      	adds	r3, #1
	}
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	370c      	adds	r7, #12
    1c50:	46bd      	mov	sp, r7
    1c52:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c56:	4770      	bx	lr
    1c58:	431bde83 	.word	0x431bde83
    1c5c:	0a7c5ac5 	.word	0x0a7c5ac5
    1c60:	d1b71759 	.word	0xd1b71759
    1c64:	10624dd3 	.word	0x10624dd3
    1c68:	51eb851f 	.word	0x51eb851f
    1c6c:	cccccccd 	.word	0xcccccccd

00001c70 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
    1c70:	b580      	push	{r7, lr}
    1c72:	b082      	sub	sp, #8
    1c74:	af00      	add	r7, sp, #0
    1c76:	4603      	mov	r3, r0
    1c78:	80fb      	strh	r3, [r7, #6]
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
    1c7a:	88fb      	ldrh	r3, [r7, #6]
    1c7c:	2209      	movs	r2, #9
    1c7e:	4904      	ldr	r1, [pc, #16]	; (1c90 <_get_cycles_for_ms+0x20>)
    1c80:	4618      	mov	r0, r3
    1c82:	4b04      	ldr	r3, [pc, #16]	; (1c94 <_get_cycles_for_ms+0x24>)
    1c84:	4798      	blx	r3
    1c86:	4603      	mov	r3, r0
}
    1c88:	4618      	mov	r0, r3
    1c8a:	3708      	adds	r7, #8
    1c8c:	46bd      	mov	sp, r7
    1c8e:	bd80      	pop	{r7, pc}
    1c90:	07270e00 	.word	0x07270e00
    1c94:	00001b65 	.word	0x00001b65

00001c98 <hri_mclk_set_AHBMASK_DMAC_bit>:
{
    1c98:	b480      	push	{r7}
    1c9a:	b083      	sub	sp, #12
    1c9c:	af00      	add	r7, sp, #0
    1c9e:	6078      	str	r0, [r7, #4]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
    1ca0:	687b      	ldr	r3, [r7, #4]
    1ca2:	691b      	ldr	r3, [r3, #16]
    1ca4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
    1ca8:	687b      	ldr	r3, [r7, #4]
    1caa:	611a      	str	r2, [r3, #16]
}
    1cac:	bf00      	nop
    1cae:	370c      	adds	r7, #12
    1cb0:	46bd      	mov	sp, r7
    1cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1cb6:	4770      	bx	lr

00001cb8 <hri_nvmctrl_set_CTRLA_RWS_bf>:
	tmp = (tmp & NVMCTRL_CTRLA_PRM_Msk) >> NVMCTRL_CTRLA_PRM_Pos;
	return tmp;
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
    1cb8:	b480      	push	{r7}
    1cba:	b083      	sub	sp, #12
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
    1cc0:	460b      	mov	r3, r1
    1cc2:	807b      	strh	r3, [r7, #2]
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
    1cc4:	687b      	ldr	r3, [r7, #4]
    1cc6:	881b      	ldrh	r3, [r3, #0]
    1cc8:	b29a      	uxth	r2, r3
    1cca:	887b      	ldrh	r3, [r7, #2]
    1ccc:	021b      	lsls	r3, r3, #8
    1cce:	b29b      	uxth	r3, r3
    1cd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    1cd4:	b29b      	uxth	r3, r3
    1cd6:	4313      	orrs	r3, r2
    1cd8:	b29a      	uxth	r2, r3
    1cda:	687b      	ldr	r3, [r7, #4]
    1cdc:	801a      	strh	r2, [r3, #0]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}
    1cde:	bf00      	nop
    1ce0:	370c      	adds	r7, #12
    1ce2:	46bd      	mov	sp, r7
    1ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ce8:	4770      	bx	lr
	...

00001cec <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
    1cec:	b580      	push	{r7, lr}
    1cee:	af00      	add	r7, sp, #0
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);
    1cf0:	2100      	movs	r1, #0
    1cf2:	480c      	ldr	r0, [pc, #48]	; (1d24 <_init_chip+0x38>)
    1cf4:	4b0c      	ldr	r3, [pc, #48]	; (1d28 <_init_chip+0x3c>)
    1cf6:	4798      	blx	r3

	_osc32kctrl_init_sources();
    1cf8:	4b0c      	ldr	r3, [pc, #48]	; (1d2c <_init_chip+0x40>)
    1cfa:	4798      	blx	r3
	_oscctrl_init_sources();
    1cfc:	4b0c      	ldr	r3, [pc, #48]	; (1d30 <_init_chip+0x44>)
    1cfe:	4798      	blx	r3
	_mclk_init();
    1d00:	4b0c      	ldr	r3, [pc, #48]	; (1d34 <_init_chip+0x48>)
    1d02:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
    1d04:	2004      	movs	r0, #4
    1d06:	4b0c      	ldr	r3, [pc, #48]	; (1d38 <_init_chip+0x4c>)
    1d08:	4798      	blx	r3
#endif
	_oscctrl_init_referenced_generators();
    1d0a:	4b0c      	ldr	r3, [pc, #48]	; (1d3c <_init_chip+0x50>)
    1d0c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
    1d0e:	f640 70fb 	movw	r0, #4091	; 0xffb
    1d12:	4b09      	ldr	r3, [pc, #36]	; (1d38 <_init_chip+0x4c>)
    1d14:	4798      	blx	r3

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
    1d16:	480a      	ldr	r0, [pc, #40]	; (1d40 <_init_chip+0x54>)
    1d18:	4b0a      	ldr	r3, [pc, #40]	; (1d44 <_init_chip+0x58>)
    1d1a:	4798      	blx	r3
	_dma_init();
    1d1c:	4b0a      	ldr	r3, [pc, #40]	; (1d48 <_init_chip+0x5c>)
    1d1e:	4798      	blx	r3
#endif

#if CONF_CMCC_ENABLE
	cache_init();
#endif
}
    1d20:	bf00      	nop
    1d22:	bd80      	pop	{r7, pc}
    1d24:	41004000 	.word	0x41004000
    1d28:	00001cb9 	.word	0x00001cb9
    1d2c:	00003085 	.word	0x00003085
    1d30:	00003295 	.word	0x00003295
    1d34:	00003001 	.word	0x00003001
    1d38:	00002f69 	.word	0x00002f69
    1d3c:	000032d5 	.word	0x000032d5
    1d40:	40000800 	.word	0x40000800
    1d44:	00001c99 	.word	0x00001c99
    1d48:	0000234d 	.word	0x0000234d

00001d4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
    1d4c:	b480      	push	{r7}
    1d4e:	b083      	sub	sp, #12
    1d50:	af00      	add	r7, sp, #0
    1d52:	4603      	mov	r3, r0
    1d54:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	db0b      	blt.n	1d76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d5e:	4909      	ldr	r1, [pc, #36]	; (1d84 <__NVIC_EnableIRQ+0x38>)
    1d60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1d64:	095b      	lsrs	r3, r3, #5
    1d66:	88fa      	ldrh	r2, [r7, #6]
    1d68:	f002 021f 	and.w	r2, r2, #31
    1d6c:	2001      	movs	r0, #1
    1d6e:	fa00 f202 	lsl.w	r2, r0, r2
    1d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1d76:	bf00      	nop
    1d78:	370c      	adds	r7, #12
    1d7a:	46bd      	mov	sp, r7
    1d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1d80:	4770      	bx	lr
    1d82:	bf00      	nop
    1d84:	e000e100 	.word	0xe000e100

00001d88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
    1d88:	b480      	push	{r7}
    1d8a:	b083      	sub	sp, #12
    1d8c:	af00      	add	r7, sp, #0
    1d8e:	4603      	mov	r3, r0
    1d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1d96:	2b00      	cmp	r3, #0
    1d98:	db10      	blt.n	1dbc <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9a:	490b      	ldr	r1, [pc, #44]	; (1dc8 <__NVIC_DisableIRQ+0x40>)
    1d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1da0:	095b      	lsrs	r3, r3, #5
    1da2:	88fa      	ldrh	r2, [r7, #6]
    1da4:	f002 021f 	and.w	r2, r2, #31
    1da8:	2001      	movs	r0, #1
    1daa:	fa00 f202 	lsl.w	r2, r0, r2
    1dae:	3320      	adds	r3, #32
    1db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1db4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1db8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    1dbc:	bf00      	nop
    1dbe:	370c      	adds	r7, #12
    1dc0:	46bd      	mov	sp, r7
    1dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1dc6:	4770      	bx	lr
    1dc8:	e000e100 	.word	0xe000e100

00001dcc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
    1dcc:	b480      	push	{r7}
    1dce:	b083      	sub	sp, #12
    1dd0:	af00      	add	r7, sp, #0
    1dd2:	4603      	mov	r3, r0
    1dd4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    1dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1dda:	2b00      	cmp	r3, #0
    1ddc:	db0c      	blt.n	1df8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dde:	4909      	ldr	r1, [pc, #36]	; (1e04 <__NVIC_ClearPendingIRQ+0x38>)
    1de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    1de4:	095b      	lsrs	r3, r3, #5
    1de6:	88fa      	ldrh	r2, [r7, #6]
    1de8:	f002 021f 	and.w	r2, r2, #31
    1dec:	2001      	movs	r0, #1
    1dee:	fa00 f202 	lsl.w	r2, r0, r2
    1df2:	3360      	adds	r3, #96	; 0x60
    1df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
    1df8:	bf00      	nop
    1dfa:	370c      	adds	r7, #12
    1dfc:	46bd      	mov	sp, r7
    1dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e02:	4770      	bx	lr
    1e04:	e000e100 	.word	0xe000e100

00001e08 <hri_dmac_set_CTRL_SWRST_bit>:
{
	return ((Dmac *)hw)->ACTIVE.reg;
}

static inline void hri_dmac_set_CTRL_SWRST_bit(const void *const hw)
{
    1e08:	b480      	push	{r7}
    1e0a:	b083      	sub	sp, #12
    1e0c:	af00      	add	r7, sp, #0
    1e0e:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	881b      	ldrh	r3, [r3, #0]
    1e14:	b29b      	uxth	r3, r3
    1e16:	f043 0301 	orr.w	r3, r3, #1
    1e1a:	b29a      	uxth	r2, r3
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1e20:	bf00      	nop
    1e22:	370c      	adds	r7, #12
    1e24:	46bd      	mov	sp, r7
    1e26:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e2a:	4770      	bx	lr

00001e2c <hri_dmac_get_CTRL_SWRST_bit>:

static inline bool hri_dmac_get_CTRL_SWRST_bit(const void *const hw)
{
    1e2c:	b480      	push	{r7}
    1e2e:	b085      	sub	sp, #20
    1e30:	af00      	add	r7, sp, #0
    1e32:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((Dmac *)hw)->CTRL.reg;
    1e34:	687b      	ldr	r3, [r7, #4]
    1e36:	881b      	ldrh	r3, [r3, #0]
    1e38:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & DMAC_CTRL_SWRST) >> DMAC_CTRL_SWRST_Pos;
    1e3a:	89fb      	ldrh	r3, [r7, #14]
    1e3c:	f003 0301 	and.w	r3, r3, #1
    1e40:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    1e42:	89fb      	ldrh	r3, [r7, #14]
    1e44:	2b00      	cmp	r3, #0
    1e46:	bf14      	ite	ne
    1e48:	2301      	movne	r3, #1
    1e4a:	2300      	moveq	r3, #0
    1e4c:	b2db      	uxtb	r3, r3
}
    1e4e:	4618      	mov	r0, r3
    1e50:	3714      	adds	r7, #20
    1e52:	46bd      	mov	sp, r7
    1e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e58:	4770      	bx	lr

00001e5a <hri_dmac_set_CTRL_DMAENABLE_bit>:

static inline void hri_dmac_set_CTRL_DMAENABLE_bit(const void *const hw)
{
    1e5a:	b480      	push	{r7}
    1e5c:	b083      	sub	sp, #12
    1e5e:	af00      	add	r7, sp, #0
    1e60:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    1e62:	687b      	ldr	r3, [r7, #4]
    1e64:	881b      	ldrh	r3, [r3, #0]
    1e66:	b29b      	uxth	r3, r3
    1e68:	f043 0302 	orr.w	r3, r3, #2
    1e6c:	b29a      	uxth	r2, r3
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1e72:	bf00      	nop
    1e74:	370c      	adds	r7, #12
    1e76:	46bd      	mov	sp, r7
    1e78:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e7c:	4770      	bx	lr

00001e7e <hri_dmac_clear_CTRL_DMAENABLE_bit>:
	((Dmac *)hw)->CTRL.reg = tmp;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_dmac_clear_CTRL_DMAENABLE_bit(const void *const hw)
{
    1e7e:	b480      	push	{r7}
    1e80:	b083      	sub	sp, #12
    1e82:	af00      	add	r7, sp, #0
    1e84:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    1e86:	687b      	ldr	r3, [r7, #4]
    1e88:	881b      	ldrh	r3, [r3, #0]
    1e8a:	b29b      	uxth	r3, r3
    1e8c:	f023 0302 	bic.w	r3, r3, #2
    1e90:	b29a      	uxth	r2, r3
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1e96:	bf00      	nop
    1e98:	370c      	adds	r7, #12
    1e9a:	46bd      	mov	sp, r7
    1e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ea0:	4770      	bx	lr

00001ea2 <hri_dmac_write_CTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_CTRL_reg(const void *const hw, hri_dmac_ctrl_reg_t data)
{
    1ea2:	b480      	push	{r7}
    1ea4:	b083      	sub	sp, #12
    1ea6:	af00      	add	r7, sp, #0
    1ea8:	6078      	str	r0, [r7, #4]
    1eaa:	460b      	mov	r3, r1
    1eac:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CTRL.reg = data;
    1eae:	687b      	ldr	r3, [r7, #4]
    1eb0:	887a      	ldrh	r2, [r7, #2]
    1eb2:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1eb4:	bf00      	nop
    1eb6:	370c      	adds	r7, #12
    1eb8:	46bd      	mov	sp, r7
    1eba:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ebe:	4770      	bx	lr

00001ec0 <hri_dmac_clear_CRCCTRL_reg>:
	((Dmac *)hw)->CRCCTRL.reg = data;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_dmac_clear_CRCCTRL_reg(const void *const hw, hri_dmac_crcctrl_reg_t mask)
{
    1ec0:	b480      	push	{r7}
    1ec2:	b083      	sub	sp, #12
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
    1ec8:	460b      	mov	r3, r1
    1eca:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    1ecc:	687b      	ldr	r3, [r7, #4]
    1ece:	885b      	ldrh	r3, [r3, #2]
    1ed0:	b29b      	uxth	r3, r3
    1ed2:	b21a      	sxth	r2, r3
    1ed4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    1ed8:	43db      	mvns	r3, r3
    1eda:	b21b      	sxth	r3, r3
    1edc:	4013      	ands	r3, r2
    1ede:	b21b      	sxth	r3, r3
    1ee0:	b29a      	uxth	r2, r3
    1ee2:	687b      	ldr	r3, [r7, #4]
    1ee4:	805a      	strh	r2, [r3, #2]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1ee6:	bf00      	nop
    1ee8:	370c      	adds	r7, #12
    1eea:	46bd      	mov	sp, r7
    1eec:	f85d 7b04 	ldr.w	r7, [sp], #4
    1ef0:	4770      	bx	lr

00001ef2 <hri_dmac_write_DBGCTRL_DBGRUN_bit>:
	tmp = (tmp & DMAC_DBGCTRL_DBGRUN) >> DMAC_DBGCTRL_DBGRUN_Pos;
	return (bool)tmp;
}

static inline void hri_dmac_write_DBGCTRL_DBGRUN_bit(const void *const hw, bool value)
{
    1ef2:	b480      	push	{r7}
    1ef4:	b085      	sub	sp, #20
    1ef6:	af00      	add	r7, sp, #0
    1ef8:	6078      	str	r0, [r7, #4]
    1efa:	460b      	mov	r3, r1
    1efc:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	7b5b      	ldrb	r3, [r3, #13]
    1f02:	73fb      	strb	r3, [r7, #15]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1f04:	7bfb      	ldrb	r3, [r7, #15]
    1f06:	f023 0301 	bic.w	r3, r3, #1
    1f0a:	73fb      	strb	r3, [r7, #15]
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    1f0c:	78fa      	ldrb	r2, [r7, #3]
    1f0e:	7bfb      	ldrb	r3, [r7, #15]
    1f10:	4313      	orrs	r3, r2
    1f12:	73fb      	strb	r3, [r7, #15]
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    1f14:	687b      	ldr	r3, [r7, #4]
    1f16:	7bfa      	ldrb	r2, [r7, #15]
    1f18:	735a      	strb	r2, [r3, #13]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1f1a:	bf00      	nop
    1f1c:	3714      	adds	r7, #20
    1f1e:	46bd      	mov	sp, r7
    1f20:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f24:	4770      	bx	lr

00001f26 <hri_dmac_set_SWTRIGCTRL_reg>:
	((Dmac *)hw)->SWTRIGCTRL.reg ^= DMAC_SWTRIGCTRL_SWTRIG31;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_dmac_set_SWTRIGCTRL_reg(const void *const hw, hri_dmac_swtrigctrl_reg_t mask)
{
    1f26:	b480      	push	{r7}
    1f28:	b083      	sub	sp, #12
    1f2a:	af00      	add	r7, sp, #0
    1f2c:	6078      	str	r0, [r7, #4]
    1f2e:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    1f30:	687b      	ldr	r3, [r7, #4]
    1f32:	691a      	ldr	r2, [r3, #16]
    1f34:	683b      	ldr	r3, [r7, #0]
    1f36:	431a      	orrs	r2, r3
    1f38:	687b      	ldr	r3, [r7, #4]
    1f3a:	611a      	str	r2, [r3, #16]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1f3c:	bf00      	nop
    1f3e:	370c      	adds	r7, #12
    1f40:	46bd      	mov	sp, r7
    1f42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f46:	4770      	bx	lr

00001f48 <hri_dmac_write_PRICTRL0_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_PRICTRL0_reg(const void *const hw, hri_dmac_prictrl0_reg_t data)
{
    1f48:	b480      	push	{r7}
    1f4a:	b083      	sub	sp, #12
    1f4c:	af00      	add	r7, sp, #0
    1f4e:	6078      	str	r0, [r7, #4]
    1f50:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->PRICTRL0.reg = data;
    1f52:	687b      	ldr	r3, [r7, #4]
    1f54:	683a      	ldr	r2, [r7, #0]
    1f56:	615a      	str	r2, [r3, #20]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1f58:	bf00      	nop
    1f5a:	370c      	adds	r7, #12
    1f5c:	46bd      	mov	sp, r7
    1f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f62:	4770      	bx	lr

00001f64 <hri_dmac_get_INTPEND_reg>:
	((Dmac *)hw)->INTPEND.reg |= mask;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
    1f64:	b480      	push	{r7}
    1f66:	b085      	sub	sp, #20
    1f68:	af00      	add	r7, sp, #0
    1f6a:	6078      	str	r0, [r7, #4]
    1f6c:	460b      	mov	r3, r1
    1f6e:	807b      	strh	r3, [r7, #2]
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
    1f70:	687b      	ldr	r3, [r7, #4]
    1f72:	8c1b      	ldrh	r3, [r3, #32]
    1f74:	81fb      	strh	r3, [r7, #14]
	tmp &= mask;
    1f76:	89fa      	ldrh	r2, [r7, #14]
    1f78:	887b      	ldrh	r3, [r7, #2]
    1f7a:	4013      	ands	r3, r2
    1f7c:	81fb      	strh	r3, [r7, #14]
	return tmp;
    1f7e:	89fb      	ldrh	r3, [r7, #14]
}
    1f80:	4618      	mov	r0, r3
    1f82:	3714      	adds	r7, #20
    1f84:	46bd      	mov	sp, r7
    1f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f8a:	4770      	bx	lr

00001f8c <hri_dmac_write_BASEADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_BASEADDR_reg(const void *const hw, hri_dmac_baseaddr_reg_t data)
{
    1f8c:	b480      	push	{r7}
    1f8e:	b083      	sub	sp, #12
    1f90:	af00      	add	r7, sp, #0
    1f92:	6078      	str	r0, [r7, #4]
    1f94:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->BASEADDR.reg = data;
    1f96:	687b      	ldr	r3, [r7, #4]
    1f98:	683a      	ldr	r2, [r7, #0]
    1f9a:	635a      	str	r2, [r3, #52]	; 0x34
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1f9c:	bf00      	nop
    1f9e:	370c      	adds	r7, #12
    1fa0:	46bd      	mov	sp, r7
    1fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fa6:	4770      	bx	lr

00001fa8 <hri_dmac_write_WRBADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmac_write_WRBADDR_reg(const void *const hw, hri_dmac_wrbaddr_reg_t data)
{
    1fa8:	b480      	push	{r7}
    1faa:	b083      	sub	sp, #12
    1fac:	af00      	add	r7, sp, #0
    1fae:	6078      	str	r0, [r7, #4]
    1fb0:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->WRBADDR.reg = data;
    1fb2:	687b      	ldr	r3, [r7, #4]
    1fb4:	683a      	ldr	r2, [r7, #0]
    1fb6:	639a      	str	r2, [r3, #56]	; 0x38
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1fb8:	bf00      	nop
    1fba:	370c      	adds	r7, #12
    1fbc:	46bd      	mov	sp, r7
    1fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fc2:	4770      	bx	lr

00001fc4 <hri_dmacdescriptor_set_BTCTRL_VALID_bit>:
{
	return ((Dmac *)hw)->CRCSTATUS.reg;
}

static inline void hri_dmacdescriptor_set_BTCTRL_VALID_bit(const void *const hw)
{
    1fc4:	b480      	push	{r7}
    1fc6:	b083      	sub	sp, #12
    1fc8:	af00      	add	r7, sp, #0
    1fca:	6078      	str	r0, [r7, #4]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1fcc:	687b      	ldr	r3, [r7, #4]
    1fce:	881b      	ldrh	r3, [r3, #0]
    1fd0:	b29b      	uxth	r3, r3
    1fd2:	f043 0301 	orr.w	r3, r3, #1
    1fd6:	b29a      	uxth	r2, r3
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    1fdc:	bf00      	nop
    1fde:	370c      	adds	r7, #12
    1fe0:	46bd      	mov	sp, r7
    1fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
    1fe6:	4770      	bx	lr

00001fe8 <hri_dmacdescriptor_get_BTCTRL_SRCINC_bit>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_SRCINC;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(const void *const hw)
{
    1fe8:	b480      	push	{r7}
    1fea:	b085      	sub	sp, #20
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	881b      	ldrh	r3, [r3, #0]
    1ff4:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & DMAC_BTCTRL_SRCINC) >> DMAC_BTCTRL_SRCINC_Pos;
    1ff6:	89fb      	ldrh	r3, [r7, #14]
    1ff8:	0a9b      	lsrs	r3, r3, #10
    1ffa:	b29b      	uxth	r3, r3
    1ffc:	f003 0301 	and.w	r3, r3, #1
    2000:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    2002:	89fb      	ldrh	r3, [r7, #14]
    2004:	2b00      	cmp	r3, #0
    2006:	bf14      	ite	ne
    2008:	2301      	movne	r3, #1
    200a:	2300      	moveq	r3, #0
    200c:	b2db      	uxtb	r3, r3
}
    200e:	4618      	mov	r0, r3
    2010:	3714      	adds	r7, #20
    2012:	46bd      	mov	sp, r7
    2014:	f85d 7b04 	ldr.w	r7, [sp], #4
    2018:	4770      	bx	lr

0000201a <hri_dmacdescriptor_write_BTCTRL_SRCINC_bit>:

static inline void hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(const void *const hw, bool value)
{
    201a:	b480      	push	{r7}
    201c:	b085      	sub	sp, #20
    201e:	af00      	add	r7, sp, #0
    2020:	6078      	str	r0, [r7, #4]
    2022:	460b      	mov	r3, r1
    2024:	70fb      	strb	r3, [r7, #3]
	uint16_t tmp;
	DMAC_CRITICAL_SECTION_ENTER();
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2026:	687b      	ldr	r3, [r7, #4]
    2028:	881b      	ldrh	r3, [r3, #0]
    202a:	81fb      	strh	r3, [r7, #14]
	tmp &= ~DMAC_BTCTRL_SRCINC;
    202c:	89fb      	ldrh	r3, [r7, #14]
    202e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    2032:	81fb      	strh	r3, [r7, #14]
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    2034:	78fb      	ldrb	r3, [r7, #3]
    2036:	029b      	lsls	r3, r3, #10
    2038:	b21a      	sxth	r2, r3
    203a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    203e:	4313      	orrs	r3, r2
    2040:	b21b      	sxth	r3, r3
    2042:	81fb      	strh	r3, [r7, #14]
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    2044:	687b      	ldr	r3, [r7, #4]
    2046:	89fa      	ldrh	r2, [r7, #14]
    2048:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    204a:	bf00      	nop
    204c:	3714      	adds	r7, #20
    204e:	46bd      	mov	sp, r7
    2050:	f85d 7b04 	ldr.w	r7, [sp], #4
    2054:	4770      	bx	lr

00002056 <hri_dmacdescriptor_get_BTCTRL_DSTINC_bit>:
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_DSTINC;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(const void *const hw)
{
    2056:	b480      	push	{r7}
    2058:	b085      	sub	sp, #20
    205a:	af00      	add	r7, sp, #0
    205c:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	881b      	ldrh	r3, [r3, #0]
    2062:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & DMAC_BTCTRL_DSTINC) >> DMAC_BTCTRL_DSTINC_Pos;
    2064:	89fb      	ldrh	r3, [r7, #14]
    2066:	0adb      	lsrs	r3, r3, #11
    2068:	b29b      	uxth	r3, r3
    206a:	f003 0301 	and.w	r3, r3, #1
    206e:	81fb      	strh	r3, [r7, #14]
	return (bool)tmp;
    2070:	89fb      	ldrh	r3, [r7, #14]
    2072:	2b00      	cmp	r3, #0
    2074:	bf14      	ite	ne
    2076:	2301      	movne	r3, #1
    2078:	2300      	moveq	r3, #0
    207a:	b2db      	uxtb	r3, r3
}
    207c:	4618      	mov	r0, r3
    207e:	3714      	adds	r7, #20
    2080:	46bd      	mov	sp, r7
    2082:	f85d 7b04 	ldr.w	r7, [sp], #4
    2086:	4770      	bx	lr

00002088 <hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf>:
	((DmacDescriptor *)hw)->BTCTRL.reg ^= DMAC_BTCTRL_BEATSIZE(mask);
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dmacdescriptor_btctrl_reg_t hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(const void *const hw)
{
    2088:	b480      	push	{r7}
    208a:	b085      	sub	sp, #20
    208c:	af00      	add	r7, sp, #0
    208e:	6078      	str	r0, [r7, #4]
	uint16_t tmp;
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    2090:	687b      	ldr	r3, [r7, #4]
    2092:	881b      	ldrh	r3, [r3, #0]
    2094:	81fb      	strh	r3, [r7, #14]
	tmp = (tmp & DMAC_BTCTRL_BEATSIZE_Msk) >> DMAC_BTCTRL_BEATSIZE_Pos;
    2096:	89fb      	ldrh	r3, [r7, #14]
    2098:	0a1b      	lsrs	r3, r3, #8
    209a:	b29b      	uxth	r3, r3
    209c:	f003 0303 	and.w	r3, r3, #3
    20a0:	81fb      	strh	r3, [r7, #14]
	return tmp;
    20a2:	89fb      	ldrh	r3, [r7, #14]
}
    20a4:	4618      	mov	r0, r3
    20a6:	3714      	adds	r7, #20
    20a8:	46bd      	mov	sp, r7
    20aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ae:	4770      	bx	lr

000020b0 <hri_dmacdescriptor_write_BTCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmacdescriptor_write_BTCTRL_reg(const void *const hw, hri_dmacdescriptor_btctrl_reg_t data)
{
    20b0:	b480      	push	{r7}
    20b2:	b083      	sub	sp, #12
    20b4:	af00      	add	r7, sp, #0
    20b6:	6078      	str	r0, [r7, #4]
    20b8:	460b      	mov	r3, r1
    20ba:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    20bc:	687b      	ldr	r3, [r7, #4]
    20be:	887a      	ldrh	r2, [r7, #2]
    20c0:	801a      	strh	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    20c2:	bf00      	nop
    20c4:	370c      	adds	r7, #12
    20c6:	46bd      	mov	sp, r7
    20c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    20cc:	4770      	bx	lr

000020ce <hri_dmacdescriptor_write_BTCNT_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmacdescriptor_write_BTCNT_reg(const void *const hw, hri_dmacdescriptor_btcnt_reg_t data)
{
    20ce:	b480      	push	{r7}
    20d0:	b083      	sub	sp, #12
    20d2:	af00      	add	r7, sp, #0
    20d4:	6078      	str	r0, [r7, #4]
    20d6:	460b      	mov	r3, r1
    20d8:	807b      	strh	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    20da:	687b      	ldr	r3, [r7, #4]
    20dc:	887a      	ldrh	r2, [r7, #2]
    20de:	805a      	strh	r2, [r3, #2]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    20e0:	bf00      	nop
    20e2:	370c      	adds	r7, #12
    20e4:	46bd      	mov	sp, r7
    20e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    20ea:	4770      	bx	lr

000020ec <hri_dmacdescriptor_write_SRCADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmacdescriptor_write_SRCADDR_reg(const void *const hw, hri_dmacdescriptor_srcaddr_reg_t data)
{
    20ec:	b480      	push	{r7}
    20ee:	b083      	sub	sp, #12
    20f0:	af00      	add	r7, sp, #0
    20f2:	6078      	str	r0, [r7, #4]
    20f4:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    20f6:	687b      	ldr	r3, [r7, #4]
    20f8:	683a      	ldr	r2, [r7, #0]
    20fa:	605a      	str	r2, [r3, #4]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    20fc:	bf00      	nop
    20fe:	370c      	adds	r7, #12
    2100:	46bd      	mov	sp, r7
    2102:	f85d 7b04 	ldr.w	r7, [sp], #4
    2106:	4770      	bx	lr

00002108 <hri_dmacdescriptor_read_SRCADDR_reg>:
	((DmacDescriptor *)hw)->SRCADDR.reg ^= mask;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dmacdescriptor_srcaddr_reg_t hri_dmacdescriptor_read_SRCADDR_reg(const void *const hw)
{
    2108:	b480      	push	{r7}
    210a:	b083      	sub	sp, #12
    210c:	af00      	add	r7, sp, #0
    210e:	6078      	str	r0, [r7, #4]
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    2110:	687b      	ldr	r3, [r7, #4]
    2112:	685b      	ldr	r3, [r3, #4]
}
    2114:	4618      	mov	r0, r3
    2116:	370c      	adds	r7, #12
    2118:	46bd      	mov	sp, r7
    211a:	f85d 7b04 	ldr.w	r7, [sp], #4
    211e:	4770      	bx	lr

00002120 <hri_dmacdescriptor_write_DSTADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_dmacdescriptor_write_DSTADDR_reg(const void *const hw, hri_dmacdescriptor_dstaddr_reg_t data)
{
    2120:	b480      	push	{r7}
    2122:	b083      	sub	sp, #12
    2124:	af00      	add	r7, sp, #0
    2126:	6078      	str	r0, [r7, #4]
    2128:	6039      	str	r1, [r7, #0]
	DMAC_CRITICAL_SECTION_ENTER();
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    212a:	687b      	ldr	r3, [r7, #4]
    212c:	683a      	ldr	r2, [r7, #0]
    212e:	609a      	str	r2, [r3, #8]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2130:	bf00      	nop
    2132:	370c      	adds	r7, #12
    2134:	46bd      	mov	sp, r7
    2136:	f85d 7b04 	ldr.w	r7, [sp], #4
    213a:	4770      	bx	lr

0000213c <hri_dmacdescriptor_read_DSTADDR_reg>:
	((DmacDescriptor *)hw)->DSTADDR.reg ^= mask;
	DMAC_CRITICAL_SECTION_LEAVE();
}

static inline hri_dmacdescriptor_dstaddr_reg_t hri_dmacdescriptor_read_DSTADDR_reg(const void *const hw)
{
    213c:	b480      	push	{r7}
    213e:	b083      	sub	sp, #12
    2140:	af00      	add	r7, sp, #0
    2142:	6078      	str	r0, [r7, #4]
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    2144:	687b      	ldr	r3, [r7, #4]
    2146:	689b      	ldr	r3, [r3, #8]
}
    2148:	4618      	mov	r0, r3
    214a:	370c      	adds	r7, #12
    214c:	46bd      	mov	sp, r7
    214e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2152:	4770      	bx	lr

00002154 <hri_dmac_get_CHINTFLAG_TERR_bit>:
{
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
    2154:	b480      	push	{r7}
    2156:	b083      	sub	sp, #12
    2158:	af00      	add	r7, sp, #0
    215a:	6078      	str	r0, [r7, #4]
    215c:	460b      	mov	r3, r1
    215e:	70fb      	strb	r3, [r7, #3]
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
    2160:	78fb      	ldrb	r3, [r7, #3]
    2162:	687a      	ldr	r2, [r7, #4]
    2164:	011b      	lsls	r3, r3, #4
    2166:	4413      	add	r3, r2
    2168:	334e      	adds	r3, #78	; 0x4e
    216a:	781b      	ldrb	r3, [r3, #0]
    216c:	b2db      	uxtb	r3, r3
    216e:	f003 0301 	and.w	r3, r3, #1
    2172:	2b00      	cmp	r3, #0
    2174:	bf14      	ite	ne
    2176:	2301      	movne	r3, #1
    2178:	2300      	moveq	r3, #0
    217a:	b2db      	uxtb	r3, r3
}
    217c:	4618      	mov	r0, r3
    217e:	370c      	adds	r7, #12
    2180:	46bd      	mov	sp, r7
    2182:	f85d 7b04 	ldr.w	r7, [sp], #4
    2186:	4770      	bx	lr

00002188 <hri_dmac_clear_CHINTFLAG_TERR_bit>:

static inline void hri_dmac_clear_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
    2188:	b480      	push	{r7}
    218a:	b083      	sub	sp, #12
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
    2190:	460b      	mov	r3, r1
    2192:	70fb      	strb	r3, [r7, #3]
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
    2194:	78fb      	ldrb	r3, [r7, #3]
    2196:	687a      	ldr	r2, [r7, #4]
    2198:	011b      	lsls	r3, r3, #4
    219a:	4413      	add	r3, r2
    219c:	334e      	adds	r3, #78	; 0x4e
    219e:	2201      	movs	r2, #1
    21a0:	701a      	strb	r2, [r3, #0]
}
    21a2:	bf00      	nop
    21a4:	370c      	adds	r7, #12
    21a6:	46bd      	mov	sp, r7
    21a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    21ac:	4770      	bx	lr

000021ae <hri_dmac_get_CHINTFLAG_TCMPL_bit>:

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
    21ae:	b480      	push	{r7}
    21b0:	b083      	sub	sp, #12
    21b2:	af00      	add	r7, sp, #0
    21b4:	6078      	str	r0, [r7, #4]
    21b6:	460b      	mov	r3, r1
    21b8:	70fb      	strb	r3, [r7, #3]
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
    21ba:	78fb      	ldrb	r3, [r7, #3]
    21bc:	687a      	ldr	r2, [r7, #4]
    21be:	011b      	lsls	r3, r3, #4
    21c0:	4413      	add	r3, r2
    21c2:	334e      	adds	r3, #78	; 0x4e
    21c4:	781b      	ldrb	r3, [r3, #0]
    21c6:	b2db      	uxtb	r3, r3
    21c8:	085b      	lsrs	r3, r3, #1
    21ca:	f003 0301 	and.w	r3, r3, #1
    21ce:	2b00      	cmp	r3, #0
    21d0:	bf14      	ite	ne
    21d2:	2301      	movne	r3, #1
    21d4:	2300      	moveq	r3, #0
    21d6:	b2db      	uxtb	r3, r3
}
    21d8:	4618      	mov	r0, r3
    21da:	370c      	adds	r7, #12
    21dc:	46bd      	mov	sp, r7
    21de:	f85d 7b04 	ldr.w	r7, [sp], #4
    21e2:	4770      	bx	lr

000021e4 <hri_dmac_clear_CHINTFLAG_TCMPL_bit>:

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
    21e4:	b480      	push	{r7}
    21e6:	b083      	sub	sp, #12
    21e8:	af00      	add	r7, sp, #0
    21ea:	6078      	str	r0, [r7, #4]
    21ec:	460b      	mov	r3, r1
    21ee:	70fb      	strb	r3, [r7, #3]
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
    21f0:	78fb      	ldrb	r3, [r7, #3]
    21f2:	687a      	ldr	r2, [r7, #4]
    21f4:	011b      	lsls	r3, r3, #4
    21f6:	4413      	add	r3, r2
    21f8:	334e      	adds	r3, #78	; 0x4e
    21fa:	2202      	movs	r2, #2
    21fc:	701a      	strb	r2, [r3, #0]
}
    21fe:	bf00      	nop
    2200:	370c      	adds	r7, #12
    2202:	46bd      	mov	sp, r7
    2204:	f85d 7b04 	ldr.w	r7, [sp], #4
    2208:	4770      	bx	lr

0000220a <hri_dmac_write_CHINTEN_TERR_bit>:
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg & DMAC_CHINTENSET_TERR) >> DMAC_CHINTENSET_TERR_Pos;
}

static inline void hri_dmac_write_CHINTEN_TERR_bit(const void *const hw, uint8_t submodule_index, bool value)
{
    220a:	b480      	push	{r7}
    220c:	b083      	sub	sp, #12
    220e:	af00      	add	r7, sp, #0
    2210:	6078      	str	r0, [r7, #4]
    2212:	460b      	mov	r3, r1
    2214:	70fb      	strb	r3, [r7, #3]
    2216:	4613      	mov	r3, r2
    2218:	70bb      	strb	r3, [r7, #2]
	if (value == 0x0) {
    221a:	78bb      	ldrb	r3, [r7, #2]
    221c:	f083 0301 	eor.w	r3, r3, #1
    2220:	b2db      	uxtb	r3, r3
    2222:	2b00      	cmp	r3, #0
    2224:	d007      	beq.n	2236 <hri_dmac_write_CHINTEN_TERR_bit+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    2226:	78fb      	ldrb	r3, [r7, #3]
    2228:	687a      	ldr	r2, [r7, #4]
    222a:	011b      	lsls	r3, r3, #4
    222c:	4413      	add	r3, r2
    222e:	334c      	adds	r3, #76	; 0x4c
    2230:	2201      	movs	r2, #1
    2232:	701a      	strb	r2, [r3, #0]
	} else {
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
	}
}
    2234:	e006      	b.n	2244 <hri_dmac_write_CHINTEN_TERR_bit+0x3a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    2236:	78fb      	ldrb	r3, [r7, #3]
    2238:	687a      	ldr	r2, [r7, #4]
    223a:	011b      	lsls	r3, r3, #4
    223c:	4413      	add	r3, r2
    223e:	334d      	adds	r3, #77	; 0x4d
    2240:	2201      	movs	r2, #1
    2242:	701a      	strb	r2, [r3, #0]
}
    2244:	bf00      	nop
    2246:	370c      	adds	r7, #12
    2248:	46bd      	mov	sp, r7
    224a:	f85d 7b04 	ldr.w	r7, [sp], #4
    224e:	4770      	bx	lr

00002250 <hri_dmac_write_CHINTEN_TCMPL_bit>:
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg & DMAC_CHINTENSET_TCMPL) >> DMAC_CHINTENSET_TCMPL_Pos;
}

static inline void hri_dmac_write_CHINTEN_TCMPL_bit(const void *const hw, uint8_t submodule_index, bool value)
{
    2250:	b480      	push	{r7}
    2252:	b083      	sub	sp, #12
    2254:	af00      	add	r7, sp, #0
    2256:	6078      	str	r0, [r7, #4]
    2258:	460b      	mov	r3, r1
    225a:	70fb      	strb	r3, [r7, #3]
    225c:	4613      	mov	r3, r2
    225e:	70bb      	strb	r3, [r7, #2]
	if (value == 0x0) {
    2260:	78bb      	ldrb	r3, [r7, #2]
    2262:	f083 0301 	eor.w	r3, r3, #1
    2266:	b2db      	uxtb	r3, r3
    2268:	2b00      	cmp	r3, #0
    226a:	d007      	beq.n	227c <hri_dmac_write_CHINTEN_TCMPL_bit+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    226c:	78fb      	ldrb	r3, [r7, #3]
    226e:	687a      	ldr	r2, [r7, #4]
    2270:	011b      	lsls	r3, r3, #4
    2272:	4413      	add	r3, r2
    2274:	334c      	adds	r3, #76	; 0x4c
    2276:	2202      	movs	r2, #2
    2278:	701a      	strb	r2, [r3, #0]
	} else {
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
	}
}
    227a:	e006      	b.n	228a <hri_dmac_write_CHINTEN_TCMPL_bit+0x3a>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    227c:	78fb      	ldrb	r3, [r7, #3]
    227e:	687a      	ldr	r2, [r7, #4]
    2280:	011b      	lsls	r3, r3, #4
    2282:	4413      	add	r3, r2
    2284:	334d      	adds	r3, #77	; 0x4d
    2286:	2202      	movs	r2, #2
    2288:	701a      	strb	r2, [r3, #0]
}
    228a:	bf00      	nop
    228c:	370c      	adds	r7, #12
    228e:	46bd      	mov	sp, r7
    2290:	f85d 7b04 	ldr.w	r7, [sp], #4
    2294:	4770      	bx	lr

00002296 <hri_dmac_set_CHCTRLA_ENABLE_bit>:
	tmp = (tmp & DMAC_CHCTRLA_SWRST) >> DMAC_CHCTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_dmac_set_CHCTRLA_ENABLE_bit(const void *const hw, uint8_t submodule_index)
{
    2296:	b480      	push	{r7}
    2298:	b083      	sub	sp, #12
    229a:	af00      	add	r7, sp, #0
    229c:	6078      	str	r0, [r7, #4]
    229e:	460b      	mov	r3, r1
    22a0:	70fb      	strb	r3, [r7, #3]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    22a2:	78fb      	ldrb	r3, [r7, #3]
    22a4:	78fa      	ldrb	r2, [r7, #3]
    22a6:	6879      	ldr	r1, [r7, #4]
    22a8:	3204      	adds	r2, #4
    22aa:	0112      	lsls	r2, r2, #4
    22ac:	440a      	add	r2, r1
    22ae:	6812      	ldr	r2, [r2, #0]
    22b0:	f042 0202 	orr.w	r2, r2, #2
    22b4:	6879      	ldr	r1, [r7, #4]
    22b6:	3304      	adds	r3, #4
    22b8:	011b      	lsls	r3, r3, #4
    22ba:	440b      	add	r3, r1
    22bc:	601a      	str	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    22be:	bf00      	nop
    22c0:	370c      	adds	r7, #12
    22c2:	46bd      	mov	sp, r7
    22c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    22c8:	4770      	bx	lr

000022ca <hri_dmac_write_CHCTRLA_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
    22ca:	b480      	push	{r7}
    22cc:	b085      	sub	sp, #20
    22ce:	af00      	add	r7, sp, #0
    22d0:	60f8      	str	r0, [r7, #12]
    22d2:	460b      	mov	r3, r1
    22d4:	607a      	str	r2, [r7, #4]
    22d6:	72fb      	strb	r3, [r7, #11]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    22d8:	7afb      	ldrb	r3, [r7, #11]
    22da:	68fa      	ldr	r2, [r7, #12]
    22dc:	3304      	adds	r3, #4
    22de:	011b      	lsls	r3, r3, #4
    22e0:	4413      	add	r3, r2
    22e2:	687a      	ldr	r2, [r7, #4]
    22e4:	601a      	str	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    22e6:	bf00      	nop
    22e8:	3714      	adds	r7, #20
    22ea:	46bd      	mov	sp, r7
    22ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    22f0:	4770      	bx	lr

000022f2 <hri_dmac_write_CHPRILVL_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
    22f2:	b480      	push	{r7}
    22f4:	b083      	sub	sp, #12
    22f6:	af00      	add	r7, sp, #0
    22f8:	6078      	str	r0, [r7, #4]
    22fa:	460b      	mov	r3, r1
    22fc:	70fb      	strb	r3, [r7, #3]
    22fe:	4613      	mov	r3, r2
    2300:	70bb      	strb	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    2302:	78fb      	ldrb	r3, [r7, #3]
    2304:	687a      	ldr	r2, [r7, #4]
    2306:	3304      	adds	r3, #4
    2308:	011b      	lsls	r3, r3, #4
    230a:	4413      	add	r3, r2
    230c:	3305      	adds	r3, #5
    230e:	78ba      	ldrb	r2, [r7, #2]
    2310:	701a      	strb	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    2312:	bf00      	nop
    2314:	370c      	adds	r7, #12
    2316:	46bd      	mov	sp, r7
    2318:	f85d 7b04 	ldr.w	r7, [sp], #4
    231c:	4770      	bx	lr

0000231e <hri_dmac_write_CHEVCTRL_reg>:
	return tmp;
}

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
    231e:	b480      	push	{r7}
    2320:	b083      	sub	sp, #12
    2322:	af00      	add	r7, sp, #0
    2324:	6078      	str	r0, [r7, #4]
    2326:	460b      	mov	r3, r1
    2328:	70fb      	strb	r3, [r7, #3]
    232a:	4613      	mov	r3, r2
    232c:	70bb      	strb	r3, [r7, #2]
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    232e:	78fb      	ldrb	r3, [r7, #3]
    2330:	687a      	ldr	r2, [r7, #4]
    2332:	3304      	adds	r3, #4
    2334:	011b      	lsls	r3, r3, #4
    2336:	4413      	add	r3, r2
    2338:	3306      	adds	r3, #6
    233a:	78ba      	ldrb	r2, [r7, #2]
    233c:	701a      	strb	r2, [r3, #0]
	DMAC_CRITICAL_SECTION_LEAVE();
}
    233e:	bf00      	nop
    2340:	370c      	adds	r7, #12
    2342:	46bd      	mov	sp, r7
    2344:	f85d 7b04 	ldr.w	r7, [sp], #4
    2348:	4770      	bx	lr
	...

0000234c <_dma_init>:

/**
 * \brief Initialize DMAC
 */
int32_t _dma_init(void)
{
    234c:	b580      	push	{r7, lr}
    234e:	b082      	sub	sp, #8
    2350:	af00      	add	r7, sp, #0
	uint8_t i;

	hri_dmac_clear_CTRL_DMAENABLE_bit(DMAC);
    2352:	4842      	ldr	r0, [pc, #264]	; (245c <_dma_init+0x110>)
    2354:	4b42      	ldr	r3, [pc, #264]	; (2460 <_dma_init+0x114>)
    2356:	4798      	blx	r3
	hri_dmac_clear_CRCCTRL_reg(DMAC, DMAC_CRCCTRL_CRCSRC_Msk);
    2358:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    235c:	483f      	ldr	r0, [pc, #252]	; (245c <_dma_init+0x110>)
    235e:	4b41      	ldr	r3, [pc, #260]	; (2464 <_dma_init+0x118>)
    2360:	4798      	blx	r3
	hri_dmac_set_CTRL_SWRST_bit(DMAC);
    2362:	483e      	ldr	r0, [pc, #248]	; (245c <_dma_init+0x110>)
    2364:	4b40      	ldr	r3, [pc, #256]	; (2468 <_dma_init+0x11c>)
    2366:	4798      	blx	r3
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    2368:	bf00      	nop
    236a:	483c      	ldr	r0, [pc, #240]	; (245c <_dma_init+0x110>)
    236c:	4b3f      	ldr	r3, [pc, #252]	; (246c <_dma_init+0x120>)
    236e:	4798      	blx	r3
    2370:	4603      	mov	r3, r0
    2372:	2b00      	cmp	r3, #0
    2374:	d1f9      	bne.n	236a <_dma_init+0x1e>
		;

	hri_dmac_write_CTRL_reg(DMAC,
    2376:	f44f 7180 	mov.w	r1, #256	; 0x100
    237a:	4838      	ldr	r0, [pc, #224]	; (245c <_dma_init+0x110>)
    237c:	4b3c      	ldr	r3, [pc, #240]	; (2470 <_dma_init+0x124>)
    237e:	4798      	blx	r3
	                        (CONF_DMAC_LVLEN0 << DMAC_CTRL_LVLEN0_Pos) | (CONF_DMAC_LVLEN1 << DMAC_CTRL_LVLEN1_Pos)
	                            | (CONF_DMAC_LVLEN2 << DMAC_CTRL_LVLEN2_Pos)
	                            | (CONF_DMAC_LVLEN3 << DMAC_CTRL_LVLEN3_Pos));
	hri_dmac_write_DBGCTRL_DBGRUN_bit(DMAC, CONF_DMAC_DBGRUN);
    2380:	2101      	movs	r1, #1
    2382:	4836      	ldr	r0, [pc, #216]	; (245c <_dma_init+0x110>)
    2384:	4b3b      	ldr	r3, [pc, #236]	; (2474 <_dma_init+0x128>)
    2386:	4798      	blx	r3

	hri_dmac_write_PRICTRL0_reg(DMAC,
    2388:	2100      	movs	r1, #0
    238a:	4834      	ldr	r0, [pc, #208]	; (245c <_dma_init+0x110>)
    238c:	4b3a      	ldr	r3, [pc, #232]	; (2478 <_dma_init+0x12c>)
    238e:	4798      	blx	r3
	                                | DMAC_PRICTRL0_LVLPRI3(CONF_DMAC_LVLPRI3)
	                                | (CONF_DMAC_RRLVLEN0 << DMAC_PRICTRL0_RRLVLEN0_Pos)
	                                | (CONF_DMAC_RRLVLEN1 << DMAC_PRICTRL0_RRLVLEN1_Pos)
	                                | (CONF_DMAC_RRLVLEN2 << DMAC_PRICTRL0_RRLVLEN2_Pos)
	                                | (CONF_DMAC_RRLVLEN3 << DMAC_PRICTRL0_RRLVLEN3_Pos));
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    2390:	4b3a      	ldr	r3, [pc, #232]	; (247c <_dma_init+0x130>)
    2392:	4619      	mov	r1, r3
    2394:	4831      	ldr	r0, [pc, #196]	; (245c <_dma_init+0x110>)
    2396:	4b3a      	ldr	r3, [pc, #232]	; (2480 <_dma_init+0x134>)
    2398:	4798      	blx	r3
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    239a:	4b3a      	ldr	r3, [pc, #232]	; (2484 <_dma_init+0x138>)
    239c:	4619      	mov	r1, r3
    239e:	482f      	ldr	r0, [pc, #188]	; (245c <_dma_init+0x110>)
    23a0:	4b39      	ldr	r3, [pc, #228]	; (2488 <_dma_init+0x13c>)
    23a2:	4798      	blx	r3

	for (i = 0; i < DMAC_CH_NUM; i++) {
    23a4:	2300      	movs	r3, #0
    23a6:	71fb      	strb	r3, [r7, #7]
    23a8:	e02b      	b.n	2402 <_dma_init+0xb6>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    23aa:	79fb      	ldrb	r3, [r7, #7]
    23ac:	4a37      	ldr	r2, [pc, #220]	; (248c <_dma_init+0x140>)
    23ae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    23b2:	79fb      	ldrb	r3, [r7, #7]
    23b4:	4619      	mov	r1, r3
    23b6:	4829      	ldr	r0, [pc, #164]	; (245c <_dma_init+0x110>)
    23b8:	4b35      	ldr	r3, [pc, #212]	; (2490 <_dma_init+0x144>)
    23ba:	4798      	blx	r3
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    23bc:	79fb      	ldrb	r3, [r7, #7]
    23be:	4a33      	ldr	r2, [pc, #204]	; (248c <_dma_init+0x140>)
    23c0:	00db      	lsls	r3, r3, #3
    23c2:	4413      	add	r3, r2
    23c4:	791a      	ldrb	r2, [r3, #4]
    23c6:	79fb      	ldrb	r3, [r7, #7]
    23c8:	4619      	mov	r1, r3
    23ca:	4824      	ldr	r0, [pc, #144]	; (245c <_dma_init+0x110>)
    23cc:	4b31      	ldr	r3, [pc, #196]	; (2494 <_dma_init+0x148>)
    23ce:	4798      	blx	r3
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    23d0:	79fb      	ldrb	r3, [r7, #7]
    23d2:	4a2e      	ldr	r2, [pc, #184]	; (248c <_dma_init+0x140>)
    23d4:	00db      	lsls	r3, r3, #3
    23d6:	4413      	add	r3, r2
    23d8:	795a      	ldrb	r2, [r3, #5]
    23da:	79fb      	ldrb	r3, [r7, #7]
    23dc:	4619      	mov	r1, r3
    23de:	481f      	ldr	r0, [pc, #124]	; (245c <_dma_init+0x110>)
    23e0:	4b2d      	ldr	r3, [pc, #180]	; (2498 <_dma_init+0x14c>)
    23e2:	4798      	blx	r3
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    23e4:	79fb      	ldrb	r3, [r7, #7]
    23e6:	011b      	lsls	r3, r3, #4
    23e8:	4a24      	ldr	r2, [pc, #144]	; (247c <_dma_init+0x130>)
    23ea:	1898      	adds	r0, r3, r2
    23ec:	79fb      	ldrb	r3, [r7, #7]
    23ee:	4a27      	ldr	r2, [pc, #156]	; (248c <_dma_init+0x140>)
    23f0:	00db      	lsls	r3, r3, #3
    23f2:	4413      	add	r3, r2
    23f4:	88db      	ldrh	r3, [r3, #6]
    23f6:	4619      	mov	r1, r3
    23f8:	4b28      	ldr	r3, [pc, #160]	; (249c <_dma_init+0x150>)
    23fa:	4798      	blx	r3
	for (i = 0; i < DMAC_CH_NUM; i++) {
    23fc:	79fb      	ldrb	r3, [r7, #7]
    23fe:	3301      	adds	r3, #1
    2400:	71fb      	strb	r3, [r7, #7]
    2402:	79fb      	ldrb	r3, [r7, #7]
    2404:	2b1f      	cmp	r3, #31
    2406:	d9d0      	bls.n	23aa <_dma_init+0x5e>
	}

	for (i = 0; i < 5; i++) {
    2408:	2300      	movs	r3, #0
    240a:	71fb      	strb	r3, [r7, #7]
    240c:	e01a      	b.n	2444 <_dma_init+0xf8>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    240e:	79fb      	ldrb	r3, [r7, #7]
    2410:	b29b      	uxth	r3, r3
    2412:	331f      	adds	r3, #31
    2414:	b29b      	uxth	r3, r3
    2416:	b21b      	sxth	r3, r3
    2418:	4618      	mov	r0, r3
    241a:	4b21      	ldr	r3, [pc, #132]	; (24a0 <_dma_init+0x154>)
    241c:	4798      	blx	r3
		NVIC_ClearPendingIRQ(DMAC_0_IRQn + i);
    241e:	79fb      	ldrb	r3, [r7, #7]
    2420:	b29b      	uxth	r3, r3
    2422:	331f      	adds	r3, #31
    2424:	b29b      	uxth	r3, r3
    2426:	b21b      	sxth	r3, r3
    2428:	4618      	mov	r0, r3
    242a:	4b1e      	ldr	r3, [pc, #120]	; (24a4 <_dma_init+0x158>)
    242c:	4798      	blx	r3
		NVIC_EnableIRQ(DMAC_0_IRQn + i);
    242e:	79fb      	ldrb	r3, [r7, #7]
    2430:	b29b      	uxth	r3, r3
    2432:	331f      	adds	r3, #31
    2434:	b29b      	uxth	r3, r3
    2436:	b21b      	sxth	r3, r3
    2438:	4618      	mov	r0, r3
    243a:	4b1b      	ldr	r3, [pc, #108]	; (24a8 <_dma_init+0x15c>)
    243c:	4798      	blx	r3
	for (i = 0; i < 5; i++) {
    243e:	79fb      	ldrb	r3, [r7, #7]
    2440:	3301      	adds	r3, #1
    2442:	71fb      	strb	r3, [r7, #7]
    2444:	79fb      	ldrb	r3, [r7, #7]
    2446:	2b04      	cmp	r3, #4
    2448:	d9e1      	bls.n	240e <_dma_init+0xc2>
	}

	hri_dmac_set_CTRL_DMAENABLE_bit(DMAC);
    244a:	4804      	ldr	r0, [pc, #16]	; (245c <_dma_init+0x110>)
    244c:	4b17      	ldr	r3, [pc, #92]	; (24ac <_dma_init+0x160>)
    244e:	4798      	blx	r3

	return ERR_NONE;
    2450:	2300      	movs	r3, #0
}
    2452:	4618      	mov	r0, r3
    2454:	3708      	adds	r7, #8
    2456:	46bd      	mov	sp, r7
    2458:	bd80      	pop	{r7, pc}
    245a:	bf00      	nop
    245c:	4100a000 	.word	0x4100a000
    2460:	00001e7f 	.word	0x00001e7f
    2464:	00001ec1 	.word	0x00001ec1
    2468:	00001e09 	.word	0x00001e09
    246c:	00001e2d 	.word	0x00001e2d
    2470:	00001ea3 	.word	0x00001ea3
    2474:	00001ef3 	.word	0x00001ef3
    2478:	00001f49 	.word	0x00001f49
    247c:	200004f0 	.word	0x200004f0
    2480:	00001f8d 	.word	0x00001f8d
    2484:	200006f0 	.word	0x200006f0
    2488:	00001fa9 	.word	0x00001fa9
    248c:	00005cd8 	.word	0x00005cd8
    2490:	000022cb 	.word	0x000022cb
    2494:	000022f3 	.word	0x000022f3
    2498:	0000231f 	.word	0x0000231f
    249c:	000020b1 	.word	0x000020b1
    24a0:	00001d89 	.word	0x00001d89
    24a4:	00001dcd 	.word	0x00001dcd
    24a8:	00001d4d 	.word	0x00001d4d
    24ac:	00001e5b 	.word	0x00001e5b

000024b0 <_dma_set_irq_state>:

/**
 * \brief Enable/disable DMA interrupt
 */
void _dma_set_irq_state(const uint8_t channel, const enum _dma_callback_type type, const bool state)
{
    24b0:	b580      	push	{r7, lr}
    24b2:	b082      	sub	sp, #8
    24b4:	af00      	add	r7, sp, #0
    24b6:	4603      	mov	r3, r0
    24b8:	71fb      	strb	r3, [r7, #7]
    24ba:	460b      	mov	r3, r1
    24bc:	71bb      	strb	r3, [r7, #6]
    24be:	4613      	mov	r3, r2
    24c0:	717b      	strb	r3, [r7, #5]
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    24c2:	79bb      	ldrb	r3, [r7, #6]
    24c4:	2b00      	cmp	r3, #0
    24c6:	d106      	bne.n	24d6 <_dma_set_irq_state+0x26>
		hri_dmac_write_CHINTEN_TCMPL_bit(DMAC, channel, state);
    24c8:	797a      	ldrb	r2, [r7, #5]
    24ca:	79fb      	ldrb	r3, [r7, #7]
    24cc:	4619      	mov	r1, r3
    24ce:	4808      	ldr	r0, [pc, #32]	; (24f0 <_dma_set_irq_state+0x40>)
    24d0:	4b08      	ldr	r3, [pc, #32]	; (24f4 <_dma_set_irq_state+0x44>)
    24d2:	4798      	blx	r3
	} else if (DMA_TRANSFER_ERROR_CB == type) {
		hri_dmac_write_CHINTEN_TERR_bit(DMAC, channel, state);
	}
}
    24d4:	e008      	b.n	24e8 <_dma_set_irq_state+0x38>
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    24d6:	79bb      	ldrb	r3, [r7, #6]
    24d8:	2b01      	cmp	r3, #1
    24da:	d105      	bne.n	24e8 <_dma_set_irq_state+0x38>
		hri_dmac_write_CHINTEN_TERR_bit(DMAC, channel, state);
    24dc:	797a      	ldrb	r2, [r7, #5]
    24de:	79fb      	ldrb	r3, [r7, #7]
    24e0:	4619      	mov	r1, r3
    24e2:	4803      	ldr	r0, [pc, #12]	; (24f0 <_dma_set_irq_state+0x40>)
    24e4:	4b04      	ldr	r3, [pc, #16]	; (24f8 <_dma_set_irq_state+0x48>)
    24e6:	4798      	blx	r3
}
    24e8:	bf00      	nop
    24ea:	3708      	adds	r7, #8
    24ec:	46bd      	mov	sp, r7
    24ee:	bd80      	pop	{r7, pc}
    24f0:	4100a000 	.word	0x4100a000
    24f4:	00002251 	.word	0x00002251
    24f8:	0000220b 	.word	0x0000220b

000024fc <_dma_set_destination_address>:

int32_t _dma_set_destination_address(const uint8_t channel, const void *const dst)
{
    24fc:	b580      	push	{r7, lr}
    24fe:	b082      	sub	sp, #8
    2500:	af00      	add	r7, sp, #0
    2502:	4603      	mov	r3, r0
    2504:	6039      	str	r1, [r7, #0]
    2506:	71fb      	strb	r3, [r7, #7]
	hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], (uint32_t)dst);
    2508:	79fb      	ldrb	r3, [r7, #7]
    250a:	011b      	lsls	r3, r3, #4
    250c:	4a05      	ldr	r2, [pc, #20]	; (2524 <_dma_set_destination_address+0x28>)
    250e:	4413      	add	r3, r2
    2510:	683a      	ldr	r2, [r7, #0]
    2512:	4611      	mov	r1, r2
    2514:	4618      	mov	r0, r3
    2516:	4b04      	ldr	r3, [pc, #16]	; (2528 <_dma_set_destination_address+0x2c>)
    2518:	4798      	blx	r3

	return ERR_NONE;
    251a:	2300      	movs	r3, #0
}
    251c:	4618      	mov	r0, r3
    251e:	3708      	adds	r7, #8
    2520:	46bd      	mov	sp, r7
    2522:	bd80      	pop	{r7, pc}
    2524:	200004f0 	.word	0x200004f0
    2528:	00002121 	.word	0x00002121

0000252c <_dma_set_source_address>:

int32_t _dma_set_source_address(const uint8_t channel, const void *const src)
{
    252c:	b580      	push	{r7, lr}
    252e:	b082      	sub	sp, #8
    2530:	af00      	add	r7, sp, #0
    2532:	4603      	mov	r3, r0
    2534:	6039      	str	r1, [r7, #0]
    2536:	71fb      	strb	r3, [r7, #7]
	hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], (uint32_t)src);
    2538:	79fb      	ldrb	r3, [r7, #7]
    253a:	011b      	lsls	r3, r3, #4
    253c:	4a05      	ldr	r2, [pc, #20]	; (2554 <_dma_set_source_address+0x28>)
    253e:	4413      	add	r3, r2
    2540:	683a      	ldr	r2, [r7, #0]
    2542:	4611      	mov	r1, r2
    2544:	4618      	mov	r0, r3
    2546:	4b04      	ldr	r3, [pc, #16]	; (2558 <_dma_set_source_address+0x2c>)
    2548:	4798      	blx	r3

	return ERR_NONE;
    254a:	2300      	movs	r3, #0
}
    254c:	4618      	mov	r0, r3
    254e:	3708      	adds	r7, #8
    2550:	46bd      	mov	sp, r7
    2552:	bd80      	pop	{r7, pc}
    2554:	200004f0 	.word	0x200004f0
    2558:	000020ed 	.word	0x000020ed

0000255c <_dma_srcinc_enable>:

int32_t _dma_srcinc_enable(const uint8_t channel, const bool enable)
{
    255c:	b580      	push	{r7, lr}
    255e:	b082      	sub	sp, #8
    2560:	af00      	add	r7, sp, #0
    2562:	4603      	mov	r3, r0
    2564:	460a      	mov	r2, r1
    2566:	71fb      	strb	r3, [r7, #7]
    2568:	4613      	mov	r3, r2
    256a:	71bb      	strb	r3, [r7, #6]
	hri_dmacdescriptor_write_BTCTRL_SRCINC_bit(&_descriptor_section[channel], enable);
    256c:	79fb      	ldrb	r3, [r7, #7]
    256e:	011b      	lsls	r3, r3, #4
    2570:	4a05      	ldr	r2, [pc, #20]	; (2588 <_dma_srcinc_enable+0x2c>)
    2572:	4413      	add	r3, r2
    2574:	79ba      	ldrb	r2, [r7, #6]
    2576:	4611      	mov	r1, r2
    2578:	4618      	mov	r0, r3
    257a:	4b04      	ldr	r3, [pc, #16]	; (258c <_dma_srcinc_enable+0x30>)
    257c:	4798      	blx	r3

	return ERR_NONE;
    257e:	2300      	movs	r3, #0
}
    2580:	4618      	mov	r0, r3
    2582:	3708      	adds	r7, #8
    2584:	46bd      	mov	sp, r7
    2586:	bd80      	pop	{r7, pc}
    2588:	200004f0 	.word	0x200004f0
    258c:	0000201b 	.word	0x0000201b

00002590 <_dma_set_data_amount>:

int32_t _dma_set_data_amount(const uint8_t channel, const uint32_t amount)
{
    2590:	b580      	push	{r7, lr}
    2592:	b084      	sub	sp, #16
    2594:	af00      	add	r7, sp, #0
    2596:	4603      	mov	r3, r0
    2598:	6039      	str	r1, [r7, #0]
    259a:	71fb      	strb	r3, [r7, #7]
	uint32_t address   = hri_dmacdescriptor_read_DSTADDR_reg(&_descriptor_section[channel]);
    259c:	79fb      	ldrb	r3, [r7, #7]
    259e:	011b      	lsls	r3, r3, #4
    25a0:	4a28      	ldr	r2, [pc, #160]	; (2644 <_dma_set_data_amount+0xb4>)
    25a2:	4413      	add	r3, r2
    25a4:	4618      	mov	r0, r3
    25a6:	4b28      	ldr	r3, [pc, #160]	; (2648 <_dma_set_data_amount+0xb8>)
    25a8:	4798      	blx	r3
    25aa:	60f8      	str	r0, [r7, #12]
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    25ac:	79fb      	ldrb	r3, [r7, #7]
    25ae:	011b      	lsls	r3, r3, #4
    25b0:	4a24      	ldr	r2, [pc, #144]	; (2644 <_dma_set_data_amount+0xb4>)
    25b2:	4413      	add	r3, r2
    25b4:	4618      	mov	r0, r3
    25b6:	4b25      	ldr	r3, [pc, #148]	; (264c <_dma_set_data_amount+0xbc>)
    25b8:	4798      	blx	r3
    25ba:	4603      	mov	r3, r0
    25bc:	72fb      	strb	r3, [r7, #11]

	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    25be:	79fb      	ldrb	r3, [r7, #7]
    25c0:	011b      	lsls	r3, r3, #4
    25c2:	4a20      	ldr	r2, [pc, #128]	; (2644 <_dma_set_data_amount+0xb4>)
    25c4:	4413      	add	r3, r2
    25c6:	4618      	mov	r0, r3
    25c8:	4b21      	ldr	r3, [pc, #132]	; (2650 <_dma_set_data_amount+0xc0>)
    25ca:	4798      	blx	r3
    25cc:	4603      	mov	r3, r0
    25ce:	2b00      	cmp	r3, #0
    25d0:	d00b      	beq.n	25ea <_dma_set_data_amount+0x5a>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    25d2:	79fb      	ldrb	r3, [r7, #7]
    25d4:	011b      	lsls	r3, r3, #4
    25d6:	4a1b      	ldr	r2, [pc, #108]	; (2644 <_dma_set_data_amount+0xb4>)
    25d8:	1898      	adds	r0, r3, r2
    25da:	7afb      	ldrb	r3, [r7, #11]
    25dc:	683a      	ldr	r2, [r7, #0]
    25de:	409a      	lsls	r2, r3
    25e0:	68fb      	ldr	r3, [r7, #12]
    25e2:	4413      	add	r3, r2
    25e4:	4619      	mov	r1, r3
    25e6:	4b1b      	ldr	r3, [pc, #108]	; (2654 <_dma_set_data_amount+0xc4>)
    25e8:	4798      	blx	r3
	}

	address = hri_dmacdescriptor_read_SRCADDR_reg(&_descriptor_section[channel]);
    25ea:	79fb      	ldrb	r3, [r7, #7]
    25ec:	011b      	lsls	r3, r3, #4
    25ee:	4a15      	ldr	r2, [pc, #84]	; (2644 <_dma_set_data_amount+0xb4>)
    25f0:	4413      	add	r3, r2
    25f2:	4618      	mov	r0, r3
    25f4:	4b18      	ldr	r3, [pc, #96]	; (2658 <_dma_set_data_amount+0xc8>)
    25f6:	4798      	blx	r3
    25f8:	60f8      	str	r0, [r7, #12]

	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    25fa:	79fb      	ldrb	r3, [r7, #7]
    25fc:	011b      	lsls	r3, r3, #4
    25fe:	4a11      	ldr	r2, [pc, #68]	; (2644 <_dma_set_data_amount+0xb4>)
    2600:	4413      	add	r3, r2
    2602:	4618      	mov	r0, r3
    2604:	4b15      	ldr	r3, [pc, #84]	; (265c <_dma_set_data_amount+0xcc>)
    2606:	4798      	blx	r3
    2608:	4603      	mov	r3, r0
    260a:	2b00      	cmp	r3, #0
    260c:	d00b      	beq.n	2626 <_dma_set_data_amount+0x96>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    260e:	79fb      	ldrb	r3, [r7, #7]
    2610:	011b      	lsls	r3, r3, #4
    2612:	4a0c      	ldr	r2, [pc, #48]	; (2644 <_dma_set_data_amount+0xb4>)
    2614:	1898      	adds	r0, r3, r2
    2616:	7afb      	ldrb	r3, [r7, #11]
    2618:	683a      	ldr	r2, [r7, #0]
    261a:	409a      	lsls	r2, r3
    261c:	68fb      	ldr	r3, [r7, #12]
    261e:	4413      	add	r3, r2
    2620:	4619      	mov	r1, r3
    2622:	4b0f      	ldr	r3, [pc, #60]	; (2660 <_dma_set_data_amount+0xd0>)
    2624:	4798      	blx	r3
	}

	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    2626:	79fb      	ldrb	r3, [r7, #7]
    2628:	011b      	lsls	r3, r3, #4
    262a:	4a06      	ldr	r2, [pc, #24]	; (2644 <_dma_set_data_amount+0xb4>)
    262c:	4413      	add	r3, r2
    262e:	683a      	ldr	r2, [r7, #0]
    2630:	b292      	uxth	r2, r2
    2632:	4611      	mov	r1, r2
    2634:	4618      	mov	r0, r3
    2636:	4b0b      	ldr	r3, [pc, #44]	; (2664 <_dma_set_data_amount+0xd4>)
    2638:	4798      	blx	r3

	return ERR_NONE;
    263a:	2300      	movs	r3, #0
}
    263c:	4618      	mov	r0, r3
    263e:	3710      	adds	r7, #16
    2640:	46bd      	mov	sp, r7
    2642:	bd80      	pop	{r7, pc}
    2644:	200004f0 	.word	0x200004f0
    2648:	0000213d 	.word	0x0000213d
    264c:	00002089 	.word	0x00002089
    2650:	00002057 	.word	0x00002057
    2654:	00002121 	.word	0x00002121
    2658:	00002109 	.word	0x00002109
    265c:	00001fe9 	.word	0x00001fe9
    2660:	000020ed 	.word	0x000020ed
    2664:	000020cf 	.word	0x000020cf

00002668 <_dma_enable_transaction>:

int32_t _dma_enable_transaction(const uint8_t channel, const bool software_trigger)
{
    2668:	b580      	push	{r7, lr}
    266a:	b082      	sub	sp, #8
    266c:	af00      	add	r7, sp, #0
    266e:	4603      	mov	r3, r0
    2670:	460a      	mov	r2, r1
    2672:	71fb      	strb	r3, [r7, #7]
    2674:	4613      	mov	r3, r2
    2676:	71bb      	strb	r3, [r7, #6]
	hri_dmacdescriptor_set_BTCTRL_VALID_bit(&_descriptor_section[channel]);
    2678:	79fb      	ldrb	r3, [r7, #7]
    267a:	011b      	lsls	r3, r3, #4
    267c:	4a0c      	ldr	r2, [pc, #48]	; (26b0 <_dma_enable_transaction+0x48>)
    267e:	4413      	add	r3, r2
    2680:	4618      	mov	r0, r3
    2682:	4b0c      	ldr	r3, [pc, #48]	; (26b4 <_dma_enable_transaction+0x4c>)
    2684:	4798      	blx	r3
	hri_dmac_set_CHCTRLA_ENABLE_bit(DMAC, channel);
    2686:	79fb      	ldrb	r3, [r7, #7]
    2688:	4619      	mov	r1, r3
    268a:	480b      	ldr	r0, [pc, #44]	; (26b8 <_dma_enable_transaction+0x50>)
    268c:	4b0b      	ldr	r3, [pc, #44]	; (26bc <_dma_enable_transaction+0x54>)
    268e:	4798      	blx	r3

	if (software_trigger) {
    2690:	79bb      	ldrb	r3, [r7, #6]
    2692:	2b00      	cmp	r3, #0
    2694:	d007      	beq.n	26a6 <_dma_enable_transaction+0x3e>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    2696:	79fb      	ldrb	r3, [r7, #7]
    2698:	2201      	movs	r2, #1
    269a:	fa02 f303 	lsl.w	r3, r2, r3
    269e:	4619      	mov	r1, r3
    26a0:	4805      	ldr	r0, [pc, #20]	; (26b8 <_dma_enable_transaction+0x50>)
    26a2:	4b07      	ldr	r3, [pc, #28]	; (26c0 <_dma_enable_transaction+0x58>)
    26a4:	4798      	blx	r3
	}

	return ERR_NONE;
    26a6:	2300      	movs	r3, #0
}
    26a8:	4618      	mov	r0, r3
    26aa:	3708      	adds	r7, #8
    26ac:	46bd      	mov	sp, r7
    26ae:	bd80      	pop	{r7, pc}
    26b0:	200004f0 	.word	0x200004f0
    26b4:	00001fc5 	.word	0x00001fc5
    26b8:	4100a000 	.word	0x4100a000
    26bc:	00002297 	.word	0x00002297
    26c0:	00001f27 	.word	0x00001f27

000026c4 <_dma_get_channel_resource>:

int32_t _dma_get_channel_resource(struct _dma_resource **resource, const uint8_t channel)
{
    26c4:	b480      	push	{r7}
    26c6:	b083      	sub	sp, #12
    26c8:	af00      	add	r7, sp, #0
    26ca:	6078      	str	r0, [r7, #4]
    26cc:	460b      	mov	r3, r1
    26ce:	70fb      	strb	r3, [r7, #3]
	*resource = &_resources[channel];
    26d0:	78fa      	ldrb	r2, [r7, #3]
    26d2:	4613      	mov	r3, r2
    26d4:	005b      	lsls	r3, r3, #1
    26d6:	4413      	add	r3, r2
    26d8:	009b      	lsls	r3, r3, #2
    26da:	4a05      	ldr	r2, [pc, #20]	; (26f0 <_dma_get_channel_resource+0x2c>)
    26dc:	441a      	add	r2, r3
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	601a      	str	r2, [r3, #0]

	return ERR_NONE;
    26e2:	2300      	movs	r3, #0
}
    26e4:	4618      	mov	r0, r3
    26e6:	370c      	adds	r7, #12
    26e8:	46bd      	mov	sp, r7
    26ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    26ee:	4770      	bx	lr
    26f0:	200008f0 	.word	0x200008f0

000026f4 <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
    26f4:	b580      	push	{r7, lr}
    26f6:	b082      	sub	sp, #8
    26f8:	af00      	add	r7, sp, #0
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
    26fa:	211f      	movs	r1, #31
    26fc:	481b      	ldr	r0, [pc, #108]	; (276c <_dmac_handler+0x78>)
    26fe:	4b1c      	ldr	r3, [pc, #112]	; (2770 <_dmac_handler+0x7c>)
    2700:	4798      	blx	r3
    2702:	4603      	mov	r3, r0
    2704:	71fb      	strb	r3, [r7, #7]
	struct _dma_resource *tmp_resource = &_resources[channel];
    2706:	79fa      	ldrb	r2, [r7, #7]
    2708:	4613      	mov	r3, r2
    270a:	005b      	lsls	r3, r3, #1
    270c:	4413      	add	r3, r2
    270e:	009b      	lsls	r3, r3, #2
    2710:	4a18      	ldr	r2, [pc, #96]	; (2774 <_dmac_handler+0x80>)
    2712:	4413      	add	r3, r2
    2714:	603b      	str	r3, [r7, #0]

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
    2716:	79fb      	ldrb	r3, [r7, #7]
    2718:	4619      	mov	r1, r3
    271a:	4814      	ldr	r0, [pc, #80]	; (276c <_dmac_handler+0x78>)
    271c:	4b16      	ldr	r3, [pc, #88]	; (2778 <_dmac_handler+0x84>)
    271e:	4798      	blx	r3
    2720:	4603      	mov	r3, r0
    2722:	2b00      	cmp	r3, #0
    2724:	d009      	beq.n	273a <_dmac_handler+0x46>
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
    2726:	79fb      	ldrb	r3, [r7, #7]
    2728:	4619      	mov	r1, r3
    272a:	4810      	ldr	r0, [pc, #64]	; (276c <_dmac_handler+0x78>)
    272c:	4b13      	ldr	r3, [pc, #76]	; (277c <_dmac_handler+0x88>)
    272e:	4798      	blx	r3
		tmp_resource->dma_cb.error(tmp_resource);
    2730:	683b      	ldr	r3, [r7, #0]
    2732:	685b      	ldr	r3, [r3, #4]
    2734:	6838      	ldr	r0, [r7, #0]
    2736:	4798      	blx	r3
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		flag_frame_captured = 1;
		tmp_resource->dma_cb.transfer_done(tmp_resource);
	}
}
    2738:	e013      	b.n	2762 <_dmac_handler+0x6e>
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
    273a:	79fb      	ldrb	r3, [r7, #7]
    273c:	4619      	mov	r1, r3
    273e:	480b      	ldr	r0, [pc, #44]	; (276c <_dmac_handler+0x78>)
    2740:	4b0f      	ldr	r3, [pc, #60]	; (2780 <_dmac_handler+0x8c>)
    2742:	4798      	blx	r3
    2744:	4603      	mov	r3, r0
    2746:	2b00      	cmp	r3, #0
    2748:	d00b      	beq.n	2762 <_dmac_handler+0x6e>
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
    274a:	79fb      	ldrb	r3, [r7, #7]
    274c:	4619      	mov	r1, r3
    274e:	4807      	ldr	r0, [pc, #28]	; (276c <_dmac_handler+0x78>)
    2750:	4b0c      	ldr	r3, [pc, #48]	; (2784 <_dmac_handler+0x90>)
    2752:	4798      	blx	r3
		flag_frame_captured = 1;
    2754:	4b0c      	ldr	r3, [pc, #48]	; (2788 <_dmac_handler+0x94>)
    2756:	2201      	movs	r2, #1
    2758:	601a      	str	r2, [r3, #0]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    275a:	683b      	ldr	r3, [r7, #0]
    275c:	681b      	ldr	r3, [r3, #0]
    275e:	6838      	ldr	r0, [r7, #0]
    2760:	4798      	blx	r3
}
    2762:	bf00      	nop
    2764:	3708      	adds	r7, #8
    2766:	46bd      	mov	sp, r7
    2768:	bd80      	pop	{r7, pc}
    276a:	bf00      	nop
    276c:	4100a000 	.word	0x4100a000
    2770:	00001f65 	.word	0x00001f65
    2774:	200008f0 	.word	0x200008f0
    2778:	00002155 	.word	0x00002155
    277c:	00002189 	.word	0x00002189
    2780:	000021af 	.word	0x000021af
    2784:	000021e5 	.word	0x000021e5
    2788:	20026290 	.word	0x20026290

0000278c <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    278c:	b580      	push	{r7, lr}
    278e:	af00      	add	r7, sp, #0
	_dmac_handler();
    2790:	4b01      	ldr	r3, [pc, #4]	; (2798 <DMAC_0_Handler+0xc>)
    2792:	4798      	blx	r3
}
    2794:	bf00      	nop
    2796:	bd80      	pop	{r7, pc}
    2798:	000026f5 	.word	0x000026f5

0000279c <DMAC_1_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    279c:	b580      	push	{r7, lr}
    279e:	af00      	add	r7, sp, #0
	_dmac_handler();
    27a0:	4b01      	ldr	r3, [pc, #4]	; (27a8 <DMAC_1_Handler+0xc>)
    27a2:	4798      	blx	r3
}
    27a4:	bf00      	nop
    27a6:	bd80      	pop	{r7, pc}
    27a8:	000026f5 	.word	0x000026f5

000027ac <DMAC_2_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    27ac:	b580      	push	{r7, lr}
    27ae:	af00      	add	r7, sp, #0
	_dmac_handler();
    27b0:	4b01      	ldr	r3, [pc, #4]	; (27b8 <DMAC_2_Handler+0xc>)
    27b2:	4798      	blx	r3
}
    27b4:	bf00      	nop
    27b6:	bd80      	pop	{r7, pc}
    27b8:	000026f5 	.word	0x000026f5

000027bc <DMAC_3_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    27bc:	b580      	push	{r7, lr}
    27be:	af00      	add	r7, sp, #0
	_dmac_handler();
    27c0:	4b01      	ldr	r3, [pc, #4]	; (27c8 <DMAC_3_Handler+0xc>)
    27c2:	4798      	blx	r3
}
    27c4:	bf00      	nop
    27c6:	bd80      	pop	{r7, pc}
    27c8:	000026f5 	.word	0x000026f5

000027cc <DMAC_4_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    27cc:	b580      	push	{r7, lr}
    27ce:	af00      	add	r7, sp, #0
	_dmac_handler();
    27d0:	4b01      	ldr	r3, [pc, #4]	; (27d8 <DMAC_4_Handler+0xc>)
    27d2:	4798      	blx	r3
}
    27d4:	bf00      	nop
    27d6:	bd80      	pop	{r7, pc}
    27d8:	000026f5 	.word	0x000026f5

000027dc <__NVIC_EnableIRQ>:
{
    27dc:	b480      	push	{r7}
    27de:	b083      	sub	sp, #12
    27e0:	af00      	add	r7, sp, #0
    27e2:	4603      	mov	r3, r0
    27e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    27e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    27ea:	2b00      	cmp	r3, #0
    27ec:	db0b      	blt.n	2806 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27ee:	4909      	ldr	r1, [pc, #36]	; (2814 <__NVIC_EnableIRQ+0x38>)
    27f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    27f4:	095b      	lsrs	r3, r3, #5
    27f6:	88fa      	ldrh	r2, [r7, #6]
    27f8:	f002 021f 	and.w	r2, r2, #31
    27fc:	2001      	movs	r0, #1
    27fe:	fa00 f202 	lsl.w	r2, r0, r2
    2802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2806:	bf00      	nop
    2808:	370c      	adds	r7, #12
    280a:	46bd      	mov	sp, r7
    280c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2810:	4770      	bx	lr
    2812:	bf00      	nop
    2814:	e000e100 	.word	0xe000e100

00002818 <__NVIC_DisableIRQ>:
{
    2818:	b480      	push	{r7}
    281a:	b083      	sub	sp, #12
    281c:	af00      	add	r7, sp, #0
    281e:	4603      	mov	r3, r0
    2820:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2826:	2b00      	cmp	r3, #0
    2828:	db10      	blt.n	284c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    282a:	490b      	ldr	r1, [pc, #44]	; (2858 <__NVIC_DisableIRQ+0x40>)
    282c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2830:	095b      	lsrs	r3, r3, #5
    2832:	88fa      	ldrh	r2, [r7, #6]
    2834:	f002 021f 	and.w	r2, r2, #31
    2838:	2001      	movs	r0, #1
    283a:	fa00 f202 	lsl.w	r2, r0, r2
    283e:	3320      	adds	r3, #32
    2840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    2844:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2848:	f3bf 8f6f 	isb	sy
}
    284c:	bf00      	nop
    284e:	370c      	adds	r7, #12
    2850:	46bd      	mov	sp, r7
    2852:	f85d 7b04 	ldr.w	r7, [sp], #4
    2856:	4770      	bx	lr
    2858:	e000e100 	.word	0xe000e100

0000285c <__NVIC_ClearPendingIRQ>:
{
    285c:	b480      	push	{r7}
    285e:	b083      	sub	sp, #12
    2860:	af00      	add	r7, sp, #0
    2862:	4603      	mov	r3, r0
    2864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    2866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    286a:	2b00      	cmp	r3, #0
    286c:	db0c      	blt.n	2888 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    286e:	4909      	ldr	r1, [pc, #36]	; (2894 <__NVIC_ClearPendingIRQ+0x38>)
    2870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    2874:	095b      	lsrs	r3, r3, #5
    2876:	88fa      	ldrh	r2, [r7, #6]
    2878:	f002 021f 	and.w	r2, r2, #31
    287c:	2001      	movs	r0, #1
    287e:	fa00 f202 	lsl.w	r2, r0, r2
    2882:	3360      	adds	r3, #96	; 0x60
    2884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    2888:	bf00      	nop
    288a:	370c      	adds	r7, #12
    288c:	46bd      	mov	sp, r7
    288e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2892:	4770      	bx	lr
    2894:	e000e100 	.word	0xe000e100

00002898 <hri_eic_wait_for_sync>:
typedef uint32_t hri_eic_syncbusy_reg_t;
typedef uint8_t  hri_eic_ctrla_reg_t;
typedef uint8_t  hri_eic_nmictrl_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    2898:	b480      	push	{r7}
    289a:	b083      	sub	sp, #12
    289c:	af00      	add	r7, sp, #0
    289e:	6078      	str	r0, [r7, #4]
    28a0:	6039      	str	r1, [r7, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    28a2:	bf00      	nop
    28a4:	687b      	ldr	r3, [r7, #4]
    28a6:	685a      	ldr	r2, [r3, #4]
    28a8:	683b      	ldr	r3, [r7, #0]
    28aa:	4013      	ands	r3, r2
    28ac:	2b00      	cmp	r3, #0
    28ae:	d1f9      	bne.n	28a4 <hri_eic_wait_for_sync+0xc>
	};
}
    28b0:	bf00      	nop
    28b2:	370c      	adds	r7, #12
    28b4:	46bd      	mov	sp, r7
    28b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28ba:	4770      	bx	lr

000028bc <hri_eic_is_syncing>:

static inline bool hri_eic_is_syncing(const void *const hw, hri_eic_syncbusy_reg_t reg)
{
    28bc:	b480      	push	{r7}
    28be:	b083      	sub	sp, #12
    28c0:	af00      	add	r7, sp, #0
    28c2:	6078      	str	r0, [r7, #4]
    28c4:	6039      	str	r1, [r7, #0]
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    28c6:	687b      	ldr	r3, [r7, #4]
    28c8:	685a      	ldr	r2, [r3, #4]
    28ca:	683b      	ldr	r3, [r7, #0]
    28cc:	4013      	ands	r3, r2
    28ce:	2b00      	cmp	r3, #0
    28d0:	bf14      	ite	ne
    28d2:	2301      	movne	r3, #1
    28d4:	2300      	moveq	r3, #0
    28d6:	b2db      	uxtb	r3, r3
}
    28d8:	4618      	mov	r0, r3
    28da:	370c      	adds	r7, #12
    28dc:	46bd      	mov	sp, r7
    28de:	f85d 7b04 	ldr.w	r7, [sp], #4
    28e2:	4770      	bx	lr

000028e4 <hri_eic_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
    28e4:	b480      	push	{r7}
    28e6:	b083      	sub	sp, #12
    28e8:	af00      	add	r7, sp, #0
    28ea:	6078      	str	r0, [r7, #4]
	return ((Eic *)hw)->INTFLAG.reg;
    28ec:	687b      	ldr	r3, [r7, #4]
    28ee:	695b      	ldr	r3, [r3, #20]
}
    28f0:	4618      	mov	r0, r3
    28f2:	370c      	adds	r7, #12
    28f4:	46bd      	mov	sp, r7
    28f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28fa:	4770      	bx	lr

000028fc <hri_eic_clear_INTFLAG_reg>:

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
    28fc:	b480      	push	{r7}
    28fe:	b083      	sub	sp, #12
    2900:	af00      	add	r7, sp, #0
    2902:	6078      	str	r0, [r7, #4]
    2904:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTFLAG.reg = mask;
    2906:	687b      	ldr	r3, [r7, #4]
    2908:	683a      	ldr	r2, [r7, #0]
    290a:	615a      	str	r2, [r3, #20]
}
    290c:	bf00      	nop
    290e:	370c      	adds	r7, #12
    2910:	46bd      	mov	sp, r7
    2912:	f85d 7b04 	ldr.w	r7, [sp], #4
    2916:	4770      	bx	lr

00002918 <hri_eic_set_INTEN_reg>:
{
	((Eic *)hw)->INTENCLR.reg = EIC_INTENSET_EXTINT(mask);
}

static inline void hri_eic_set_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    2918:	b480      	push	{r7}
    291a:	b083      	sub	sp, #12
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
    2920:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENSET.reg = mask;
    2922:	687b      	ldr	r3, [r7, #4]
    2924:	683a      	ldr	r2, [r7, #0]
    2926:	611a      	str	r2, [r3, #16]
}
    2928:	bf00      	nop
    292a:	370c      	adds	r7, #12
    292c:	46bd      	mov	sp, r7
    292e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2932:	4770      	bx	lr

00002934 <hri_eic_clear_INTEN_reg>:
	((Eic *)hw)->INTENSET.reg = data;
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
    2934:	b480      	push	{r7}
    2936:	b083      	sub	sp, #12
    2938:	af00      	add	r7, sp, #0
    293a:	6078      	str	r0, [r7, #4]
    293c:	6039      	str	r1, [r7, #0]
	((Eic *)hw)->INTENCLR.reg = mask;
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	683a      	ldr	r2, [r7, #0]
    2942:	60da      	str	r2, [r3, #12]
}
    2944:	bf00      	nop
    2946:	370c      	adds	r7, #12
    2948:	46bd      	mov	sp, r7
    294a:	f85d 7b04 	ldr.w	r7, [sp], #4
    294e:	4770      	bx	lr

00002950 <hri_eic_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & EIC_CTRLA_SWRST) >> EIC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_eic_set_CTRLA_ENABLE_bit(const void *const hw)
{
    2950:	b580      	push	{r7, lr}
    2952:	b082      	sub	sp, #8
    2954:	af00      	add	r7, sp, #0
    2956:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	b2db      	uxtb	r3, r3
    295e:	f043 0302 	orr.w	r3, r3, #2
    2962:	b2da      	uxtb	r2, r3
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    2968:	2103      	movs	r1, #3
    296a:	6878      	ldr	r0, [r7, #4]
    296c:	4b02      	ldr	r3, [pc, #8]	; (2978 <hri_eic_set_CTRLA_ENABLE_bit+0x28>)
    296e:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    2970:	bf00      	nop
    2972:	3708      	adds	r7, #8
    2974:	46bd      	mov	sp, r7
    2976:	bd80      	pop	{r7, pc}
    2978:	00002899 	.word	0x00002899

0000297c <hri_eic_clear_CTRLA_ENABLE_bit>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_eic_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    297c:	b580      	push	{r7, lr}
    297e:	b082      	sub	sp, #8
    2980:	af00      	add	r7, sp, #0
    2982:	6078      	str	r0, [r7, #4]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    2984:	687b      	ldr	r3, [r7, #4]
    2986:	781b      	ldrb	r3, [r3, #0]
    2988:	b2db      	uxtb	r3, r3
    298a:	f023 0302 	bic.w	r3, r3, #2
    298e:	b2da      	uxtb	r2, r3
    2990:	687b      	ldr	r3, [r7, #4]
    2992:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_SWRST | EIC_SYNCBUSY_ENABLE);
    2994:	2103      	movs	r1, #3
    2996:	6878      	ldr	r0, [r7, #4]
    2998:	4b02      	ldr	r3, [pc, #8]	; (29a4 <hri_eic_clear_CTRLA_ENABLE_bit+0x28>)
    299a:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    299c:	bf00      	nop
    299e:	3708      	adds	r7, #8
    29a0:	46bd      	mov	sp, r7
    29a2:	bd80      	pop	{r7, pc}
    29a4:	00002899 	.word	0x00002899

000029a8 <hri_eic_write_CTRLA_CKSEL_bit>:
	tmp = (tmp & EIC_CTRLA_CKSEL) >> EIC_CTRLA_CKSEL_Pos;
	return (bool)tmp;
}

static inline void hri_eic_write_CTRLA_CKSEL_bit(const void *const hw, bool value)
{
    29a8:	b580      	push	{r7, lr}
    29aa:	b084      	sub	sp, #16
    29ac:	af00      	add	r7, sp, #0
    29ae:	6078      	str	r0, [r7, #4]
    29b0:	460b      	mov	r3, r1
    29b2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	EIC_CRITICAL_SECTION_ENTER();
	tmp = ((Eic *)hw)->CTRLA.reg;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	781b      	ldrb	r3, [r3, #0]
    29b8:	73fb      	strb	r3, [r7, #15]
	tmp &= ~EIC_CTRLA_CKSEL;
    29ba:	7bfb      	ldrb	r3, [r7, #15]
    29bc:	f023 0310 	bic.w	r3, r3, #16
    29c0:	73fb      	strb	r3, [r7, #15]
	tmp |= value << EIC_CTRLA_CKSEL_Pos;
    29c2:	78fb      	ldrb	r3, [r7, #3]
    29c4:	011b      	lsls	r3, r3, #4
    29c6:	b25a      	sxtb	r2, r3
    29c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
    29cc:	4313      	orrs	r3, r2
    29ce:	b25b      	sxtb	r3, r3
    29d0:	73fb      	strb	r3, [r7, #15]
	((Eic *)hw)->CTRLA.reg = tmp;
    29d2:	687b      	ldr	r3, [r7, #4]
    29d4:	7bfa      	ldrb	r2, [r7, #15]
    29d6:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    29d8:	2103      	movs	r1, #3
    29da:	6878      	ldr	r0, [r7, #4]
    29dc:	4b02      	ldr	r3, [pc, #8]	; (29e8 <hri_eic_write_CTRLA_CKSEL_bit+0x40>)
    29de:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    29e0:	bf00      	nop
    29e2:	3710      	adds	r7, #16
    29e4:	46bd      	mov	sp, r7
    29e6:	bd80      	pop	{r7, pc}
    29e8:	00002899 	.word	0x00002899

000029ec <hri_eic_get_CTRLA_reg>:
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	EIC_CRITICAL_SECTION_LEAVE();
}

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
    29ec:	b580      	push	{r7, lr}
    29ee:	b084      	sub	sp, #16
    29f0:	af00      	add	r7, sp, #0
    29f2:	6078      	str	r0, [r7, #4]
    29f4:	460b      	mov	r3, r1
    29f6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    29f8:	2103      	movs	r1, #3
    29fa:	6878      	ldr	r0, [r7, #4]
    29fc:	4b06      	ldr	r3, [pc, #24]	; (2a18 <hri_eic_get_CTRLA_reg+0x2c>)
    29fe:	4798      	blx	r3
	tmp = ((Eic *)hw)->CTRLA.reg;
    2a00:	687b      	ldr	r3, [r7, #4]
    2a02:	781b      	ldrb	r3, [r3, #0]
    2a04:	73fb      	strb	r3, [r7, #15]
	tmp &= mask;
    2a06:	7bfa      	ldrb	r2, [r7, #15]
    2a08:	78fb      	ldrb	r3, [r7, #3]
    2a0a:	4013      	ands	r3, r2
    2a0c:	73fb      	strb	r3, [r7, #15]
	return tmp;
    2a0e:	7bfb      	ldrb	r3, [r7, #15]
}
    2a10:	4618      	mov	r0, r3
    2a12:	3710      	adds	r7, #16
    2a14:	46bd      	mov	sp, r7
    2a16:	bd80      	pop	{r7, pc}
    2a18:	00002899 	.word	0x00002899

00002a1c <hri_eic_write_CTRLA_reg>:

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
    2a1c:	b580      	push	{r7, lr}
    2a1e:	b082      	sub	sp, #8
    2a20:	af00      	add	r7, sp, #0
    2a22:	6078      	str	r0, [r7, #4]
    2a24:	460b      	mov	r3, r1
    2a26:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    2a28:	687b      	ldr	r3, [r7, #4]
    2a2a:	78fa      	ldrb	r2, [r7, #3]
    2a2c:	701a      	strb	r2, [r3, #0]
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
    2a2e:	2103      	movs	r1, #3
    2a30:	6878      	ldr	r0, [r7, #4]
    2a32:	4b03      	ldr	r3, [pc, #12]	; (2a40 <hri_eic_write_CTRLA_reg+0x24>)
    2a34:	4798      	blx	r3
	EIC_CRITICAL_SECTION_LEAVE();
}
    2a36:	bf00      	nop
    2a38:	3708      	adds	r7, #8
    2a3a:	46bd      	mov	sp, r7
    2a3c:	bd80      	pop	{r7, pc}
    2a3e:	bf00      	nop
    2a40:	00002899 	.word	0x00002899

00002a44 <hri_eic_write_NMICTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
    2a44:	b480      	push	{r7}
    2a46:	b083      	sub	sp, #12
    2a48:	af00      	add	r7, sp, #0
    2a4a:	6078      	str	r0, [r7, #4]
    2a4c:	460b      	mov	r3, r1
    2a4e:	70fb      	strb	r3, [r7, #3]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    2a50:	687b      	ldr	r3, [r7, #4]
    2a52:	78fa      	ldrb	r2, [r7, #3]
    2a54:	705a      	strb	r2, [r3, #1]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2a56:	bf00      	nop
    2a58:	370c      	adds	r7, #12
    2a5a:	46bd      	mov	sp, r7
    2a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a60:	4770      	bx	lr

00002a62 <hri_eic_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
    2a62:	b480      	push	{r7}
    2a64:	b083      	sub	sp, #12
    2a66:	af00      	add	r7, sp, #0
    2a68:	6078      	str	r0, [r7, #4]
    2a6a:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    2a6c:	687b      	ldr	r3, [r7, #4]
    2a6e:	683a      	ldr	r2, [r7, #0]
    2a70:	609a      	str	r2, [r3, #8]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2a72:	bf00      	nop
    2a74:	370c      	adds	r7, #12
    2a76:	46bd      	mov	sp, r7
    2a78:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a7c:	4770      	bx	lr

00002a7e <hri_eic_write_ASYNCH_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
    2a7e:	b480      	push	{r7}
    2a80:	b083      	sub	sp, #12
    2a82:	af00      	add	r7, sp, #0
    2a84:	6078      	str	r0, [r7, #4]
    2a86:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    2a88:	687b      	ldr	r3, [r7, #4]
    2a8a:	683a      	ldr	r2, [r7, #0]
    2a8c:	619a      	str	r2, [r3, #24]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2a8e:	bf00      	nop
    2a90:	370c      	adds	r7, #12
    2a92:	46bd      	mov	sp, r7
    2a94:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a98:	4770      	bx	lr

00002a9a <hri_eic_write_CONFIG_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
    2a9a:	b480      	push	{r7}
    2a9c:	b085      	sub	sp, #20
    2a9e:	af00      	add	r7, sp, #0
    2aa0:	60f8      	str	r0, [r7, #12]
    2aa2:	460b      	mov	r3, r1
    2aa4:	607a      	str	r2, [r7, #4]
    2aa6:	72fb      	strb	r3, [r7, #11]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
    2aa8:	7afb      	ldrb	r3, [r7, #11]
    2aaa:	68fa      	ldr	r2, [r7, #12]
    2aac:	3306      	adds	r3, #6
    2aae:	009b      	lsls	r3, r3, #2
    2ab0:	4413      	add	r3, r2
    2ab2:	687a      	ldr	r2, [r7, #4]
    2ab4:	605a      	str	r2, [r3, #4]
	EIC_CRITICAL_SECTION_LEAVE();
}
    2ab6:	bf00      	nop
    2ab8:	3714      	adds	r7, #20
    2aba:	46bd      	mov	sp, r7
    2abc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ac0:	4770      	bx	lr

00002ac2 <hri_eic_write_DEBOUNCEN_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
    2ac2:	b480      	push	{r7}
    2ac4:	b083      	sub	sp, #12
    2ac6:	af00      	add	r7, sp, #0
    2ac8:	6078      	str	r0, [r7, #4]
    2aca:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	683a      	ldr	r2, [r7, #0]
    2ad0:	631a      	str	r2, [r3, #48]	; 0x30
	EIC_CRITICAL_SECTION_LEAVE();
}
    2ad2:	bf00      	nop
    2ad4:	370c      	adds	r7, #12
    2ad6:	46bd      	mov	sp, r7
    2ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2adc:	4770      	bx	lr

00002ade <hri_eic_write_DPRESCALER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
    2ade:	b480      	push	{r7}
    2ae0:	b083      	sub	sp, #12
    2ae2:	af00      	add	r7, sp, #0
    2ae4:	6078      	str	r0, [r7, #4]
    2ae6:	6039      	str	r1, [r7, #0]
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    2ae8:	687b      	ldr	r3, [r7, #4]
    2aea:	683a      	ldr	r2, [r7, #0]
    2aec:	635a      	str	r2, [r3, #52]	; 0x34
	EIC_CRITICAL_SECTION_LEAVE();
}
    2aee:	bf00      	nop
    2af0:	370c      	adds	r7, #12
    2af2:	46bd      	mov	sp, r7
    2af4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2af8:	4770      	bx	lr
	...

00002afc <_ext_irq_init>:

/**
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
    2afc:	b580      	push	{r7, lr}
    2afe:	b082      	sub	sp, #8
    2b00:	af00      	add	r7, sp, #0
    2b02:	6078      	str	r0, [r7, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    2b04:	2101      	movs	r1, #1
    2b06:	4830      	ldr	r0, [pc, #192]	; (2bc8 <_ext_irq_init+0xcc>)
    2b08:	4b30      	ldr	r3, [pc, #192]	; (2bcc <_ext_irq_init+0xd0>)
    2b0a:	4798      	blx	r3
    2b0c:	4603      	mov	r3, r0
    2b0e:	f083 0301 	eor.w	r3, r3, #1
    2b12:	b2db      	uxtb	r3, r3
    2b14:	2b00      	cmp	r3, #0
    2b16:	d011      	beq.n	2b3c <_ext_irq_init+0x40>
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    2b18:	2102      	movs	r1, #2
    2b1a:	482b      	ldr	r0, [pc, #172]	; (2bc8 <_ext_irq_init+0xcc>)
    2b1c:	4b2c      	ldr	r3, [pc, #176]	; (2bd0 <_ext_irq_init+0xd4>)
    2b1e:	4798      	blx	r3
    2b20:	4603      	mov	r3, r0
    2b22:	2b00      	cmp	r3, #0
    2b24:	d006      	beq.n	2b34 <_ext_irq_init+0x38>
			hri_eic_clear_CTRLA_ENABLE_bit(EIC);
    2b26:	4828      	ldr	r0, [pc, #160]	; (2bc8 <_ext_irq_init+0xcc>)
    2b28:	4b2a      	ldr	r3, [pc, #168]	; (2bd4 <_ext_irq_init+0xd8>)
    2b2a:	4798      	blx	r3
			hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_ENABLE);
    2b2c:	2102      	movs	r1, #2
    2b2e:	4826      	ldr	r0, [pc, #152]	; (2bc8 <_ext_irq_init+0xcc>)
    2b30:	4b29      	ldr	r3, [pc, #164]	; (2bd8 <_ext_irq_init+0xdc>)
    2b32:	4798      	blx	r3
		}
		hri_eic_write_CTRLA_reg(EIC, EIC_CTRLA_SWRST);
    2b34:	2101      	movs	r1, #1
    2b36:	4824      	ldr	r0, [pc, #144]	; (2bc8 <_ext_irq_init+0xcc>)
    2b38:	4b28      	ldr	r3, [pc, #160]	; (2bdc <_ext_irq_init+0xe0>)
    2b3a:	4798      	blx	r3
	}
	hri_eic_wait_for_sync(EIC, EIC_SYNCBUSY_SWRST);
    2b3c:	2101      	movs	r1, #1
    2b3e:	4822      	ldr	r0, [pc, #136]	; (2bc8 <_ext_irq_init+0xcc>)
    2b40:	4b25      	ldr	r3, [pc, #148]	; (2bd8 <_ext_irq_init+0xdc>)
    2b42:	4798      	blx	r3

	hri_eic_write_CTRLA_CKSEL_bit(EIC, CONF_EIC_CKSEL);
    2b44:	2100      	movs	r1, #0
    2b46:	4820      	ldr	r0, [pc, #128]	; (2bc8 <_ext_irq_init+0xcc>)
    2b48:	4b25      	ldr	r3, [pc, #148]	; (2be0 <_ext_irq_init+0xe4>)
    2b4a:	4798      	blx	r3

	hri_eic_write_NMICTRL_reg(EIC,
    2b4c:	2100      	movs	r1, #0
    2b4e:	481e      	ldr	r0, [pc, #120]	; (2bc8 <_ext_irq_init+0xcc>)
    2b50:	4b24      	ldr	r3, [pc, #144]	; (2be4 <_ext_irq_init+0xe8>)
    2b52:	4798      	blx	r3
	                          (CONF_EIC_NMIFILTEN << EIC_NMICTRL_NMIFILTEN_Pos)
	                              | EIC_NMICTRL_NMISENSE(CONF_EIC_NMISENSE) | EIC_ASYNCH_ASYNCH(CONF_EIC_NMIASYNCH)
	                              | 0);

	hri_eic_write_EVCTRL_reg(EIC,
    2b54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2b58:	481b      	ldr	r0, [pc, #108]	; (2bc8 <_ext_irq_init+0xcc>)
    2b5a:	4b23      	ldr	r3, [pc, #140]	; (2be8 <_ext_irq_init+0xec>)
    2b5c:	4798      	blx	r3
	                             | (CONF_EIC_EXTINTEO3 << 3) | (CONF_EIC_EXTINTEO4 << 4) | (CONF_EIC_EXTINTEO5 << 5)
	                             | (CONF_EIC_EXTINTEO6 << 6) | (CONF_EIC_EXTINTEO7 << 7) | (CONF_EIC_EXTINTEO8 << 8)
	                             | (CONF_EIC_EXTINTEO9 << 9) | (CONF_EIC_EXTINTEO10 << 10) | (CONF_EIC_EXTINTEO11 << 11)
	                             | (CONF_EIC_EXTINTEO12 << 12) | (CONF_EIC_EXTINTEO13 << 13)
	                             | (CONF_EIC_EXTINTEO14 << 14) | (CONF_EIC_EXTINTEO15 << 15) | 0);
	hri_eic_write_ASYNCH_reg(EIC,
    2b5e:	2100      	movs	r1, #0
    2b60:	4819      	ldr	r0, [pc, #100]	; (2bc8 <_ext_irq_init+0xcc>)
    2b62:	4b22      	ldr	r3, [pc, #136]	; (2bec <_ext_irq_init+0xf0>)
    2b64:	4798      	blx	r3
	                             | (CONF_EIC_ASYNCH3 << 3) | (CONF_EIC_ASYNCH4 << 4) | (CONF_EIC_ASYNCH5 << 5)
	                             | (CONF_EIC_ASYNCH6 << 6) | (CONF_EIC_ASYNCH7 << 7) | (CONF_EIC_ASYNCH8 << 8)
	                             | (CONF_EIC_ASYNCH9 << 9) | (CONF_EIC_ASYNCH10 << 10) | (CONF_EIC_ASYNCH11 << 11)
	                             | (CONF_EIC_ASYNCH12 << 12) | (CONF_EIC_ASYNCH13 << 13) | (CONF_EIC_ASYNCH14 << 14)
	                             | (CONF_EIC_ASYNCH15 << 15) | 0);
	hri_eic_write_DEBOUNCEN_reg(
    2b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    2b6a:	4817      	ldr	r0, [pc, #92]	; (2bc8 <_ext_irq_init+0xcc>)
    2b6c:	4b20      	ldr	r3, [pc, #128]	; (2bf0 <_ext_irq_init+0xf4>)
    2b6e:	4798      	blx	r3
	        | (CONF_EIC_DEBOUNCE_ENABLE6 << 6) | (CONF_EIC_DEBOUNCE_ENABLE7 << 7) | (CONF_EIC_DEBOUNCE_ENABLE8 << 8)
	        | (CONF_EIC_DEBOUNCE_ENABLE9 << 9) | (CONF_EIC_DEBOUNCE_ENABLE10 << 10) | (CONF_EIC_DEBOUNCE_ENABLE11 << 11)
	        | (CONF_EIC_DEBOUNCE_ENABLE12 << 12) | (CONF_EIC_DEBOUNCE_ENABLE13 << 13)
	        | (CONF_EIC_DEBOUNCE_ENABLE14 << 14) | (CONF_EIC_DEBOUNCE_ENABLE15 << 15) | 0);

	hri_eic_write_DPRESCALER_reg(
    2b70:	2100      	movs	r1, #0
    2b72:	4815      	ldr	r0, [pc, #84]	; (2bc8 <_ext_irq_init+0xcc>)
    2b74:	4b1f      	ldr	r3, [pc, #124]	; (2bf4 <_ext_irq_init+0xf8>)
    2b76:	4798      	blx	r3
	    EIC,
	    (EIC_DPRESCALER_PRESCALER0(CONF_EIC_DPRESCALER0)) | (CONF_EIC_STATES0 << EIC_DPRESCALER_STATES0_Pos)
	        | (EIC_DPRESCALER_PRESCALER1(CONF_EIC_DPRESCALER1)) | (CONF_EIC_STATES1 << EIC_DPRESCALER_STATES1_Pos)
	        | CONF_EIC_TICKON << EIC_DPRESCALER_TICKON_Pos | 0);

	hri_eic_write_CONFIG_reg(EIC,
    2b78:	2200      	movs	r2, #0
    2b7a:	2100      	movs	r1, #0
    2b7c:	4812      	ldr	r0, [pc, #72]	; (2bc8 <_ext_irq_init+0xcc>)
    2b7e:	4b1e      	ldr	r3, [pc, #120]	; (2bf8 <_ext_irq_init+0xfc>)
    2b80:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN5 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE5)
	                             | (CONF_EIC_FILTEN6 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE6)
	                             | (CONF_EIC_FILTEN7 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE7)
	                             | 0);

	hri_eic_write_CONFIG_reg(EIC,
    2b82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2b86:	2101      	movs	r1, #1
    2b88:	480f      	ldr	r0, [pc, #60]	; (2bc8 <_ext_irq_init+0xcc>)
    2b8a:	4b1b      	ldr	r3, [pc, #108]	; (2bf8 <_ext_irq_init+0xfc>)
    2b8c:	4798      	blx	r3
	                             | (CONF_EIC_FILTEN13 << EIC_CONFIG_FILTEN5_Pos) | EIC_CONFIG_SENSE5(CONF_EIC_SENSE13)
	                             | (CONF_EIC_FILTEN14 << EIC_CONFIG_FILTEN6_Pos) | EIC_CONFIG_SENSE6(CONF_EIC_SENSE14)
	                             | (CONF_EIC_FILTEN15 << EIC_CONFIG_FILTEN7_Pos) | EIC_CONFIG_SENSE7(CONF_EIC_SENSE15)
	                             | 0);

	hri_eic_set_CTRLA_ENABLE_bit(EIC);
    2b8e:	480e      	ldr	r0, [pc, #56]	; (2bc8 <_ext_irq_init+0xcc>)
    2b90:	4b1a      	ldr	r3, [pc, #104]	; (2bfc <_ext_irq_init+0x100>)
    2b92:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_12_IRQn);
    2b94:	2018      	movs	r0, #24
    2b96:	4b1a      	ldr	r3, [pc, #104]	; (2c00 <_ext_irq_init+0x104>)
    2b98:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_12_IRQn);
    2b9a:	2018      	movs	r0, #24
    2b9c:	4b19      	ldr	r3, [pc, #100]	; (2c04 <_ext_irq_init+0x108>)
    2b9e:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_12_IRQn);
    2ba0:	2018      	movs	r0, #24
    2ba2:	4b19      	ldr	r3, [pc, #100]	; (2c08 <_ext_irq_init+0x10c>)
    2ba4:	4798      	blx	r3
	NVIC_DisableIRQ(EIC_13_IRQn);
    2ba6:	2019      	movs	r0, #25
    2ba8:	4b15      	ldr	r3, [pc, #84]	; (2c00 <_ext_irq_init+0x104>)
    2baa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(EIC_13_IRQn);
    2bac:	2019      	movs	r0, #25
    2bae:	4b15      	ldr	r3, [pc, #84]	; (2c04 <_ext_irq_init+0x108>)
    2bb0:	4798      	blx	r3
	NVIC_EnableIRQ(EIC_13_IRQn);
    2bb2:	2019      	movs	r0, #25
    2bb4:	4b14      	ldr	r3, [pc, #80]	; (2c08 <_ext_irq_init+0x10c>)
    2bb6:	4798      	blx	r3

	callback = cb;
    2bb8:	4a14      	ldr	r2, [pc, #80]	; (2c0c <_ext_irq_init+0x110>)
    2bba:	687b      	ldr	r3, [r7, #4]
    2bbc:	6013      	str	r3, [r2, #0]

	return ERR_NONE;
    2bbe:	2300      	movs	r3, #0
}
    2bc0:	4618      	mov	r0, r3
    2bc2:	3708      	adds	r7, #8
    2bc4:	46bd      	mov	sp, r7
    2bc6:	bd80      	pop	{r7, pc}
    2bc8:	40002800 	.word	0x40002800
    2bcc:	000028bd 	.word	0x000028bd
    2bd0:	000029ed 	.word	0x000029ed
    2bd4:	0000297d 	.word	0x0000297d
    2bd8:	00002899 	.word	0x00002899
    2bdc:	00002a1d 	.word	0x00002a1d
    2be0:	000029a9 	.word	0x000029a9
    2be4:	00002a45 	.word	0x00002a45
    2be8:	00002a63 	.word	0x00002a63
    2bec:	00002a7f 	.word	0x00002a7f
    2bf0:	00002ac3 	.word	0x00002ac3
    2bf4:	00002adf 	.word	0x00002adf
    2bf8:	00002a9b 	.word	0x00002a9b
    2bfc:	00002951 	.word	0x00002951
    2c00:	00002819 	.word	0x00002819
    2c04:	0000285d 	.word	0x0000285d
    2c08:	000027dd 	.word	0x000027dd
    2c0c:	20000a70 	.word	0x20000a70

00002c10 <_ext_irq_enable>:

/**
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	b084      	sub	sp, #16
    2c14:	af00      	add	r7, sp, #0
    2c16:	6078      	str	r0, [r7, #4]
    2c18:	460b      	mov	r3, r1
    2c1a:	70fb      	strb	r3, [r7, #3]
	uint8_t extint = INVALID_EXTINT_NUMBER;
    2c1c:	23ff      	movs	r3, #255	; 0xff
    2c1e:	73fb      	strb	r3, [r7, #15]
	uint8_t i      = 0;
    2c20:	2300      	movs	r3, #0
    2c22:	73bb      	strb	r3, [r7, #14]

	for (; i < ARRAY_SIZE(_map); i++) {
    2c24:	e010      	b.n	2c48 <_ext_irq_enable+0x38>
		if (_map[i].pin == pin) {
    2c26:	7bbb      	ldrb	r3, [r7, #14]
    2c28:	4a1c      	ldr	r2, [pc, #112]	; (2c9c <_ext_irq_enable+0x8c>)
    2c2a:	00db      	lsls	r3, r3, #3
    2c2c:	4413      	add	r3, r2
    2c2e:	685a      	ldr	r2, [r3, #4]
    2c30:	687b      	ldr	r3, [r7, #4]
    2c32:	429a      	cmp	r2, r3
    2c34:	d105      	bne.n	2c42 <_ext_irq_enable+0x32>
			extint = _map[i].extint;
    2c36:	7bbb      	ldrb	r3, [r7, #14]
    2c38:	4a18      	ldr	r2, [pc, #96]	; (2c9c <_ext_irq_enable+0x8c>)
    2c3a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    2c3e:	73fb      	strb	r3, [r7, #15]
			break;
    2c40:	e005      	b.n	2c4e <_ext_irq_enable+0x3e>
	for (; i < ARRAY_SIZE(_map); i++) {
    2c42:	7bbb      	ldrb	r3, [r7, #14]
    2c44:	3301      	adds	r3, #1
    2c46:	73bb      	strb	r3, [r7, #14]
    2c48:	7bbb      	ldrb	r3, [r7, #14]
    2c4a:	2b01      	cmp	r3, #1
    2c4c:	d9eb      	bls.n	2c26 <_ext_irq_enable+0x16>
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
    2c4e:	7bfb      	ldrb	r3, [r7, #15]
    2c50:	2bff      	cmp	r3, #255	; 0xff
    2c52:	d102      	bne.n	2c5a <_ext_irq_enable+0x4a>
		return -1;
    2c54:	f04f 33ff 	mov.w	r3, #4294967295
    2c58:	e01c      	b.n	2c94 <_ext_irq_enable+0x84>
	}

	if (enable) {
    2c5a:	78fb      	ldrb	r3, [r7, #3]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d008      	beq.n	2c72 <_ext_irq_enable+0x62>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    2c60:	7bfb      	ldrb	r3, [r7, #15]
    2c62:	2201      	movs	r2, #1
    2c64:	fa02 f303 	lsl.w	r3, r2, r3
    2c68:	4619      	mov	r1, r3
    2c6a:	480d      	ldr	r0, [pc, #52]	; (2ca0 <_ext_irq_enable+0x90>)
    2c6c:	4b0d      	ldr	r3, [pc, #52]	; (2ca4 <_ext_irq_enable+0x94>)
    2c6e:	4798      	blx	r3
    2c70:	e00f      	b.n	2c92 <_ext_irq_enable+0x82>
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    2c72:	7bfb      	ldrb	r3, [r7, #15]
    2c74:	2201      	movs	r2, #1
    2c76:	fa02 f303 	lsl.w	r3, r2, r3
    2c7a:	4619      	mov	r1, r3
    2c7c:	4808      	ldr	r0, [pc, #32]	; (2ca0 <_ext_irq_enable+0x90>)
    2c7e:	4b0a      	ldr	r3, [pc, #40]	; (2ca8 <_ext_irq_enable+0x98>)
    2c80:	4798      	blx	r3
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
    2c82:	7bfb      	ldrb	r3, [r7, #15]
    2c84:	2201      	movs	r2, #1
    2c86:	fa02 f303 	lsl.w	r3, r2, r3
    2c8a:	4619      	mov	r1, r3
    2c8c:	4804      	ldr	r0, [pc, #16]	; (2ca0 <_ext_irq_enable+0x90>)
    2c8e:	4b07      	ldr	r3, [pc, #28]	; (2cac <_ext_irq_enable+0x9c>)
    2c90:	4798      	blx	r3
	}

	return ERR_NONE;
    2c92:	2300      	movs	r3, #0
}
    2c94:	4618      	mov	r0, r3
    2c96:	3710      	adds	r7, #16
    2c98:	46bd      	mov	sp, r7
    2c9a:	bd80      	pop	{r7, pc}
    2c9c:	00005dd8 	.word	0x00005dd8
    2ca0:	40002800 	.word	0x40002800
    2ca4:	00002919 	.word	0x00002919
    2ca8:	00002935 	.word	0x00002935
    2cac:	000028fd 	.word	0x000028fd

00002cb0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    2cb0:	b580      	push	{r7, lr}
    2cb2:	b084      	sub	sp, #16
    2cb4:	af00      	add	r7, sp, #0
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    2cb6:	4841      	ldr	r0, [pc, #260]	; (2dbc <_ext_irq_handler+0x10c>)
    2cb8:	4b41      	ldr	r3, [pc, #260]	; (2dc0 <_ext_irq_handler+0x110>)
    2cba:	4798      	blx	r3
    2cbc:	4603      	mov	r3, r0
    2cbe:	603b      	str	r3, [r7, #0]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;
    2cc0:	f04f 33ff 	mov.w	r3, #4294967295
    2cc4:	60bb      	str	r3, [r7, #8]

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    2cc6:	683b      	ldr	r3, [r7, #0]
    2cc8:	4619      	mov	r1, r3
    2cca:	483c      	ldr	r0, [pc, #240]	; (2dbc <_ext_irq_handler+0x10c>)
    2ccc:	4b3d      	ldr	r3, [pc, #244]	; (2dc4 <_ext_irq_handler+0x114>)
    2cce:	4798      	blx	r3

	ASSERT(callback);
    2cd0:	4b3d      	ldr	r3, [pc, #244]	; (2dc8 <_ext_irq_handler+0x118>)
    2cd2:	681b      	ldr	r3, [r3, #0]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	bf14      	ite	ne
    2cd8:	2301      	movne	r3, #1
    2cda:	2300      	moveq	r3, #0
    2cdc:	b2db      	uxtb	r3, r3
    2cde:	22ec      	movs	r2, #236	; 0xec
    2ce0:	493a      	ldr	r1, [pc, #232]	; (2dcc <_ext_irq_handler+0x11c>)
    2ce2:	4618      	mov	r0, r3
    2ce4:	4b3a      	ldr	r3, [pc, #232]	; (2dd0 <_ext_irq_handler+0x120>)
    2ce6:	4798      	blx	r3

	while (flags) {
    2ce8:	e060      	b.n	2dac <_ext_irq_handler+0xfc>
		pos = ffs(flags) - 1;
    2cea:	683b      	ldr	r3, [r7, #0]
    2cec:	4618      	mov	r0, r3
    2cee:	4b39      	ldr	r3, [pc, #228]	; (2dd4 <_ext_irq_handler+0x124>)
    2cf0:	4798      	blx	r3
    2cf2:	4603      	mov	r3, r0
    2cf4:	b2db      	uxtb	r3, r3
    2cf6:	3b01      	subs	r3, #1
    2cf8:	b2db      	uxtb	r3, r3
    2cfa:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    2cfc:	e047      	b.n	2d8e <_ext_irq_handler+0xde>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
    2cfe:	2300      	movs	r3, #0
    2d00:	71fb      	strb	r3, [r7, #7]
    2d02:	2302      	movs	r3, #2
    2d04:	71bb      	strb	r3, [r7, #6]

			while (upper >= lower) {
    2d06:	e024      	b.n	2d52 <_ext_irq_handler+0xa2>
				middle = (upper + lower) >> 1;
    2d08:	79ba      	ldrb	r2, [r7, #6]
    2d0a:	79fb      	ldrb	r3, [r7, #7]
    2d0c:	4413      	add	r3, r2
    2d0e:	105b      	asrs	r3, r3, #1
    2d10:	717b      	strb	r3, [r7, #5]
				if (_map[middle].extint == pos) {
    2d12:	797b      	ldrb	r3, [r7, #5]
    2d14:	4a30      	ldr	r2, [pc, #192]	; (2dd8 <_ext_irq_handler+0x128>)
    2d16:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    2d1a:	461a      	mov	r2, r3
    2d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d20:	429a      	cmp	r2, r3
    2d22:	d106      	bne.n	2d32 <_ext_irq_handler+0x82>
					pin = _map[middle].pin;
    2d24:	797b      	ldrb	r3, [r7, #5]
    2d26:	4a2c      	ldr	r2, [pc, #176]	; (2dd8 <_ext_irq_handler+0x128>)
    2d28:	00db      	lsls	r3, r3, #3
    2d2a:	4413      	add	r3, r2
    2d2c:	685b      	ldr	r3, [r3, #4]
    2d2e:	60bb      	str	r3, [r7, #8]
					break;
    2d30:	e013      	b.n	2d5a <_ext_irq_handler+0xaa>
				}
				if (_map[middle].extint < pos) {
    2d32:	797b      	ldrb	r3, [r7, #5]
    2d34:	4a28      	ldr	r2, [pc, #160]	; (2dd8 <_ext_irq_handler+0x128>)
    2d36:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
    2d3a:	461a      	mov	r2, r3
    2d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d40:	429a      	cmp	r2, r3
    2d42:	da03      	bge.n	2d4c <_ext_irq_handler+0x9c>
					lower = middle + 1;
    2d44:	797b      	ldrb	r3, [r7, #5]
    2d46:	3301      	adds	r3, #1
    2d48:	71fb      	strb	r3, [r7, #7]
    2d4a:	e002      	b.n	2d52 <_ext_irq_handler+0xa2>
				} else {
					upper = middle - 1;
    2d4c:	797b      	ldrb	r3, [r7, #5]
    2d4e:	3b01      	subs	r3, #1
    2d50:	71bb      	strb	r3, [r7, #6]
			while (upper >= lower) {
    2d52:	79ba      	ldrb	r2, [r7, #6]
    2d54:	79fb      	ldrb	r3, [r7, #7]
    2d56:	429a      	cmp	r2, r3
    2d58:	d2d6      	bcs.n	2d08 <_ext_irq_handler+0x58>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    2d5a:	68bb      	ldr	r3, [r7, #8]
    2d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d60:	d003      	beq.n	2d6a <_ext_irq_handler+0xba>
				callback(pin);
    2d62:	4b19      	ldr	r3, [pc, #100]	; (2dc8 <_ext_irq_handler+0x118>)
    2d64:	681b      	ldr	r3, [r3, #0]
    2d66:	68b8      	ldr	r0, [r7, #8]
    2d68:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    2d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d6e:	2201      	movs	r2, #1
    2d70:	fa02 f303 	lsl.w	r3, r2, r3
    2d74:	43da      	mvns	r2, r3
    2d76:	683b      	ldr	r3, [r7, #0]
    2d78:	4013      	ands	r3, r2
    2d7a:	603b      	str	r3, [r7, #0]
			pos = ffs(flags) - 1;
    2d7c:	683b      	ldr	r3, [r7, #0]
    2d7e:	4618      	mov	r0, r3
    2d80:	4b14      	ldr	r3, [pc, #80]	; (2dd4 <_ext_irq_handler+0x124>)
    2d82:	4798      	blx	r3
    2d84:	4603      	mov	r3, r0
    2d86:	b2db      	uxtb	r3, r3
    2d88:	3b01      	subs	r3, #1
    2d8a:	b2db      	uxtb	r3, r3
    2d8c:	73fb      	strb	r3, [r7, #15]
		while (-1 != pos) {
    2d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    2d92:	f1b3 3fff 	cmp.w	r3, #4294967295
    2d96:	d1b2      	bne.n	2cfe <_ext_irq_handler+0x4e>
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    2d98:	4808      	ldr	r0, [pc, #32]	; (2dbc <_ext_irq_handler+0x10c>)
    2d9a:	4b09      	ldr	r3, [pc, #36]	; (2dc0 <_ext_irq_handler+0x110>)
    2d9c:	4798      	blx	r3
    2d9e:	4603      	mov	r3, r0
    2da0:	603b      	str	r3, [r7, #0]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    2da2:	683b      	ldr	r3, [r7, #0]
    2da4:	4619      	mov	r1, r3
    2da6:	4805      	ldr	r0, [pc, #20]	; (2dbc <_ext_irq_handler+0x10c>)
    2da8:	4b06      	ldr	r3, [pc, #24]	; (2dc4 <_ext_irq_handler+0x114>)
    2daa:	4798      	blx	r3
	while (flags) {
    2dac:	683b      	ldr	r3, [r7, #0]
    2dae:	2b00      	cmp	r3, #0
    2db0:	d19b      	bne.n	2cea <_ext_irq_handler+0x3a>
	}
}
    2db2:	bf00      	nop
    2db4:	3710      	adds	r7, #16
    2db6:	46bd      	mov	sp, r7
    2db8:	bd80      	pop	{r7, pc}
    2dba:	bf00      	nop
    2dbc:	40002800 	.word	0x40002800
    2dc0:	000028e5 	.word	0x000028e5
    2dc4:	000028fd 	.word	0x000028fd
    2dc8:	20000a70 	.word	0x20000a70
    2dcc:	00005de8 	.word	0x00005de8
    2dd0:	00001869 	.word	0x00001869
    2dd4:	000059e9 	.word	0x000059e9
    2dd8:	00005dd8 	.word	0x00005dd8

00002ddc <EIC_12_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_12_Handler(void)
{
    2ddc:	b580      	push	{r7, lr}
    2dde:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    2de0:	4b01      	ldr	r3, [pc, #4]	; (2de8 <EIC_12_Handler+0xc>)
    2de2:	4798      	blx	r3
} /**
    2de4:	bf00      	nop
    2de6:	bd80      	pop	{r7, pc}
    2de8:	00002cb1 	.word	0x00002cb1

00002dec <EIC_13_Handler>:
   * \brief EIC interrupt handler
   */
void EIC_13_Handler(void)
{
    2dec:	b580      	push	{r7, lr}
    2dee:	af00      	add	r7, sp, #0
	_ext_irq_handler();
    2df0:	4b01      	ldr	r3, [pc, #4]	; (2df8 <EIC_13_Handler+0xc>)
    2df2:	4798      	blx	r3
}
    2df4:	bf00      	nop
    2df6:	bd80      	pop	{r7, pc}
    2df8:	00002cb1 	.word	0x00002cb1

00002dfc <hri_evsys_write_USER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
    2dfc:	b480      	push	{r7}
    2dfe:	b085      	sub	sp, #20
    2e00:	af00      	add	r7, sp, #0
    2e02:	60f8      	str	r0, [r7, #12]
    2e04:	460b      	mov	r3, r1
    2e06:	607a      	str	r2, [r7, #4]
    2e08:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    2e0a:	7afa      	ldrb	r2, [r7, #11]
    2e0c:	68fb      	ldr	r3, [r7, #12]
    2e0e:	3248      	adds	r2, #72	; 0x48
    2e10:	6879      	ldr	r1, [r7, #4]
    2e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    2e16:	bf00      	nop
    2e18:	3714      	adds	r7, #20
    2e1a:	46bd      	mov	sp, r7
    2e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e20:	4770      	bx	lr

00002e22 <hri_evsys_write_CHINTEN_reg>:
	return ((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg;
}

static inline void hri_evsys_write_CHINTEN_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_chintenset_reg_t data)
{
    2e22:	b480      	push	{r7}
    2e24:	b083      	sub	sp, #12
    2e26:	af00      	add	r7, sp, #0
    2e28:	6078      	str	r0, [r7, #4]
    2e2a:	460b      	mov	r3, r1
    2e2c:	70fb      	strb	r3, [r7, #3]
    2e2e:	4613      	mov	r3, r2
    2e30:	70bb      	strb	r3, [r7, #2]
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    2e32:	78fb      	ldrb	r3, [r7, #3]
    2e34:	687a      	ldr	r2, [r7, #4]
    2e36:	3304      	adds	r3, #4
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	4413      	add	r3, r2
    2e3c:	78ba      	ldrb	r2, [r7, #2]
    2e3e:	715a      	strb	r2, [r3, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    2e40:	78fb      	ldrb	r3, [r7, #3]
    2e42:	78ba      	ldrb	r2, [r7, #2]
    2e44:	43d2      	mvns	r2, r2
    2e46:	b2d1      	uxtb	r1, r2
    2e48:	687a      	ldr	r2, [r7, #4]
    2e4a:	3304      	adds	r3, #4
    2e4c:	00db      	lsls	r3, r3, #3
    2e4e:	4413      	add	r3, r2
    2e50:	460a      	mov	r2, r1
    2e52:	711a      	strb	r2, [r3, #4]
}
    2e54:	bf00      	nop
    2e56:	370c      	adds	r7, #12
    2e58:	46bd      	mov	sp, r7
    2e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e5e:	4770      	bx	lr

00002e60 <hri_evsys_write_CHANNEL_reg>:
	return tmp;
}

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
    2e60:	b480      	push	{r7}
    2e62:	b085      	sub	sp, #20
    2e64:	af00      	add	r7, sp, #0
    2e66:	60f8      	str	r0, [r7, #12]
    2e68:	460b      	mov	r3, r1
    2e6a:	607a      	str	r2, [r7, #4]
    2e6c:	72fb      	strb	r3, [r7, #11]
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    2e6e:	7afa      	ldrb	r2, [r7, #11]
    2e70:	68fb      	ldr	r3, [r7, #12]
    2e72:	3204      	adds	r2, #4
    2e74:	6879      	ldr	r1, [r7, #4]
    2e76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
	EVSYS_CRITICAL_SECTION_LEAVE();
}
    2e7a:	bf00      	nop
    2e7c:	3714      	adds	r7, #20
    2e7e:	46bd      	mov	sp, r7
    2e80:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e84:	4770      	bx	lr
	...

00002e88 <_event_system_init>:

/**
 * \brief Initialize event system
 */
int32_t _event_system_init(void)
{
    2e88:	b580      	push	{r7, lr}
    2e8a:	b082      	sub	sp, #8
    2e8c:	af00      	add	r7, sp, #0
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    2e8e:	2300      	movs	r3, #0
    2e90:	71fb      	strb	r3, [r7, #7]
    2e92:	e00b      	b.n	2eac <_event_system_init+0x24>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    2e94:	79fb      	ldrb	r3, [r7, #7]
    2e96:	4a18      	ldr	r2, [pc, #96]	; (2ef8 <_event_system_init+0x70>)
    2e98:	5cd3      	ldrb	r3, [r2, r3]
    2e9a:	461a      	mov	r2, r3
    2e9c:	79fb      	ldrb	r3, [r7, #7]
    2e9e:	4619      	mov	r1, r3
    2ea0:	4816      	ldr	r0, [pc, #88]	; (2efc <_event_system_init+0x74>)
    2ea2:	4b17      	ldr	r3, [pc, #92]	; (2f00 <_event_system_init+0x78>)
    2ea4:	4798      	blx	r3
	for (i = 0; i < EVSYS_USERS; i++) {
    2ea6:	79fb      	ldrb	r3, [r7, #7]
    2ea8:	3301      	adds	r3, #1
    2eaa:	71fb      	strb	r3, [r7, #7]
    2eac:	79fb      	ldrb	r3, [r7, #7]
    2eae:	2b42      	cmp	r3, #66	; 0x42
    2eb0:	d9f0      	bls.n	2e94 <_event_system_init+0xc>
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2eb2:	2300      	movs	r3, #0
    2eb4:	71fb      	strb	r3, [r7, #7]
    2eb6:	e016      	b.n	2ee6 <_event_system_init+0x5e>
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    2eb8:	79fb      	ldrb	r3, [r7, #7]
    2eba:	4a12      	ldr	r2, [pc, #72]	; (2f04 <_event_system_init+0x7c>)
    2ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    2ec0:	461a      	mov	r2, r3
    2ec2:	79fb      	ldrb	r3, [r7, #7]
    2ec4:	4619      	mov	r1, r3
    2ec6:	480d      	ldr	r0, [pc, #52]	; (2efc <_event_system_init+0x74>)
    2ec8:	4b0f      	ldr	r3, [pc, #60]	; (2f08 <_event_system_init+0x80>)
    2eca:	4798      	blx	r3
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    2ecc:	79fb      	ldrb	r3, [r7, #7]
    2ece:	4a0f      	ldr	r2, [pc, #60]	; (2f0c <_event_system_init+0x84>)
    2ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2ed4:	b2da      	uxtb	r2, r3
    2ed6:	79fb      	ldrb	r3, [r7, #7]
    2ed8:	4619      	mov	r1, r3
    2eda:	4808      	ldr	r0, [pc, #32]	; (2efc <_event_system_init+0x74>)
    2edc:	4b0c      	ldr	r3, [pc, #48]	; (2f10 <_event_system_init+0x88>)
    2ede:	4798      	blx	r3
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    2ee0:	79fb      	ldrb	r3, [r7, #7]
    2ee2:	3301      	adds	r3, #1
    2ee4:	71fb      	strb	r3, [r7, #7]
    2ee6:	79fb      	ldrb	r3, [r7, #7]
    2ee8:	2b1f      	cmp	r3, #31
    2eea:	d9e5      	bls.n	2eb8 <_event_system_init+0x30>
	}

	return ERR_NONE;
    2eec:	2300      	movs	r3, #0
}
    2eee:	4618      	mov	r0, r3
    2ef0:	3708      	adds	r7, #8
    2ef2:	46bd      	mov	sp, r7
    2ef4:	bd80      	pop	{r7, pc}
    2ef6:	bf00      	nop
    2ef8:	00005e00 	.word	0x00005e00
    2efc:	4100e000 	.word	0x4100e000
    2f00:	00002dfd 	.word	0x00002dfd
    2f04:	00005e44 	.word	0x00005e44
    2f08:	00002e61 	.word	0x00002e61
    2f0c:	00005e84 	.word	0x00005e84
    2f10:	00002e23 	.word	0x00002e23

00002f14 <hri_gclk_wait_for_sync>:
{
    2f14:	b480      	push	{r7}
    2f16:	b083      	sub	sp, #12
    2f18:	af00      	add	r7, sp, #0
    2f1a:	6078      	str	r0, [r7, #4]
    2f1c:	6039      	str	r1, [r7, #0]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    2f1e:	bf00      	nop
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	685a      	ldr	r2, [r3, #4]
    2f24:	683b      	ldr	r3, [r7, #0]
    2f26:	4013      	ands	r3, r2
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d1f9      	bne.n	2f20 <hri_gclk_wait_for_sync+0xc>
}
    2f2c:	bf00      	nop
    2f2e:	370c      	adds	r7, #12
    2f30:	46bd      	mov	sp, r7
    2f32:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f36:	4770      	bx	lr

00002f38 <hri_gclk_write_GENCTRL_reg>:
{
    2f38:	b580      	push	{r7, lr}
    2f3a:	b084      	sub	sp, #16
    2f3c:	af00      	add	r7, sp, #0
    2f3e:	60f8      	str	r0, [r7, #12]
    2f40:	460b      	mov	r3, r1
    2f42:	607a      	str	r2, [r7, #4]
    2f44:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->GENCTRL[index].reg = data;
    2f46:	7afa      	ldrb	r2, [r7, #11]
    2f48:	68fb      	ldr	r3, [r7, #12]
    2f4a:	3208      	adds	r2, #8
    2f4c:	6879      	ldr	r1, [r7, #4]
    2f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	hri_gclk_wait_for_sync(hw, GCLK_SYNCBUSY_MASK);
    2f52:	f643 71fd 	movw	r1, #16381	; 0x3ffd
    2f56:	68f8      	ldr	r0, [r7, #12]
    2f58:	4b02      	ldr	r3, [pc, #8]	; (2f64 <hri_gclk_write_GENCTRL_reg+0x2c>)
    2f5a:	4798      	blx	r3
}
    2f5c:	bf00      	nop
    2f5e:	3710      	adds	r7, #16
    2f60:	46bd      	mov	sp, r7
    2f62:	bd80      	pop	{r7, pc}
    2f64:	00002f15 	.word	0x00002f15

00002f68 <_gclk_init_generators_by_fref>:
	        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
#endif
}

void _gclk_init_generators_by_fref(uint32_t bm)
{
    2f68:	b580      	push	{r7, lr}
    2f6a:	b082      	sub	sp, #8
    2f6c:	af00      	add	r7, sp, #0
    2f6e:	6078      	str	r0, [r7, #4]

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	f003 0301 	and.w	r3, r3, #1
    2f76:	2b00      	cmp	r3, #0
    2f78:	d004      	beq.n	2f84 <_gclk_init_generators_by_fref+0x1c>
		hri_gclk_write_GENCTRL_reg(
    2f7a:	4a13      	ldr	r2, [pc, #76]	; (2fc8 <_gclk_init_generators_by_fref+0x60>)
    2f7c:	2100      	movs	r1, #0
    2f7e:	4813      	ldr	r0, [pc, #76]	; (2fcc <_gclk_init_generators_by_fref+0x64>)
    2f80:	4b13      	ldr	r3, [pc, #76]	; (2fd0 <_gclk_init_generators_by_fref+0x68>)
    2f82:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	f003 0302 	and.w	r3, r3, #2
    2f8a:	2b00      	cmp	r3, #0
    2f8c:	d004      	beq.n	2f98 <_gclk_init_generators_by_fref+0x30>
		hri_gclk_write_GENCTRL_reg(
    2f8e:	4a11      	ldr	r2, [pc, #68]	; (2fd4 <_gclk_init_generators_by_fref+0x6c>)
    2f90:	2101      	movs	r1, #1
    2f92:	480e      	ldr	r0, [pc, #56]	; (2fcc <_gclk_init_generators_by_fref+0x64>)
    2f94:	4b0e      	ldr	r3, [pc, #56]	; (2fd0 <_gclk_init_generators_by_fref+0x68>)
    2f96:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	f003 0304 	and.w	r3, r3, #4
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	d004      	beq.n	2fac <_gclk_init_generators_by_fref+0x44>
		hri_gclk_write_GENCTRL_reg(
    2fa2:	4a0d      	ldr	r2, [pc, #52]	; (2fd8 <_gclk_init_generators_by_fref+0x70>)
    2fa4:	2102      	movs	r1, #2
    2fa6:	4809      	ldr	r0, [pc, #36]	; (2fcc <_gclk_init_generators_by_fref+0x64>)
    2fa8:	4b09      	ldr	r3, [pc, #36]	; (2fd0 <_gclk_init_generators_by_fref+0x68>)
    2faa:	4798      	blx	r3
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    2fac:	687b      	ldr	r3, [r7, #4]
    2fae:	f003 0308 	and.w	r3, r3, #8
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d004      	beq.n	2fc0 <_gclk_init_generators_by_fref+0x58>
		hri_gclk_write_GENCTRL_reg(
    2fb6:	4a09      	ldr	r2, [pc, #36]	; (2fdc <_gclk_init_generators_by_fref+0x74>)
    2fb8:	2103      	movs	r1, #3
    2fba:	4804      	ldr	r0, [pc, #16]	; (2fcc <_gclk_init_generators_by_fref+0x64>)
    2fbc:	4b04      	ldr	r3, [pc, #16]	; (2fd0 <_gclk_init_generators_by_fref+0x68>)
    2fbe:	4798      	blx	r3
		        | (CONF_GCLK_GEN_11_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_11_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_11_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_11_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_11_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_11_SOURCE);
	}
#endif
}
    2fc0:	bf00      	nop
    2fc2:	3708      	adds	r7, #8
    2fc4:	46bd      	mov	sp, r7
    2fc6:	bd80      	pop	{r7, pc}
    2fc8:	00012107 	.word	0x00012107
    2fcc:	40001c00 	.word	0x40001c00
    2fd0:	00002f39 	.word	0x00002f39
    2fd4:	00022108 	.word	0x00022108
    2fd8:	000c2101 	.word	0x000c2101
    2fdc:	00012108 	.word	0x00012108

00002fe0 <hri_mclk_write_CPUDIV_reg>:
{
    2fe0:	b480      	push	{r7}
    2fe2:	b083      	sub	sp, #12
    2fe4:	af00      	add	r7, sp, #0
    2fe6:	6078      	str	r0, [r7, #4]
    2fe8:	460b      	mov	r3, r1
    2fea:	70fb      	strb	r3, [r7, #3]
	((Mclk *)hw)->CPUDIV.reg = data;
    2fec:	687b      	ldr	r3, [r7, #4]
    2fee:	78fa      	ldrb	r2, [r7, #3]
    2ff0:	715a      	strb	r2, [r3, #5]
}
    2ff2:	bf00      	nop
    2ff4:	370c      	adds	r7, #12
    2ff6:	46bd      	mov	sp, r7
    2ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ffc:	4770      	bx	lr
	...

00003000 <_mclk_init>:

/**
 * \brief Initialize master clock generator
 */
void _mclk_init(void)
{
    3000:	b580      	push	{r7, lr}
    3002:	b082      	sub	sp, #8
    3004:	af00      	add	r7, sp, #0
	void *hw = (void *)MCLK;
    3006:	4b05      	ldr	r3, [pc, #20]	; (301c <_mclk_init+0x1c>)
    3008:	607b      	str	r3, [r7, #4]
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_DIV(CONF_MCLK_CPUDIV));
    300a:	2101      	movs	r1, #1
    300c:	6878      	ldr	r0, [r7, #4]
    300e:	4b04      	ldr	r3, [pc, #16]	; (3020 <_mclk_init+0x20>)
    3010:	4798      	blx	r3
}
    3012:	bf00      	nop
    3014:	3708      	adds	r7, #8
    3016:	46bd      	mov	sp, r7
    3018:	bd80      	pop	{r7, pc}
    301a:	bf00      	nop
    301c:	40000800 	.word	0x40000800
    3020:	00002fe1 	.word	0x00002fe1

00003024 <hri_osc32kctrl_write_RTCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_RTCCTRL_reg(const void *const hw, hri_osc32kctrl_rtcctrl_reg_t data)
{
    3024:	b480      	push	{r7}
    3026:	b083      	sub	sp, #12
    3028:	af00      	add	r7, sp, #0
    302a:	6078      	str	r0, [r7, #4]
    302c:	460b      	mov	r3, r1
    302e:	70fb      	strb	r3, [r7, #3]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    3030:	687b      	ldr	r3, [r7, #4]
    3032:	78fa      	ldrb	r2, [r7, #3]
    3034:	741a      	strb	r2, [r3, #16]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    3036:	bf00      	nop
    3038:	370c      	adds	r7, #12
    303a:	46bd      	mov	sp, r7
    303c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3040:	4770      	bx	lr

00003042 <hri_osc32kctrl_read_OSCULP32K_CALIB_bf>:
	((Osc32kctrl *)hw)->OSCULP32K.reg ^= OSC32KCTRL_OSCULP32K_CALIB(mask);
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
    3042:	b480      	push	{r7}
    3044:	b085      	sub	sp, #20
    3046:	af00      	add	r7, sp, #0
    3048:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    304a:	687b      	ldr	r3, [r7, #4]
    304c:	69db      	ldr	r3, [r3, #28]
    304e:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
    3050:	68fb      	ldr	r3, [r7, #12]
    3052:	0a1b      	lsrs	r3, r3, #8
    3054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3058:	60fb      	str	r3, [r7, #12]
	return tmp;
    305a:	68fb      	ldr	r3, [r7, #12]
}
    305c:	4618      	mov	r0, r3
    305e:	3714      	adds	r7, #20
    3060:	46bd      	mov	sp, r7
    3062:	f85d 7b04 	ldr.w	r7, [sp], #4
    3066:	4770      	bx	lr

00003068 <hri_osc32kctrl_write_OSCULP32K_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
    3068:	b480      	push	{r7}
    306a:	b083      	sub	sp, #12
    306c:	af00      	add	r7, sp, #0
    306e:	6078      	str	r0, [r7, #4]
    3070:	6039      	str	r1, [r7, #0]
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    3072:	687b      	ldr	r3, [r7, #4]
    3074:	683a      	ldr	r2, [r7, #0]
    3076:	61da      	str	r2, [r3, #28]
	OSC32KCTRL_CRITICAL_SECTION_LEAVE();
}
    3078:	bf00      	nop
    307a:	370c      	adds	r7, #12
    307c:	46bd      	mov	sp, r7
    307e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3082:	4770      	bx	lr

00003084 <_osc32kctrl_init_sources>:

/**
 * \brief Initialize 32 kHz clock sources
 */
void _osc32kctrl_init_sources(void)
{
    3084:	b580      	push	{r7, lr}
    3086:	b082      	sub	sp, #8
    3088:	af00      	add	r7, sp, #0
	void *   hw    = (void *)OSC32KCTRL;
    308a:	4b0c      	ldr	r3, [pc, #48]	; (30bc <_osc32kctrl_init_sources+0x38>)
    308c:	607b      	str	r3, [r7, #4]
	uint16_t calib = 0;
    308e:	2300      	movs	r3, #0
    3090:	807b      	strh	r3, [r7, #2]

	hri_osc32kctrl_write_EVCTRL_reg(hw, (CONF_XOSC32K_CFDEO << OSC32KCTRL_EVCTRL_CFDEO_Pos));
#endif

#if CONF_OSCULP32K_CONFIG == 1
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
    3092:	6878      	ldr	r0, [r7, #4]
    3094:	4b0a      	ldr	r3, [pc, #40]	; (30c0 <_osc32kctrl_init_sources+0x3c>)
    3096:	4798      	blx	r3
    3098:	4603      	mov	r3, r0
    309a:	807b      	strh	r3, [r7, #2]
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    309c:	887b      	ldrh	r3, [r7, #2]
    309e:	021b      	lsls	r3, r3, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
    30a0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    30a4:	4619      	mov	r1, r3
    30a6:	6878      	ldr	r0, [r7, #4]
    30a8:	4b06      	ldr	r3, [pc, #24]	; (30c4 <_osc32kctrl_init_sources+0x40>)
    30aa:	4798      	blx	r3
	while (!hri_osc32kctrl_get_STATUS_XOSC32KRDY_bit(hw))
		;
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
    30ac:	2101      	movs	r1, #1
    30ae:	6878      	ldr	r0, [r7, #4]
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <_osc32kctrl_init_sources+0x44>)
    30b2:	4798      	blx	r3
	(void)calib;
}
    30b4:	bf00      	nop
    30b6:	3708      	adds	r7, #8
    30b8:	46bd      	mov	sp, r7
    30ba:	bd80      	pop	{r7, pc}
    30bc:	40001400 	.word	0x40001400
    30c0:	00003043 	.word	0x00003043
    30c4:	00003069 	.word	0x00003069
    30c8:	00003025 	.word	0x00003025

000030cc <hri_gclk_write_PCHCTRL_reg>:
{
    30cc:	b480      	push	{r7}
    30ce:	b085      	sub	sp, #20
    30d0:	af00      	add	r7, sp, #0
    30d2:	60f8      	str	r0, [r7, #12]
    30d4:	460b      	mov	r3, r1
    30d6:	607a      	str	r2, [r7, #4]
    30d8:	72fb      	strb	r3, [r7, #11]
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    30da:	7afa      	ldrb	r2, [r7, #11]
    30dc:	68fb      	ldr	r3, [r7, #12]
    30de:	3220      	adds	r2, #32
    30e0:	6879      	ldr	r1, [r7, #4]
    30e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    30e6:	bf00      	nop
    30e8:	3714      	adds	r7, #20
    30ea:	46bd      	mov	sp, r7
    30ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    30f0:	4770      	bx	lr

000030f2 <hri_oscctrl_wait_for_sync>:
	return ((OscctrlDpll *)hw)->DPLLSYNCBUSY.reg & reg;
}

static inline void hri_oscctrl_wait_for_sync(const void *const hw, uint8_t submodule_index,
                                             hri_oscctrl_dpllsyncbusy_reg_t reg)
{
    30f2:	b480      	push	{r7}
    30f4:	b085      	sub	sp, #20
    30f6:	af00      	add	r7, sp, #0
    30f8:	60f8      	str	r0, [r7, #12]
    30fa:	460b      	mov	r3, r1
    30fc:	607a      	str	r2, [r7, #4]
    30fe:	72fb      	strb	r3, [r7, #11]
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    3100:	bf00      	nop
    3102:	7afa      	ldrb	r2, [r7, #11]
    3104:	68f9      	ldr	r1, [r7, #12]
    3106:	4613      	mov	r3, r2
    3108:	009b      	lsls	r3, r3, #2
    310a:	4413      	add	r3, r2
    310c:	009b      	lsls	r3, r3, #2
    310e:	440b      	add	r3, r1
    3110:	333c      	adds	r3, #60	; 0x3c
    3112:	681a      	ldr	r2, [r3, #0]
    3114:	687b      	ldr	r3, [r7, #4]
    3116:	4013      	ands	r3, r2
    3118:	2b00      	cmp	r3, #0
    311a:	d1f2      	bne.n	3102 <hri_oscctrl_wait_for_sync+0x10>
	};
}
    311c:	bf00      	nop
    311e:	3714      	adds	r7, #20
    3120:	46bd      	mov	sp, r7
    3122:	f85d 7b04 	ldr.w	r7, [sp], #4
    3126:	4770      	bx	lr

00003128 <hri_oscctrl_get_DPLLSTATUS_LOCK_bit>:
{
	return ((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg;
}

static inline bool hri_oscctrl_get_DPLLSTATUS_LOCK_bit(const void *const hw, uint8_t submodule_index)
{
    3128:	b480      	push	{r7}
    312a:	b083      	sub	sp, #12
    312c:	af00      	add	r7, sp, #0
    312e:	6078      	str	r0, [r7, #4]
    3130:	460b      	mov	r3, r1
    3132:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    3134:	78fa      	ldrb	r2, [r7, #3]
    3136:	6879      	ldr	r1, [r7, #4]
    3138:	4613      	mov	r3, r2
    313a:	009b      	lsls	r3, r3, #2
    313c:	4413      	add	r3, r2
    313e:	009b      	lsls	r3, r3, #2
    3140:	440b      	add	r3, r1
    3142:	3340      	adds	r3, #64	; 0x40
    3144:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_LOCK_Pos;
    3146:	f003 0301 	and.w	r3, r3, #1
    314a:	2b00      	cmp	r3, #0
    314c:	bf14      	ite	ne
    314e:	2301      	movne	r3, #1
    3150:	2300      	moveq	r3, #0
    3152:	b2db      	uxtb	r3, r3
}
    3154:	4618      	mov	r0, r3
    3156:	370c      	adds	r7, #12
    3158:	46bd      	mov	sp, r7
    315a:	f85d 7b04 	ldr.w	r7, [sp], #4
    315e:	4770      	bx	lr

00003160 <hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit>:

static inline bool hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(const void *const hw, uint8_t submodule_index)
{
    3160:	b480      	push	{r7}
    3162:	b083      	sub	sp, #12
    3164:	af00      	add	r7, sp, #0
    3166:	6078      	str	r0, [r7, #4]
    3168:	460b      	mov	r3, r1
    316a:	70fb      	strb	r3, [r7, #3]
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    316c:	78fa      	ldrb	r2, [r7, #3]
    316e:	6879      	ldr	r1, [r7, #4]
    3170:	4613      	mov	r3, r2
    3172:	009b      	lsls	r3, r3, #2
    3174:	4413      	add	r3, r2
    3176:	009b      	lsls	r3, r3, #2
    3178:	440b      	add	r3, r1
    317a:	3340      	adds	r3, #64	; 0x40
    317c:	681b      	ldr	r3, [r3, #0]
	       >> OSCCTRL_DPLLSTATUS_CLKRDY_Pos;
    317e:	085b      	lsrs	r3, r3, #1
    3180:	f003 0301 	and.w	r3, r3, #1
    3184:	2b00      	cmp	r3, #0
    3186:	bf14      	ite	ne
    3188:	2301      	movne	r3, #1
    318a:	2300      	moveq	r3, #0
    318c:	b2db      	uxtb	r3, r3
}
    318e:	4618      	mov	r0, r3
    3190:	370c      	adds	r7, #12
    3192:	46bd      	mov	sp, r7
    3194:	f85d 7b04 	ldr.w	r7, [sp], #4
    3198:	4770      	bx	lr
	...

0000319c <hri_oscctrl_write_DPLLCTRLA_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrla_reg_t data)
{
    319c:	b580      	push	{r7, lr}
    319e:	b082      	sub	sp, #8
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	460b      	mov	r3, r1
    31a6:	70fb      	strb	r3, [r7, #3]
    31a8:	4613      	mov	r3, r2
    31aa:	70bb      	strb	r3, [r7, #2]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    31ac:	78fa      	ldrb	r2, [r7, #3]
    31ae:	6879      	ldr	r1, [r7, #4]
    31b0:	4613      	mov	r3, r2
    31b2:	009b      	lsls	r3, r3, #2
    31b4:	4413      	add	r3, r2
    31b6:	009b      	lsls	r3, r3, #2
    31b8:	440b      	add	r3, r1
    31ba:	3330      	adds	r3, #48	; 0x30
    31bc:	78ba      	ldrb	r2, [r7, #2]
    31be:	701a      	strb	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_ENABLE);
    31c0:	78fb      	ldrb	r3, [r7, #3]
    31c2:	2202      	movs	r2, #2
    31c4:	4619      	mov	r1, r3
    31c6:	6878      	ldr	r0, [r7, #4]
    31c8:	4b02      	ldr	r3, [pc, #8]	; (31d4 <hri_oscctrl_write_DPLLCTRLA_reg+0x38>)
    31ca:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    31cc:	bf00      	nop
    31ce:	3708      	adds	r7, #8
    31d0:	46bd      	mov	sp, r7
    31d2:	bd80      	pop	{r7, pc}
    31d4:	000030f3 	.word	0x000030f3

000031d8 <hri_oscctrl_write_DPLLRATIO_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
    31d8:	b580      	push	{r7, lr}
    31da:	b084      	sub	sp, #16
    31dc:	af00      	add	r7, sp, #0
    31de:	60f8      	str	r0, [r7, #12]
    31e0:	460b      	mov	r3, r1
    31e2:	607a      	str	r2, [r7, #4]
    31e4:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    31e6:	7afa      	ldrb	r2, [r7, #11]
    31e8:	68f9      	ldr	r1, [r7, #12]
    31ea:	4613      	mov	r3, r2
    31ec:	009b      	lsls	r3, r3, #2
    31ee:	4413      	add	r3, r2
    31f0:	009b      	lsls	r3, r3, #2
    31f2:	440b      	add	r3, r1
    31f4:	3334      	adds	r3, #52	; 0x34
    31f6:	687a      	ldr	r2, [r7, #4]
    31f8:	601a      	str	r2, [r3, #0]
	hri_oscctrl_wait_for_sync(hw, submodule_index, OSCCTRL_DPLLSYNCBUSY_MASK);
    31fa:	7afb      	ldrb	r3, [r7, #11]
    31fc:	2206      	movs	r2, #6
    31fe:	4619      	mov	r1, r3
    3200:	68f8      	ldr	r0, [r7, #12]
    3202:	4b03      	ldr	r3, [pc, #12]	; (3210 <hri_oscctrl_write_DPLLRATIO_reg+0x38>)
    3204:	4798      	blx	r3
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3206:	bf00      	nop
    3208:	3710      	adds	r7, #16
    320a:	46bd      	mov	sp, r7
    320c:	bd80      	pop	{r7, pc}
    320e:	bf00      	nop
    3210:	000030f3 	.word	0x000030f3

00003214 <hri_oscctrl_write_DPLLCTRLB_reg>:
	return tmp;
}

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
    3214:	b480      	push	{r7}
    3216:	b085      	sub	sp, #20
    3218:	af00      	add	r7, sp, #0
    321a:	60f8      	str	r0, [r7, #12]
    321c:	460b      	mov	r3, r1
    321e:	607a      	str	r2, [r7, #4]
    3220:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    3222:	7afa      	ldrb	r2, [r7, #11]
    3224:	68f9      	ldr	r1, [r7, #12]
    3226:	4613      	mov	r3, r2
    3228:	009b      	lsls	r3, r3, #2
    322a:	4413      	add	r3, r2
    322c:	009b      	lsls	r3, r3, #2
    322e:	440b      	add	r3, r1
    3230:	3338      	adds	r3, #56	; 0x38
    3232:	687a      	ldr	r2, [r7, #4]
    3234:	601a      	str	r2, [r3, #0]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3236:	bf00      	nop
    3238:	3714      	adds	r7, #20
    323a:	46bd      	mov	sp, r7
    323c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3240:	4770      	bx	lr

00003242 <hri_oscctrl_get_STATUS_XOSCRDY1_bit>:
{
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY0) >> OSCCTRL_STATUS_XOSCRDY0_Pos;
}

static inline bool hri_oscctrl_get_STATUS_XOSCRDY1_bit(const void *const hw)
{
    3242:	b480      	push	{r7}
    3244:	b083      	sub	sp, #12
    3246:	af00      	add	r7, sp, #0
    3248:	6078      	str	r0, [r7, #4]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    324a:	687b      	ldr	r3, [r7, #4]
    324c:	691b      	ldr	r3, [r3, #16]
    324e:	085b      	lsrs	r3, r3, #1
    3250:	f003 0301 	and.w	r3, r3, #1
    3254:	2b00      	cmp	r3, #0
    3256:	bf14      	ite	ne
    3258:	2301      	movne	r3, #1
    325a:	2300      	moveq	r3, #0
    325c:	b2db      	uxtb	r3, r3
}
    325e:	4618      	mov	r0, r3
    3260:	370c      	adds	r7, #12
    3262:	46bd      	mov	sp, r7
    3264:	f85d 7b04 	ldr.w	r7, [sp], #4
    3268:	4770      	bx	lr

0000326a <hri_oscctrl_write_XOSCCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
    326a:	b480      	push	{r7}
    326c:	b085      	sub	sp, #20
    326e:	af00      	add	r7, sp, #0
    3270:	60f8      	str	r0, [r7, #12]
    3272:	460b      	mov	r3, r1
    3274:	607a      	str	r2, [r7, #4]
    3276:	72fb      	strb	r3, [r7, #11]
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    3278:	7afb      	ldrb	r3, [r7, #11]
    327a:	68fa      	ldr	r2, [r7, #12]
    327c:	3304      	adds	r3, #4
    327e:	009b      	lsls	r3, r3, #2
    3280:	4413      	add	r3, r2
    3282:	687a      	ldr	r2, [r7, #4]
    3284:	605a      	str	r2, [r3, #4]
	OSCCTRL_CRITICAL_SECTION_LEAVE();
}
    3286:	bf00      	nop
    3288:	3714      	adds	r7, #20
    328a:	46bd      	mov	sp, r7
    328c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3290:	4770      	bx	lr
	...

00003294 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
    3294:	b580      	push	{r7, lr}
    3296:	b082      	sub	sp, #8
    3298:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    329a:	4b0a      	ldr	r3, [pc, #40]	; (32c4 <_oscctrl_init_sources+0x30>)
    329c:	607b      	str	r3, [r7, #4]
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 0);
#endif
#endif

#if CONF_XOSC1_CONFIG == 1
	hri_oscctrl_write_XOSCCTRL_reg(
    329e:	4a0a      	ldr	r2, [pc, #40]	; (32c8 <_oscctrl_init_sources+0x34>)
    32a0:	2101      	movs	r1, #1
    32a2:	6878      	ldr	r0, [r7, #4]
    32a4:	4b09      	ldr	r3, [pc, #36]	; (32cc <_oscctrl_init_sources+0x38>)
    32a6:	4798      	blx	r3
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    32a8:	bf00      	nop
    32aa:	6878      	ldr	r0, [r7, #4]
    32ac:	4b08      	ldr	r3, [pc, #32]	; (32d0 <_oscctrl_init_sources+0x3c>)
    32ae:	4798      	blx	r3
    32b0:	4603      	mov	r3, r0
    32b2:	f083 0301 	eor.w	r3, r3, #1
    32b6:	b2db      	uxtb	r3, r3
    32b8:	2b00      	cmp	r3, #0
    32ba:	d1f6      	bne.n	32aa <_oscctrl_init_sources+0x16>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    32bc:	bf00      	nop
    32be:	3708      	adds	r7, #8
    32c0:	46bd      	mov	sp, r7
    32c2:	bd80      	pop	{r7, pc}
    32c4:	40001000 	.word	0x40001000
    32c8:	03002646 	.word	0x03002646
    32cc:	0000326b 	.word	0x0000326b
    32d0:	00003243 	.word	0x00003243

000032d4 <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
    32d4:	b580      	push	{r7, lr}
    32d6:	b082      	sub	sp, #8
    32d8:	af00      	add	r7, sp, #0
	void *hw = (void *)OSCCTRL;
    32da:	4b2d      	ldr	r3, [pc, #180]	; (3390 <_oscctrl_init_referenced_generators+0xbc>)
    32dc:	607b      	str	r3, [r7, #4]
		;
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    32de:	2242      	movs	r2, #66	; 0x42
    32e0:	2101      	movs	r1, #1
    32e2:	482c      	ldr	r0, [pc, #176]	; (3394 <_oscctrl_init_referenced_generators+0xc0>)
    32e4:	4b2c      	ldr	r3, [pc, #176]	; (3398 <_oscctrl_init_referenced_generators+0xc4>)
    32e6:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL0, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL0_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    32e8:	2277      	movs	r2, #119	; 0x77
    32ea:	2100      	movs	r1, #0
    32ec:	6878      	ldr	r0, [r7, #4]
    32ee:	4b2b      	ldr	r3, [pc, #172]	; (339c <_oscctrl_init_referenced_generators+0xc8>)
    32f0:	4798      	blx	r3
	    hw, 0, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL0_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL0_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    32f2:	f44f 3284 	mov.w	r2, #67584	; 0x10800
    32f6:	2100      	movs	r1, #0
    32f8:	6878      	ldr	r0, [r7, #4]
    32fa:	4b29      	ldr	r3, [pc, #164]	; (33a0 <_oscctrl_init_referenced_generators+0xcc>)
    32fc:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL0_DIV) | (CONF_FDPLL0_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL0_DCOFILTER)
	        | (CONF_FDPLL0_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL0_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL0_REFCLK) | (CONF_FDPLL0_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL0_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    32fe:	2202      	movs	r2, #2
    3300:	2100      	movs	r1, #0
    3302:	6878      	ldr	r0, [r7, #4]
    3304:	4b27      	ldr	r3, [pc, #156]	; (33a4 <_oscctrl_init_referenced_generators+0xd0>)
    3306:	4798      	blx	r3
	                                    | (CONF_FDPLL0_ENABLE << OSCCTRL_DPLLCTRLA_ENABLE_Pos));
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_REFCLK == 0
	hri_gclk_write_PCHCTRL_reg(
    3308:	2242      	movs	r2, #66	; 0x42
    330a:	2102      	movs	r1, #2
    330c:	4821      	ldr	r0, [pc, #132]	; (3394 <_oscctrl_init_referenced_generators+0xc0>)
    330e:	4b22      	ldr	r3, [pc, #136]	; (3398 <_oscctrl_init_referenced_generators+0xc4>)
    3310:	4798      	blx	r3
	    GCLK, OSCCTRL_GCLK_ID_FDPLL1, (1 << GCLK_PCHCTRL_CHEN_Pos) | GCLK_PCHCTRL_GEN(CONF_FDPLL1_GCLK));
#endif
	hri_oscctrl_write_DPLLRATIO_reg(
    3312:	222f      	movs	r2, #47	; 0x2f
    3314:	2101      	movs	r1, #1
    3316:	6878      	ldr	r0, [r7, #4]
    3318:	4b20      	ldr	r3, [pc, #128]	; (339c <_oscctrl_init_referenced_generators+0xc8>)
    331a:	4798      	blx	r3
	    hw, 1, OSCCTRL_DPLLRATIO_LDRFRAC(CONF_FDPLL1_LDRFRAC) | OSCCTRL_DPLLRATIO_LDR(CONF_FDPLL1_LDR));
	hri_oscctrl_write_DPLLCTRLB_reg(
    331c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3320:	2101      	movs	r1, #1
    3322:	6878      	ldr	r0, [r7, #4]
    3324:	4b1e      	ldr	r3, [pc, #120]	; (33a0 <_oscctrl_init_referenced_generators+0xcc>)
    3326:	4798      	blx	r3
	    OSCCTRL_DPLLCTRLB_DIV(CONF_FDPLL1_DIV) | (CONF_FDPLL1_DCOEN << OSCCTRL_DPLLCTRLB_DCOEN_Pos)
	        | OSCCTRL_DPLLCTRLB_DCOFILTER(CONF_FDPLL1_DCOFILTER)
	        | (CONF_FDPLL1_LBYPASS << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) | OSCCTRL_DPLLCTRLB_LTIME(CONF_FDPLL1_LTIME)
	        | OSCCTRL_DPLLCTRLB_REFCLK(CONF_FDPLL1_REFCLK) | (CONF_FDPLL1_WUF << OSCCTRL_DPLLCTRLB_WUF_Pos)
	        | OSCCTRL_DPLLCTRLB_FILTER(CONF_FDPLL1_FILTER));
	hri_oscctrl_write_DPLLCTRLA_reg(hw,
    3328:	2202      	movs	r2, #2
    332a:	2101      	movs	r1, #1
    332c:	6878      	ldr	r0, [r7, #4]
    332e:	4b1d      	ldr	r3, [pc, #116]	; (33a4 <_oscctrl_init_referenced_generators+0xd0>)
    3330:	4798      	blx	r3
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    3332:	bf00      	nop
    3334:	2100      	movs	r1, #0
    3336:	6878      	ldr	r0, [r7, #4]
    3338:	4b1b      	ldr	r3, [pc, #108]	; (33a8 <_oscctrl_init_referenced_generators+0xd4>)
    333a:	4798      	blx	r3
    333c:	4603      	mov	r3, r0
    333e:	f083 0301 	eor.w	r3, r3, #1
    3342:	b2db      	uxtb	r3, r3
    3344:	2b00      	cmp	r3, #0
    3346:	d009      	beq.n	335c <_oscctrl_init_referenced_generators+0x88>
    3348:	2100      	movs	r1, #0
    334a:	6878      	ldr	r0, [r7, #4]
    334c:	4b17      	ldr	r3, [pc, #92]	; (33ac <_oscctrl_init_referenced_generators+0xd8>)
    334e:	4798      	blx	r3
    3350:	4603      	mov	r3, r0
    3352:	f083 0301 	eor.w	r3, r3, #1
    3356:	b2db      	uxtb	r3, r3
    3358:	2b00      	cmp	r3, #0
    335a:	d1eb      	bne.n	3334 <_oscctrl_init_referenced_generators+0x60>
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    335c:	bf00      	nop
    335e:	2101      	movs	r1, #1
    3360:	6878      	ldr	r0, [r7, #4]
    3362:	4b11      	ldr	r3, [pc, #68]	; (33a8 <_oscctrl_init_referenced_generators+0xd4>)
    3364:	4798      	blx	r3
    3366:	4603      	mov	r3, r0
    3368:	f083 0301 	eor.w	r3, r3, #1
    336c:	b2db      	uxtb	r3, r3
    336e:	2b00      	cmp	r3, #0
    3370:	d009      	beq.n	3386 <_oscctrl_init_referenced_generators+0xb2>
    3372:	2101      	movs	r1, #1
    3374:	6878      	ldr	r0, [r7, #4]
    3376:	4b0d      	ldr	r3, [pc, #52]	; (33ac <_oscctrl_init_referenced_generators+0xd8>)
    3378:	4798      	blx	r3
    337a:	4603      	mov	r3, r0
    337c:	f083 0301 	eor.w	r3, r3, #1
    3380:	b2db      	uxtb	r3, r3
    3382:	2b00      	cmp	r3, #0
    3384:	d1eb      	bne.n	335e <_oscctrl_init_referenced_generators+0x8a>
	hri_gclk_write_GENCTRL_SRC_bf(GCLK, 0, CONF_GCLK_GEN_0_SOURCE);
	while (hri_gclk_get_SYNCBUSY_GENCTRL0_bit(GCLK))
		;
#endif
	(void)hw;
}
    3386:	bf00      	nop
    3388:	3708      	adds	r7, #8
    338a:	46bd      	mov	sp, r7
    338c:	bd80      	pop	{r7, pc}
    338e:	bf00      	nop
    3390:	40001000 	.word	0x40001000
    3394:	40001c00 	.word	0x40001c00
    3398:	000030cd 	.word	0x000030cd
    339c:	000031d9 	.word	0x000031d9
    33a0:	00003215 	.word	0x00003215
    33a4:	0000319d 	.word	0x0000319d
    33a8:	00003129 	.word	0x00003129
    33ac:	00003161 	.word	0x00003161

000033b0 <hri_pcc_clear_IMR_DRDY_bit>:
		((Pcc *)hw)->IER.reg = PCC_IMR_DRDY;
	}
}

static inline void hri_pcc_clear_IMR_DRDY_bit(const void *const hw)
{
    33b0:	b480      	push	{r7}
    33b2:	b083      	sub	sp, #12
    33b4:	af00      	add	r7, sp, #0
    33b6:	6078      	str	r0, [r7, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	2201      	movs	r2, #1
    33bc:	609a      	str	r2, [r3, #8]
}
    33be:	bf00      	nop
    33c0:	370c      	adds	r7, #12
    33c2:	46bd      	mov	sp, r7
    33c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    33c8:	4770      	bx	lr

000033ca <hri_pcc_read_ISR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_pcc_isr_reg_t hri_pcc_read_ISR_reg(const void *const hw)
{
    33ca:	b480      	push	{r7}
    33cc:	b083      	sub	sp, #12
    33ce:	af00      	add	r7, sp, #0
    33d0:	6078      	str	r0, [r7, #4]
	return ((Pcc *)hw)->ISR.reg;
    33d2:	687b      	ldr	r3, [r7, #4]
    33d4:	691b      	ldr	r3, [r3, #16]
}
    33d6:	4618      	mov	r0, r3
    33d8:	370c      	adds	r7, #12
    33da:	46bd      	mov	sp, r7
    33dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    33e0:	4770      	bx	lr

000033e2 <hri_pcc_set_MR_reg>:
{
	return ((Pcc *)hw)->WPSR.reg;
}

static inline void hri_pcc_set_MR_reg(const void *const hw, hri_pcc_mr_reg_t mask)
{
    33e2:	b480      	push	{r7}
    33e4:	b083      	sub	sp, #12
    33e6:	af00      	add	r7, sp, #0
    33e8:	6078      	str	r0, [r7, #4]
    33ea:	6039      	str	r1, [r7, #0]
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg |= mask;
    33ec:	687b      	ldr	r3, [r7, #4]
    33ee:	681a      	ldr	r2, [r3, #0]
    33f0:	683b      	ldr	r3, [r7, #0]
    33f2:	431a      	orrs	r2, r3
    33f4:	687b      	ldr	r3, [r7, #4]
    33f6:	601a      	str	r2, [r3, #0]
	PCC_CRITICAL_SECTION_LEAVE();
}
    33f8:	bf00      	nop
    33fa:	370c      	adds	r7, #12
    33fc:	46bd      	mov	sp, r7
    33fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    3402:	4770      	bx	lr

00003404 <hri_pcc_write_MR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
    3404:	b480      	push	{r7}
    3406:	b083      	sub	sp, #12
    3408:	af00      	add	r7, sp, #0
    340a:	6078      	str	r0, [r7, #4]
    340c:	6039      	str	r1, [r7, #0]
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	683a      	ldr	r2, [r7, #0]
    3412:	601a      	str	r2, [r3, #0]
	PCC_CRITICAL_SECTION_LEAVE();
}
    3414:	bf00      	nop
    3416:	370c      	adds	r7, #12
    3418:	46bd      	mov	sp, r7
    341a:	f85d 7b04 	ldr.w	r7, [sp], #4
    341e:	4770      	bx	lr

00003420 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    3420:	b580      	push	{r7, lr}
    3422:	b084      	sub	sp, #16
    3424:	af00      	add	r7, sp, #0
    3426:	6078      	str	r0, [r7, #4]
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    3428:	687b      	ldr	r3, [r7, #4]
    342a:	689b      	ldr	r3, [r3, #8]
    342c:	60fb      	str	r3, [r7, #12]
	dev->capture_done(dev, 0);
    342e:	68fb      	ldr	r3, [r7, #12]
    3430:	681b      	ldr	r3, [r3, #0]
    3432:	2100      	movs	r1, #0
    3434:	68f8      	ldr	r0, [r7, #12]
    3436:	4798      	blx	r3
}
    3438:	bf00      	nop
    343a:	3710      	adds	r7, #16
    343c:	46bd      	mov	sp, r7
    343e:	bd80      	pop	{r7, pc}

00003440 <_camera_async_init>:

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    3440:	b580      	push	{r7, lr}
    3442:	b084      	sub	sp, #16
    3444:	af00      	add	r7, sp, #0
    3446:	6078      	str	r0, [r7, #4]
    3448:	6039      	str	r1, [r7, #0]
	uint32_t data = 0;
    344a:	2300      	movs	r3, #0
    344c:	60fb      	str	r3, [r7, #12]
	device->hw    = hw;
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	683a      	ldr	r2, [r7, #0]
    3452:	60da      	str	r2, [r3, #12]

	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
    3454:	4b0d      	ldr	r3, [pc, #52]	; (348c <_camera_async_init+0x4c>)
    3456:	60fb      	str	r3, [r7, #12]
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);
    3458:	687b      	ldr	r3, [r7, #4]
    345a:	68db      	ldr	r3, [r3, #12]
    345c:	68f9      	ldr	r1, [r7, #12]
    345e:	4618      	mov	r0, r3
    3460:	4b0b      	ldr	r3, [pc, #44]	; (3490 <_camera_async_init+0x50>)
    3462:	4798      	blx	r3

	_pcc_dev = device;
    3464:	4a0b      	ldr	r2, [pc, #44]	; (3494 <_camera_async_init+0x54>)
    3466:	687b      	ldr	r3, [r7, #4]
    3468:	6013      	str	r3, [r2, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    346a:	2100      	movs	r1, #0
    346c:	480a      	ldr	r0, [pc, #40]	; (3498 <_camera_async_init+0x58>)
    346e:	4b0b      	ldr	r3, [pc, #44]	; (349c <_camera_async_init+0x5c>)
    3470:	4798      	blx	r3
	resource->back                 = device;
    3472:	4b09      	ldr	r3, [pc, #36]	; (3498 <_camera_async_init+0x58>)
    3474:	681b      	ldr	r3, [r3, #0]
    3476:	687a      	ldr	r2, [r7, #4]
    3478:	609a      	str	r2, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    347a:	4b07      	ldr	r3, [pc, #28]	; (3498 <_camera_async_init+0x58>)
    347c:	681b      	ldr	r3, [r3, #0]
    347e:	4a08      	ldr	r2, [pc, #32]	; (34a0 <_camera_async_init+0x60>)
    3480:	601a      	str	r2, [r3, #0]
}
    3482:	bf00      	nop
    3484:	3710      	adds	r7, #16
    3486:	46bd      	mov	sp, r7
    3488:	bd80      	pop	{r7, pc}
    348a:	bf00      	nop
    348c:	c0000020 	.word	0xc0000020
    3490:	00003405 	.word	0x00003405
    3494:	20000a74 	.word	0x20000a74
    3498:	20026334 	.word	0x20026334
    349c:	000026c5 	.word	0x000026c5
    34a0:	00003421 	.word	0x00003421

000034a4 <_camera_async_enable>:
{
	_camera_async_disable(device->hw);
}

void _camera_async_enable(struct _camera_async_device *const device)
{
    34a4:	b580      	push	{r7, lr}
    34a6:	b082      	sub	sp, #8
    34a8:	af00      	add	r7, sp, #0
    34aa:	6078      	str	r0, [r7, #4]
	hri_pcc_set_MR_reg(device->hw, PCC_MR_PCEN);
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	68db      	ldr	r3, [r3, #12]
    34b0:	2101      	movs	r1, #1
    34b2:	4618      	mov	r0, r3
    34b4:	4b02      	ldr	r3, [pc, #8]	; (34c0 <_camera_async_enable+0x1c>)
    34b6:	4798      	blx	r3
}
    34b8:	bf00      	nop
    34ba:	3708      	adds	r7, #8
    34bc:	46bd      	mov	sp, r7
    34be:	bd80      	pop	{r7, pc}
    34c0:	000033e3 	.word	0x000033e3

000034c4 <_camera_async_disable>:

void _camera_async_disable(struct _camera_async_device *const device)
{
    34c4:	b580      	push	{r7, lr}
    34c6:	b082      	sub	sp, #8
    34c8:	af00      	add	r7, sp, #0
    34ca:	6078      	str	r0, [r7, #4]
	hri_pcc_write_MR_reg(device->hw, 0);
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	68db      	ldr	r3, [r3, #12]
    34d0:	2100      	movs	r1, #0
    34d2:	4618      	mov	r0, r3
    34d4:	4b02      	ldr	r3, [pc, #8]	; (34e0 <_camera_async_disable+0x1c>)
    34d6:	4798      	blx	r3
}
    34d8:	bf00      	nop
    34da:	3708      	adds	r7, #8
    34dc:	46bd      	mov	sp, r7
    34de:	bd80      	pop	{r7, pc}
    34e0:	00003405 	.word	0x00003405

000034e4 <_camera_async_capture_start>:

void _camera_async_capture_start(struct _camera_async_device *const device, uint32_t ch, uint32_t *buf)
{
    34e4:	b580      	push	{r7, lr}
    34e6:	b084      	sub	sp, #16
    34e8:	af00      	add	r7, sp, #0
    34ea:	60f8      	str	r0, [r7, #12]
    34ec:	60b9      	str	r1, [r7, #8]
    34ee:	607a      	str	r2, [r7, #4]
	if (ch > CAMERA_CHN_NUM_MAX) {
    34f0:	68bb      	ldr	r3, [r7, #8]
    34f2:	2b01      	cmp	r3, #1
    34f4:	d81d      	bhi.n	3532 <_camera_async_capture_start+0x4e>
		return;
	}
	_dma_set_irq_state(CONF_PCC_DMA_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
    34f6:	2201      	movs	r2, #1
    34f8:	2100      	movs	r1, #0
    34fa:	2000      	movs	r0, #0
    34fc:	4b0f      	ldr	r3, [pc, #60]	; (353c <_camera_async_capture_start+0x58>)
    34fe:	4798      	blx	r3

	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, (void *)&(((Pcc *)device->hw)->RHR.reg));
    3500:	68fb      	ldr	r3, [r7, #12]
    3502:	68db      	ldr	r3, [r3, #12]
    3504:	3314      	adds	r3, #20
    3506:	4619      	mov	r1, r3
    3508:	2000      	movs	r0, #0
    350a:	4b0d      	ldr	r3, [pc, #52]	; (3540 <_camera_async_capture_start+0x5c>)
    350c:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, buf);
    350e:	6879      	ldr	r1, [r7, #4]
    3510:	2000      	movs	r0, #0
    3512:	4b0c      	ldr	r3, [pc, #48]	; (3544 <_camera_async_capture_start+0x60>)
    3514:	4798      	blx	r3
	_dma_srcinc_enable(CONF_PCC_DMA_CHANNEL, false);
    3516:	2100      	movs	r1, #0
    3518:	2000      	movs	r0, #0
    351a:	4b0b      	ldr	r3, [pc, #44]	; (3548 <_camera_async_capture_start+0x64>)
    351c:	4798      	blx	r3
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
    351e:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    3522:	2000      	movs	r0, #0
    3524:	4b09      	ldr	r3, [pc, #36]	; (354c <_camera_async_capture_start+0x68>)
    3526:	4798      	blx	r3
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
    3528:	2100      	movs	r1, #0
    352a:	2000      	movs	r0, #0
    352c:	4b08      	ldr	r3, [pc, #32]	; (3550 <_camera_async_capture_start+0x6c>)
    352e:	4798      	blx	r3
    3530:	e000      	b.n	3534 <_camera_async_capture_start+0x50>
		return;
    3532:	bf00      	nop
}
    3534:	3710      	adds	r7, #16
    3536:	46bd      	mov	sp, r7
    3538:	bd80      	pop	{r7, pc}
    353a:	bf00      	nop
    353c:	000024b1 	.word	0x000024b1
    3540:	0000252d 	.word	0x0000252d
    3544:	000024fd 	.word	0x000024fd
    3548:	0000255d 	.word	0x0000255d
    354c:	00002591 	.word	0x00002591
    3550:	00002669 	.word	0x00002669

00003554 <PCC_Handler>:

void PCC_Handler(void)
{
    3554:	b580      	push	{r7, lr}
    3556:	b082      	sub	sp, #8
    3558:	af00      	add	r7, sp, #0
	void *const       hw       = _pcc_dev->hw;
    355a:	4b11      	ldr	r3, [pc, #68]	; (35a0 <PCC_Handler+0x4c>)
    355c:	681b      	ldr	r3, [r3, #0]
    355e:	68db      	ldr	r3, [r3, #12]
    3560:	607b      	str	r3, [r7, #4]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    3562:	6878      	ldr	r0, [r7, #4]
    3564:	4b0f      	ldr	r3, [pc, #60]	; (35a4 <PCC_Handler+0x50>)
    3566:	4798      	blx	r3
    3568:	4603      	mov	r3, r0
    356a:	603b      	str	r3, [r7, #0]
	hri_pcc_clear_IMR_DRDY_bit(hw);
    356c:	6878      	ldr	r0, [r7, #4]
    356e:	4b0e      	ldr	r3, [pc, #56]	; (35a8 <PCC_Handler+0x54>)
    3570:	4798      	blx	r3

	if (int_mask & PCC_ISR_DRDY) {
    3572:	683b      	ldr	r3, [r7, #0]
    3574:	f003 0301 	and.w	r3, r3, #1
    3578:	2b00      	cmp	r3, #0
    357a:	d00d      	beq.n	3598 <PCC_Handler+0x44>
		if (_pcc_dev->capture_done) {
    357c:	4b08      	ldr	r3, [pc, #32]	; (35a0 <PCC_Handler+0x4c>)
    357e:	681b      	ldr	r3, [r3, #0]
    3580:	681b      	ldr	r3, [r3, #0]
    3582:	2b00      	cmp	r3, #0
    3584:	d009      	beq.n	359a <PCC_Handler+0x46>
			_pcc_dev->capture_done(_pcc_dev, 0);
    3586:	4b06      	ldr	r3, [pc, #24]	; (35a0 <PCC_Handler+0x4c>)
    3588:	681b      	ldr	r3, [r3, #0]
    358a:	681b      	ldr	r3, [r3, #0]
    358c:	4a04      	ldr	r2, [pc, #16]	; (35a0 <PCC_Handler+0x4c>)
    358e:	6812      	ldr	r2, [r2, #0]
    3590:	2100      	movs	r1, #0
    3592:	4610      	mov	r0, r2
    3594:	4798      	blx	r3
    3596:	e000      	b.n	359a <PCC_Handler+0x46>
		}
	} else {
		return;
    3598:	bf00      	nop
	}
}
    359a:	3708      	adds	r7, #8
    359c:	46bd      	mov	sp, r7
    359e:	bd80      	pop	{r7, pc}
    35a0:	20000a74 	.word	0x20000a74
    35a4:	000033cb 	.word	0x000033cb
    35a8:	000033b1 	.word	0x000033b1

000035ac <hri_ramecc_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
    35ac:	b480      	push	{r7}
    35ae:	b083      	sub	sp, #12
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->INTFLAG.reg;
    35b4:	687b      	ldr	r3, [r7, #4]
    35b6:	789b      	ldrb	r3, [r3, #2]
    35b8:	b2db      	uxtb	r3, r3
}
    35ba:	4618      	mov	r0, r3
    35bc:	370c      	adds	r7, #12
    35be:	46bd      	mov	sp, r7
    35c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    35c4:	4770      	bx	lr

000035c6 <hri_ramecc_read_ERRADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
    35c6:	b480      	push	{r7}
    35c8:	b083      	sub	sp, #12
    35ca:	af00      	add	r7, sp, #0
    35cc:	6078      	str	r0, [r7, #4]
	return ((Ramecc *)hw)->ERRADDR.reg;
    35ce:	687b      	ldr	r3, [r7, #4]
    35d0:	685b      	ldr	r3, [r3, #4]
}
    35d2:	4618      	mov	r0, r3
    35d4:	370c      	adds	r7, #12
    35d6:	46bd      	mov	sp, r7
    35d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    35dc:	4770      	bx	lr
	...

000035e0 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    35e0:	b590      	push	{r4, r7, lr}
    35e2:	b083      	sub	sp, #12
    35e4:	af00      	add	r7, sp, #0
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
    35e6:	4b17      	ldr	r3, [pc, #92]	; (3644 <RAMECC_Handler+0x64>)
    35e8:	607b      	str	r3, [r7, #4]
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    35ea:	4817      	ldr	r0, [pc, #92]	; (3648 <RAMECC_Handler+0x68>)
    35ec:	4b17      	ldr	r3, [pc, #92]	; (364c <RAMECC_Handler+0x6c>)
    35ee:	4798      	blx	r3
    35f0:	4603      	mov	r3, r0
    35f2:	603b      	str	r3, [r7, #0]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    35f4:	683b      	ldr	r3, [r7, #0]
    35f6:	f003 0302 	and.w	r3, r3, #2
    35fa:	2b00      	cmp	r3, #0
    35fc:	d00c      	beq.n	3618 <RAMECC_Handler+0x38>
    35fe:	687b      	ldr	r3, [r7, #4]
    3600:	681b      	ldr	r3, [r3, #0]
    3602:	2b00      	cmp	r3, #0
    3604:	d008      	beq.n	3618 <RAMECC_Handler+0x38>
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    3606:	687b      	ldr	r3, [r7, #4]
    3608:	681c      	ldr	r4, [r3, #0]
    360a:	480f      	ldr	r0, [pc, #60]	; (3648 <RAMECC_Handler+0x68>)
    360c:	4b10      	ldr	r3, [pc, #64]	; (3650 <RAMECC_Handler+0x70>)
    360e:	4798      	blx	r3
    3610:	4603      	mov	r3, r0
    3612:	4618      	mov	r0, r3
    3614:	47a0      	blx	r4
    3616:	e012      	b.n	363e <RAMECC_Handler+0x5e>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    3618:	683b      	ldr	r3, [r7, #0]
    361a:	f003 0301 	and.w	r3, r3, #1
    361e:	2b00      	cmp	r3, #0
    3620:	d00c      	beq.n	363c <RAMECC_Handler+0x5c>
    3622:	687b      	ldr	r3, [r7, #4]
    3624:	685b      	ldr	r3, [r3, #4]
    3626:	2b00      	cmp	r3, #0
    3628:	d008      	beq.n	363c <RAMECC_Handler+0x5c>
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    362a:	687b      	ldr	r3, [r7, #4]
    362c:	685c      	ldr	r4, [r3, #4]
    362e:	4806      	ldr	r0, [pc, #24]	; (3648 <RAMECC_Handler+0x68>)
    3630:	4b07      	ldr	r3, [pc, #28]	; (3650 <RAMECC_Handler+0x70>)
    3632:	4798      	blx	r3
    3634:	4603      	mov	r3, r0
    3636:	4618      	mov	r0, r3
    3638:	47a0      	blx	r4
    363a:	e000      	b.n	363e <RAMECC_Handler+0x5e>
	} else {
		return;
    363c:	bf00      	nop
	}
}
    363e:	370c      	adds	r7, #12
    3640:	46bd      	mov	sp, r7
    3642:	bd90      	pop	{r4, r7, pc}
    3644:	20026338 	.word	0x20026338
    3648:	41020000 	.word	0x41020000
    364c:	000035ad 	.word	0x000035ad
    3650:	000035c7 	.word	0x000035c7

00003654 <__NVIC_EnableIRQ>:
{
    3654:	b480      	push	{r7}
    3656:	b083      	sub	sp, #12
    3658:	af00      	add	r7, sp, #0
    365a:	4603      	mov	r3, r0
    365c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    365e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    3662:	2b00      	cmp	r3, #0
    3664:	db0b      	blt.n	367e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3666:	4909      	ldr	r1, [pc, #36]	; (368c <__NVIC_EnableIRQ+0x38>)
    3668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    366c:	095b      	lsrs	r3, r3, #5
    366e:	88fa      	ldrh	r2, [r7, #6]
    3670:	f002 021f 	and.w	r2, r2, #31
    3674:	2001      	movs	r0, #1
    3676:	fa00 f202 	lsl.w	r2, r0, r2
    367a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    367e:	bf00      	nop
    3680:	370c      	adds	r7, #12
    3682:	46bd      	mov	sp, r7
    3684:	f85d 7b04 	ldr.w	r7, [sp], #4
    3688:	4770      	bx	lr
    368a:	bf00      	nop
    368c:	e000e100 	.word	0xe000e100

00003690 <__NVIC_DisableIRQ>:
{
    3690:	b480      	push	{r7}
    3692:	b083      	sub	sp, #12
    3694:	af00      	add	r7, sp, #0
    3696:	4603      	mov	r3, r0
    3698:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    369a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    369e:	2b00      	cmp	r3, #0
    36a0:	db10      	blt.n	36c4 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36a2:	490b      	ldr	r1, [pc, #44]	; (36d0 <__NVIC_DisableIRQ+0x40>)
    36a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36a8:	095b      	lsrs	r3, r3, #5
    36aa:	88fa      	ldrh	r2, [r7, #6]
    36ac:	f002 021f 	and.w	r2, r2, #31
    36b0:	2001      	movs	r0, #1
    36b2:	fa00 f202 	lsl.w	r2, r0, r2
    36b6:	3320      	adds	r3, #32
    36b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    36bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36c0:	f3bf 8f6f 	isb	sy
}
    36c4:	bf00      	nop
    36c6:	370c      	adds	r7, #12
    36c8:	46bd      	mov	sp, r7
    36ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    36ce:	4770      	bx	lr
    36d0:	e000e100 	.word	0xe000e100

000036d4 <__NVIC_ClearPendingIRQ>:
{
    36d4:	b480      	push	{r7}
    36d6:	b083      	sub	sp, #12
    36d8:	af00      	add	r7, sp, #0
    36da:	4603      	mov	r3, r0
    36dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    36de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36e2:	2b00      	cmp	r3, #0
    36e4:	db0c      	blt.n	3700 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    36e6:	4909      	ldr	r1, [pc, #36]	; (370c <__NVIC_ClearPendingIRQ+0x38>)
    36e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    36ec:	095b      	lsrs	r3, r3, #5
    36ee:	88fa      	ldrh	r2, [r7, #6]
    36f0:	f002 021f 	and.w	r2, r2, #31
    36f4:	2001      	movs	r0, #1
    36f6:	fa00 f202 	lsl.w	r2, r0, r2
    36fa:	3360      	adds	r3, #96	; 0x60
    36fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    3700:	bf00      	nop
    3702:	370c      	adds	r7, #12
    3704:	46bd      	mov	sp, r7
    3706:	f85d 7b04 	ldr.w	r7, [sp], #4
    370a:	4770      	bx	lr
    370c:	e000e100 	.word	0xe000e100

00003710 <hri_sercomi2cm_wait_for_sync>:
typedef uint8_t  hri_sercomusart_intflag_reg_t;
typedef uint8_t  hri_sercomusart_rxerrcnt_reg_t;
typedef uint8_t  hri_sercomusart_rxpl_reg_t;

static inline void hri_sercomi2cm_wait_for_sync(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    3710:	b480      	push	{r7}
    3712:	b083      	sub	sp, #12
    3714:	af00      	add	r7, sp, #0
    3716:	6078      	str	r0, [r7, #4]
    3718:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    371a:	bf00      	nop
    371c:	687b      	ldr	r3, [r7, #4]
    371e:	69da      	ldr	r2, [r3, #28]
    3720:	683b      	ldr	r3, [r7, #0]
    3722:	4013      	ands	r3, r2
    3724:	2b00      	cmp	r3, #0
    3726:	d1f9      	bne.n	371c <hri_sercomi2cm_wait_for_sync+0xc>
	};
}
    3728:	bf00      	nop
    372a:	370c      	adds	r7, #12
    372c:	46bd      	mov	sp, r7
    372e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3732:	4770      	bx	lr

00003734 <hri_sercomi2cm_is_syncing>:

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
    3734:	b480      	push	{r7}
    3736:	b083      	sub	sp, #12
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
    373c:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	69da      	ldr	r2, [r3, #28]
    3742:	683b      	ldr	r3, [r7, #0]
    3744:	4013      	ands	r3, r2
    3746:	2b00      	cmp	r3, #0
    3748:	bf14      	ite	ne
    374a:	2301      	movne	r3, #1
    374c:	2300      	moveq	r3, #0
    374e:	b2db      	uxtb	r3, r3
}
    3750:	4618      	mov	r0, r3
    3752:	370c      	adds	r7, #12
    3754:	46bd      	mov	sp, r7
    3756:	f85d 7b04 	ldr.w	r7, [sp], #4
    375a:	4770      	bx	lr

0000375c <hri_sercomusart_wait_for_sync>:
{
	return ((Sercom *)hw)->SPI.SYNCBUSY.reg & reg;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    375c:	b480      	push	{r7}
    375e:	b083      	sub	sp, #12
    3760:	af00      	add	r7, sp, #0
    3762:	6078      	str	r0, [r7, #4]
    3764:	6039      	str	r1, [r7, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    3766:	bf00      	nop
    3768:	687b      	ldr	r3, [r7, #4]
    376a:	69da      	ldr	r2, [r3, #28]
    376c:	683b      	ldr	r3, [r7, #0]
    376e:	4013      	ands	r3, r2
    3770:	2b00      	cmp	r3, #0
    3772:	d1f9      	bne.n	3768 <hri_sercomusart_wait_for_sync+0xc>
	};
}
    3774:	bf00      	nop
    3776:	370c      	adds	r7, #12
    3778:	46bd      	mov	sp, r7
    377a:	f85d 7b04 	ldr.w	r7, [sp], #4
    377e:	4770      	bx	lr

00003780 <hri_sercomusart_is_syncing>:

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
    3780:	b480      	push	{r7}
    3782:	b083      	sub	sp, #12
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
    3788:	6039      	str	r1, [r7, #0]
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    378a:	687b      	ldr	r3, [r7, #4]
    378c:	69da      	ldr	r2, [r3, #28]
    378e:	683b      	ldr	r3, [r7, #0]
    3790:	4013      	ands	r3, r2
    3792:	2b00      	cmp	r3, #0
    3794:	bf14      	ite	ne
    3796:	2301      	movne	r3, #1
    3798:	2300      	moveq	r3, #0
    379a:	b2db      	uxtb	r3, r3
}
    379c:	4618      	mov	r0, r3
    379e:	370c      	adds	r7, #12
    37a0:	46bd      	mov	sp, r7
    37a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    37a6:	4770      	bx	lr

000037a8 <hri_sercomi2cm_clear_interrupt_MB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) >> SERCOM_I2CM_INTFLAG_MB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_MB_bit(const void *const hw)
{
    37a8:	b480      	push	{r7}
    37aa:	b083      	sub	sp, #12
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    37b0:	687b      	ldr	r3, [r7, #4]
    37b2:	2201      	movs	r2, #1
    37b4:	761a      	strb	r2, [r3, #24]
}
    37b6:	bf00      	nop
    37b8:	370c      	adds	r7, #12
    37ba:	46bd      	mov	sp, r7
    37bc:	f85d 7b04 	ldr.w	r7, [sp], #4
    37c0:	4770      	bx	lr

000037c2 <hri_sercomi2cm_clear_interrupt_SB_bit>:
{
	return (((Sercom *)hw)->I2CM.INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) >> SERCOM_I2CM_INTFLAG_SB_Pos;
}

static inline void hri_sercomi2cm_clear_interrupt_SB_bit(const void *const hw)
{
    37c2:	b480      	push	{r7}
    37c4:	b083      	sub	sp, #12
    37c6:	af00      	add	r7, sp, #0
    37c8:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    37ca:	687b      	ldr	r3, [r7, #4]
    37cc:	2202      	movs	r2, #2
    37ce:	761a      	strb	r2, [r3, #24]
}
    37d0:	bf00      	nop
    37d2:	370c      	adds	r7, #12
    37d4:	46bd      	mov	sp, r7
    37d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    37da:	4770      	bx	lr

000037dc <hri_sercomi2cm_read_INTFLAG_reg>:
	tmp &= mask;
	return tmp;
}

static inline hri_sercomi2cm_intflag_reg_t hri_sercomi2cm_read_INTFLAG_reg(const void *const hw)
{
    37dc:	b480      	push	{r7}
    37de:	b083      	sub	sp, #12
    37e0:	af00      	add	r7, sp, #0
    37e2:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    37e4:	687b      	ldr	r3, [r7, #4]
    37e6:	7e1b      	ldrb	r3, [r3, #24]
    37e8:	b2db      	uxtb	r3, r3
}
    37ea:	4618      	mov	r0, r3
    37ec:	370c      	adds	r7, #12
    37ee:	46bd      	mov	sp, r7
    37f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    37f4:	4770      	bx	lr

000037f6 <hri_sercomusart_get_interrupt_DRE_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
    37f6:	b480      	push	{r7}
    37f8:	b083      	sub	sp, #12
    37fa:	af00      	add	r7, sp, #0
    37fc:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    37fe:	687b      	ldr	r3, [r7, #4]
    3800:	7e1b      	ldrb	r3, [r3, #24]
    3802:	b2db      	uxtb	r3, r3
    3804:	f003 0301 	and.w	r3, r3, #1
    3808:	2b00      	cmp	r3, #0
    380a:	bf14      	ite	ne
    380c:	2301      	movne	r3, #1
    380e:	2300      	moveq	r3, #0
    3810:	b2db      	uxtb	r3, r3
}
    3812:	4618      	mov	r0, r3
    3814:	370c      	adds	r7, #12
    3816:	46bd      	mov	sp, r7
    3818:	f85d 7b04 	ldr.w	r7, [sp], #4
    381c:	4770      	bx	lr

0000381e <hri_sercomusart_get_interrupt_TXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE;
}

static inline bool hri_sercomusart_get_interrupt_TXC_bit(const void *const hw)
{
    381e:	b480      	push	{r7}
    3820:	b083      	sub	sp, #12
    3822:	af00      	add	r7, sp, #0
    3824:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    3826:	687b      	ldr	r3, [r7, #4]
    3828:	7e1b      	ldrb	r3, [r3, #24]
    382a:	b2db      	uxtb	r3, r3
    382c:	085b      	lsrs	r3, r3, #1
    382e:	f003 0301 	and.w	r3, r3, #1
    3832:	2b00      	cmp	r3, #0
    3834:	bf14      	ite	ne
    3836:	2301      	movne	r3, #1
    3838:	2300      	moveq	r3, #0
    383a:	b2db      	uxtb	r3, r3
}
    383c:	4618      	mov	r0, r3
    383e:	370c      	adds	r7, #12
    3840:	46bd      	mov	sp, r7
    3842:	f85d 7b04 	ldr.w	r7, [sp], #4
    3846:	4770      	bx	lr

00003848 <hri_sercomusart_get_interrupt_RXC_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC;
}

static inline bool hri_sercomusart_get_interrupt_RXC_bit(const void *const hw)
{
    3848:	b480      	push	{r7}
    384a:	b083      	sub	sp, #12
    384c:	af00      	add	r7, sp, #0
    384e:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    3850:	687b      	ldr	r3, [r7, #4]
    3852:	7e1b      	ldrb	r3, [r3, #24]
    3854:	b2db      	uxtb	r3, r3
    3856:	089b      	lsrs	r3, r3, #2
    3858:	f003 0301 	and.w	r3, r3, #1
    385c:	2b00      	cmp	r3, #0
    385e:	bf14      	ite	ne
    3860:	2301      	movne	r3, #1
    3862:	2300      	moveq	r3, #0
    3864:	b2db      	uxtb	r3, r3
}
    3866:	4618      	mov	r0, r3
    3868:	370c      	adds	r7, #12
    386a:	46bd      	mov	sp, r7
    386c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3870:	4770      	bx	lr

00003872 <hri_sercomusart_get_interrupt_ERROR_bit>:
{
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
}

static inline bool hri_sercomusart_get_interrupt_ERROR_bit(const void *const hw)
{
    3872:	b480      	push	{r7}
    3874:	b083      	sub	sp, #12
    3876:	af00      	add	r7, sp, #0
    3878:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	7e1b      	ldrb	r3, [r3, #24]
    387e:	b2db      	uxtb	r3, r3
    3880:	09db      	lsrs	r3, r3, #7
    3882:	f003 0301 	and.w	r3, r3, #1
    3886:	2b00      	cmp	r3, #0
    3888:	bf14      	ite	ne
    388a:	2301      	movne	r3, #1
    388c:	2300      	moveq	r3, #0
    388e:	b2db      	uxtb	r3, r3
}
    3890:	4618      	mov	r0, r3
    3892:	370c      	adds	r7, #12
    3894:	46bd      	mov	sp, r7
    3896:	f85d 7b04 	ldr.w	r7, [sp], #4
    389a:	4770      	bx	lr

0000389c <hri_sercomusart_clear_interrupt_ERROR_bit>:

static inline void hri_sercomusart_clear_interrupt_ERROR_bit(const void *const hw)
{
    389c:	b480      	push	{r7}
    389e:	b083      	sub	sp, #12
    38a0:	af00      	add	r7, sp, #0
    38a2:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    38a4:	687b      	ldr	r3, [r7, #4]
    38a6:	2280      	movs	r2, #128	; 0x80
    38a8:	761a      	strb	r2, [r3, #24]
}
    38aa:	bf00      	nop
    38ac:	370c      	adds	r7, #12
    38ae:	46bd      	mov	sp, r7
    38b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    38b4:	4770      	bx	lr

000038b6 <hri_sercomusart_set_INTEN_DRE_bit>:
{
	((Sercom *)hw)->SPI.INTENCLR.reg = mask;
}

static inline void hri_sercomusart_set_INTEN_DRE_bit(const void *const hw)
{
    38b6:	b480      	push	{r7}
    38b8:	b083      	sub	sp, #12
    38ba:	af00      	add	r7, sp, #0
    38bc:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    38be:	687b      	ldr	r3, [r7, #4]
    38c0:	2201      	movs	r2, #1
    38c2:	759a      	strb	r2, [r3, #22]
}
    38c4:	bf00      	nop
    38c6:	370c      	adds	r7, #12
    38c8:	46bd      	mov	sp, r7
    38ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    38ce:	4770      	bx	lr

000038d0 <hri_sercomusart_get_INTEN_DRE_bit>:

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
    38d0:	b480      	push	{r7}
    38d2:	b083      	sub	sp, #12
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    38d8:	687b      	ldr	r3, [r7, #4]
    38da:	7d9b      	ldrb	r3, [r3, #22]
    38dc:	b2db      	uxtb	r3, r3
    38de:	f003 0301 	and.w	r3, r3, #1
    38e2:	2b00      	cmp	r3, #0
    38e4:	bf14      	ite	ne
    38e6:	2301      	movne	r3, #1
    38e8:	2300      	moveq	r3, #0
    38ea:	b2db      	uxtb	r3, r3
}
    38ec:	4618      	mov	r0, r3
    38ee:	370c      	adds	r7, #12
    38f0:	46bd      	mov	sp, r7
    38f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    38f6:	4770      	bx	lr

000038f8 <hri_sercomusart_clear_INTEN_DRE_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
	}
}

static inline void hri_sercomusart_clear_INTEN_DRE_bit(const void *const hw)
{
    38f8:	b480      	push	{r7}
    38fa:	b083      	sub	sp, #12
    38fc:	af00      	add	r7, sp, #0
    38fe:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	2201      	movs	r2, #1
    3904:	751a      	strb	r2, [r3, #20]
}
    3906:	bf00      	nop
    3908:	370c      	adds	r7, #12
    390a:	46bd      	mov	sp, r7
    390c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3910:	4770      	bx	lr

00003912 <hri_sercomusart_set_INTEN_TXC_bit>:

static inline void hri_sercomusart_set_INTEN_TXC_bit(const void *const hw)
{
    3912:	b480      	push	{r7}
    3914:	b083      	sub	sp, #12
    3916:	af00      	add	r7, sp, #0
    3918:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    391a:	687b      	ldr	r3, [r7, #4]
    391c:	2202      	movs	r2, #2
    391e:	759a      	strb	r2, [r3, #22]
}
    3920:	bf00      	nop
    3922:	370c      	adds	r7, #12
    3924:	46bd      	mov	sp, r7
    3926:	f85d 7b04 	ldr.w	r7, [sp], #4
    392a:	4770      	bx	lr

0000392c <hri_sercomusart_get_INTEN_TXC_bit>:

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
    392c:	b480      	push	{r7}
    392e:	b083      	sub	sp, #12
    3930:	af00      	add	r7, sp, #0
    3932:	6078      	str	r0, [r7, #4]
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    3934:	687b      	ldr	r3, [r7, #4]
    3936:	7d9b      	ldrb	r3, [r3, #22]
    3938:	b2db      	uxtb	r3, r3
    393a:	085b      	lsrs	r3, r3, #1
    393c:	f003 0301 	and.w	r3, r3, #1
    3940:	2b00      	cmp	r3, #0
    3942:	bf14      	ite	ne
    3944:	2301      	movne	r3, #1
    3946:	2300      	moveq	r3, #0
    3948:	b2db      	uxtb	r3, r3
}
    394a:	4618      	mov	r0, r3
    394c:	370c      	adds	r7, #12
    394e:	46bd      	mov	sp, r7
    3950:	f85d 7b04 	ldr.w	r7, [sp], #4
    3954:	4770      	bx	lr

00003956 <hri_sercomusart_clear_INTEN_TXC_bit>:
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
	}
}

static inline void hri_sercomusart_clear_INTEN_TXC_bit(const void *const hw)
{
    3956:	b480      	push	{r7}
    3958:	b083      	sub	sp, #12
    395a:	af00      	add	r7, sp, #0
    395c:	6078      	str	r0, [r7, #4]
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    395e:	687b      	ldr	r3, [r7, #4]
    3960:	2202      	movs	r2, #2
    3962:	751a      	strb	r2, [r3, #20]
}
    3964:	bf00      	nop
    3966:	370c      	adds	r7, #12
    3968:	46bd      	mov	sp, r7
    396a:	f85d 7b04 	ldr.w	r7, [sp], #4
    396e:	4770      	bx	lr

00003970 <hri_sercomi2cm_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_I2CM_CTRLA_SWRST) >> SERCOM_I2CM_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3970:	b580      	push	{r7, lr}
    3972:	b082      	sub	sp, #8
    3974:	af00      	add	r7, sp, #0
    3976:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    3978:	687b      	ldr	r3, [r7, #4]
    397a:	681b      	ldr	r3, [r3, #0]
    397c:	f043 0202 	orr.w	r2, r3, #2
    3980:	687b      	ldr	r3, [r7, #4]
    3982:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    3984:	2103      	movs	r1, #3
    3986:	6878      	ldr	r0, [r7, #4]
    3988:	4b02      	ldr	r3, [pc, #8]	; (3994 <hri_sercomi2cm_set_CTRLA_ENABLE_bit+0x24>)
    398a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    398c:	bf00      	nop
    398e:	3708      	adds	r7, #8
    3990:	46bd      	mov	sp, r7
    3992:	bd80      	pop	{r7, pc}
    3994:	00003711 	.word	0x00003711

00003998 <hri_sercomi2cm_clear_CTRLA_ENABLE_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3998:	b580      	push	{r7, lr}
    399a:	b082      	sub	sp, #8
    399c:	af00      	add	r7, sp, #0
    399e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    39a0:	687b      	ldr	r3, [r7, #4]
    39a2:	681b      	ldr	r3, [r3, #0]
    39a4:	f023 0202 	bic.w	r2, r3, #2
    39a8:	687b      	ldr	r3, [r7, #4]
    39aa:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    39ac:	2103      	movs	r1, #3
    39ae:	6878      	ldr	r0, [r7, #4]
    39b0:	4b02      	ldr	r3, [pc, #8]	; (39bc <hri_sercomi2cm_clear_CTRLA_ENABLE_bit+0x24>)
    39b2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    39b4:	bf00      	nop
    39b6:	3708      	adds	r7, #8
    39b8:	46bd      	mov	sp, r7
    39ba:	bd80      	pop	{r7, pc}
    39bc:	00003711 	.word	0x00003711

000039c0 <hri_sercomi2cm_get_CTRLA_SCLSM_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_MASK);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline bool hri_sercomi2cm_get_CTRLA_SCLSM_bit(const void *const hw)
{
    39c0:	b480      	push	{r7}
    39c2:	b085      	sub	sp, #20
    39c4:	af00      	add	r7, sp, #0
    39c6:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    39c8:	687b      	ldr	r3, [r7, #4]
    39ca:	681b      	ldr	r3, [r3, #0]
    39cc:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    39ce:	68fb      	ldr	r3, [r7, #12]
    39d0:	0edb      	lsrs	r3, r3, #27
    39d2:	f003 0301 	and.w	r3, r3, #1
    39d6:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	2b00      	cmp	r3, #0
    39dc:	bf14      	ite	ne
    39de:	2301      	movne	r3, #1
    39e0:	2300      	moveq	r3, #0
    39e2:	b2db      	uxtb	r3, r3
}
    39e4:	4618      	mov	r0, r3
    39e6:	3714      	adds	r7, #20
    39e8:	46bd      	mov	sp, r7
    39ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ee:	4770      	bx	lr

000039f0 <hri_sercomi2cm_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b084      	sub	sp, #16
    39f4:	af00      	add	r7, sp, #0
    39f6:	6078      	str	r0, [r7, #4]
    39f8:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    39fa:	2103      	movs	r1, #3
    39fc:	6878      	ldr	r0, [r7, #4]
    39fe:	4b07      	ldr	r3, [pc, #28]	; (3a1c <hri_sercomi2cm_get_CTRLA_reg+0x2c>)
    3a00:	4798      	blx	r3
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    3a02:	687b      	ldr	r3, [r7, #4]
    3a04:	681b      	ldr	r3, [r3, #0]
    3a06:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3a08:	68fa      	ldr	r2, [r7, #12]
    3a0a:	683b      	ldr	r3, [r7, #0]
    3a0c:	4013      	ands	r3, r2
    3a0e:	60fb      	str	r3, [r7, #12]
	return tmp;
    3a10:	68fb      	ldr	r3, [r7, #12]
}
    3a12:	4618      	mov	r0, r3
    3a14:	3710      	adds	r7, #16
    3a16:	46bd      	mov	sp, r7
    3a18:	bd80      	pop	{r7, pc}
    3a1a:	bf00      	nop
    3a1c:	00003711 	.word	0x00003711

00003a20 <hri_sercomi2cm_write_CTRLA_reg>:

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
    3a20:	b580      	push	{r7, lr}
    3a22:	b082      	sub	sp, #8
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
    3a28:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    3a2a:	687b      	ldr	r3, [r7, #4]
    3a2c:	683a      	ldr	r2, [r7, #0]
    3a2e:	601a      	str	r2, [r3, #0]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
    3a30:	2103      	movs	r1, #3
    3a32:	6878      	ldr	r0, [r7, #4]
    3a34:	4b02      	ldr	r3, [pc, #8]	; (3a40 <hri_sercomi2cm_write_CTRLA_reg+0x20>)
    3a36:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3a38:	bf00      	nop
    3a3a:	3708      	adds	r7, #8
    3a3c:	46bd      	mov	sp, r7
    3a3e:	bd80      	pop	{r7, pc}
    3a40:	00003711 	.word	0x00003711

00003a44 <hri_sercomusart_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & SERCOM_USART_CTRLA_SWRST) >> SERCOM_USART_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_sercomusart_set_CTRLA_ENABLE_bit(const void *const hw)
{
    3a44:	b580      	push	{r7, lr}
    3a46:	b082      	sub	sp, #8
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	681b      	ldr	r3, [r3, #0]
    3a50:	f043 0202 	orr.w	r2, r3, #2
    3a54:	687b      	ldr	r3, [r7, #4]
    3a56:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3a58:	2103      	movs	r1, #3
    3a5a:	6878      	ldr	r0, [r7, #4]
    3a5c:	4b02      	ldr	r3, [pc, #8]	; (3a68 <hri_sercomusart_set_CTRLA_ENABLE_bit+0x24>)
    3a5e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3a60:	bf00      	nop
    3a62:	3708      	adds	r7, #8
    3a64:	46bd      	mov	sp, r7
    3a66:	bd80      	pop	{r7, pc}
    3a68:	0000375d 	.word	0x0000375d

00003a6c <hri_sercomusart_clear_CTRLA_ENABLE_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomusart_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    3a6c:	b580      	push	{r7, lr}
    3a6e:	b082      	sub	sp, #8
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3a74:	687b      	ldr	r3, [r7, #4]
    3a76:	681b      	ldr	r3, [r3, #0]
    3a78:	f023 0202 	bic.w	r2, r3, #2
    3a7c:	687b      	ldr	r3, [r7, #4]
    3a7e:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3a80:	2103      	movs	r1, #3
    3a82:	6878      	ldr	r0, [r7, #4]
    3a84:	4b02      	ldr	r3, [pc, #8]	; (3a90 <hri_sercomusart_clear_CTRLA_ENABLE_bit+0x24>)
    3a86:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3a88:	bf00      	nop
    3a8a:	3708      	adds	r7, #8
    3a8c:	46bd      	mov	sp, r7
    3a8e:	bd80      	pop	{r7, pc}
    3a90:	0000375d 	.word	0x0000375d

00003a94 <hri_sercomusart_get_CTRLA_reg>:
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
    3a94:	b580      	push	{r7, lr}
    3a96:	b084      	sub	sp, #16
    3a98:	af00      	add	r7, sp, #0
    3a9a:	6078      	str	r0, [r7, #4]
    3a9c:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3a9e:	2103      	movs	r1, #3
    3aa0:	6878      	ldr	r0, [r7, #4]
    3aa2:	4b07      	ldr	r3, [pc, #28]	; (3ac0 <hri_sercomusart_get_CTRLA_reg+0x2c>)
    3aa4:	4798      	blx	r3
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    3aa6:	687b      	ldr	r3, [r7, #4]
    3aa8:	681b      	ldr	r3, [r3, #0]
    3aaa:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    3aac:	68fa      	ldr	r2, [r7, #12]
    3aae:	683b      	ldr	r3, [r7, #0]
    3ab0:	4013      	ands	r3, r2
    3ab2:	60fb      	str	r3, [r7, #12]
	return tmp;
    3ab4:	68fb      	ldr	r3, [r7, #12]
}
    3ab6:	4618      	mov	r0, r3
    3ab8:	3710      	adds	r7, #16
    3aba:	46bd      	mov	sp, r7
    3abc:	bd80      	pop	{r7, pc}
    3abe:	bf00      	nop
    3ac0:	0000375d 	.word	0x0000375d

00003ac4 <hri_sercomusart_write_CTRLA_reg>:

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
    3ac4:	b580      	push	{r7, lr}
    3ac6:	b082      	sub	sp, #8
    3ac8:	af00      	add	r7, sp, #0
    3aca:	6078      	str	r0, [r7, #4]
    3acc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
    3ace:	687b      	ldr	r3, [r7, #4]
    3ad0:	683a      	ldr	r2, [r7, #0]
    3ad2:	601a      	str	r2, [r3, #0]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
    3ad4:	2103      	movs	r1, #3
    3ad6:	6878      	ldr	r0, [r7, #4]
    3ad8:	4b02      	ldr	r3, [pc, #8]	; (3ae4 <hri_sercomusart_write_CTRLA_reg+0x20>)
    3ada:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3adc:	bf00      	nop
    3ade:	3708      	adds	r7, #8
    3ae0:	46bd      	mov	sp, r7
    3ae2:	bd80      	pop	{r7, pc}
    3ae4:	0000375d 	.word	0x0000375d

00003ae8 <hri_sercomi2cm_set_CTRLB_SMEN_bit>:
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	return ((Sercom *)hw)->USART.CTRLA.reg;
}

static inline void hri_sercomi2cm_set_CTRLB_SMEN_bit(const void *const hw)
{
    3ae8:	b580      	push	{r7, lr}
    3aea:	b082      	sub	sp, #8
    3aec:	af00      	add	r7, sp, #0
    3aee:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    3af0:	687b      	ldr	r3, [r7, #4]
    3af2:	685b      	ldr	r3, [r3, #4]
    3af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    3af8:	687b      	ldr	r3, [r7, #4]
    3afa:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3afc:	2104      	movs	r1, #4
    3afe:	6878      	ldr	r0, [r7, #4]
    3b00:	4b02      	ldr	r3, [pc, #8]	; (3b0c <hri_sercomi2cm_set_CTRLB_SMEN_bit+0x24>)
    3b02:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3b04:	bf00      	nop
    3b06:	3708      	adds	r7, #8
    3b08:	46bd      	mov	sp, r7
    3b0a:	bd80      	pop	{r7, pc}
    3b0c:	00003711 	.word	0x00003711

00003b10 <hri_sercomi2cm_clear_CTRLB_SMEN_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_SMEN_bit(const void *const hw)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b082      	sub	sp, #8
    3b14:	af00      	add	r7, sp, #0
    3b16:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    3b18:	687b      	ldr	r3, [r7, #4]
    3b1a:	685b      	ldr	r3, [r3, #4]
    3b1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    3b20:	687b      	ldr	r3, [r7, #4]
    3b22:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3b24:	2104      	movs	r1, #4
    3b26:	6878      	ldr	r0, [r7, #4]
    3b28:	4b02      	ldr	r3, [pc, #8]	; (3b34 <hri_sercomi2cm_clear_CTRLB_SMEN_bit+0x24>)
    3b2a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3b2c:	bf00      	nop
    3b2e:	3708      	adds	r7, #8
    3b30:	46bd      	mov	sp, r7
    3b32:	bd80      	pop	{r7, pc}
    3b34:	00003711 	.word	0x00003711

00003b38 <hri_sercomi2cm_set_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_ACKACT_bit(const void *const hw)
{
    3b38:	b580      	push	{r7, lr}
    3b3a:	b082      	sub	sp, #8
    3b3c:	af00      	add	r7, sp, #0
    3b3e:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    3b40:	687b      	ldr	r3, [r7, #4]
    3b42:	685b      	ldr	r3, [r3, #4]
    3b44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
    3b48:	687b      	ldr	r3, [r7, #4]
    3b4a:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3b4c:	2104      	movs	r1, #4
    3b4e:	6878      	ldr	r0, [r7, #4]
    3b50:	4b02      	ldr	r3, [pc, #8]	; (3b5c <hri_sercomi2cm_set_CTRLB_ACKACT_bit+0x24>)
    3b52:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3b54:	bf00      	nop
    3b56:	3708      	adds	r7, #8
    3b58:	46bd      	mov	sp, r7
    3b5a:	bd80      	pop	{r7, pc}
    3b5c:	00003711 	.word	0x00003711

00003b60 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_clear_CTRLB_ACKACT_bit(const void *const hw)
{
    3b60:	b580      	push	{r7, lr}
    3b62:	b082      	sub	sp, #8
    3b64:	af00      	add	r7, sp, #0
    3b66:	6078      	str	r0, [r7, #4]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    3b68:	687b      	ldr	r3, [r7, #4]
    3b6a:	685b      	ldr	r3, [r3, #4]
    3b6c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
    3b70:	687b      	ldr	r3, [r7, #4]
    3b72:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3b74:	2104      	movs	r1, #4
    3b76:	6878      	ldr	r0, [r7, #4]
    3b78:	4b02      	ldr	r3, [pc, #8]	; (3b84 <hri_sercomi2cm_clear_CTRLB_ACKACT_bit+0x24>)
    3b7a:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3b7c:	bf00      	nop
    3b7e:	3708      	adds	r7, #8
    3b80:	46bd      	mov	sp, r7
    3b82:	bd80      	pop	{r7, pc}
    3b84:	00003711 	.word	0x00003711

00003b88 <hri_sercomi2cm_set_CTRLB_CMD_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline void hri_sercomi2cm_set_CTRLB_CMD_bf(const void *const hw, hri_sercomi2cm_ctrlb_reg_t mask)
{
    3b88:	b580      	push	{r7, lr}
    3b8a:	b082      	sub	sp, #8
    3b8c:	af00      	add	r7, sp, #0
    3b8e:	6078      	str	r0, [r7, #4]
    3b90:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    3b92:	687b      	ldr	r3, [r7, #4]
    3b94:	685a      	ldr	r2, [r3, #4]
    3b96:	683b      	ldr	r3, [r7, #0]
    3b98:	041b      	lsls	r3, r3, #16
    3b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    3b9e:	431a      	orrs	r2, r3
    3ba0:	687b      	ldr	r3, [r7, #4]
    3ba2:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3ba4:	2104      	movs	r1, #4
    3ba6:	6878      	ldr	r0, [r7, #4]
    3ba8:	4b02      	ldr	r3, [pc, #8]	; (3bb4 <hri_sercomi2cm_set_CTRLB_CMD_bf+0x2c>)
    3baa:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3bac:	bf00      	nop
    3bae:	3708      	adds	r7, #8
    3bb0:	46bd      	mov	sp, r7
    3bb2:	bd80      	pop	{r7, pc}
    3bb4:	00003711 	.word	0x00003711

00003bb8 <hri_sercomi2cm_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
    3bb8:	b580      	push	{r7, lr}
    3bba:	b082      	sub	sp, #8
    3bbc:	af00      	add	r7, sp, #0
    3bbe:	6078      	str	r0, [r7, #4]
    3bc0:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    3bc2:	687b      	ldr	r3, [r7, #4]
    3bc4:	683a      	ldr	r2, [r7, #0]
    3bc6:	605a      	str	r2, [r3, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3bc8:	2104      	movs	r1, #4
    3bca:	6878      	ldr	r0, [r7, #4]
    3bcc:	4b02      	ldr	r3, [pc, #8]	; (3bd8 <hri_sercomi2cm_write_CTRLB_reg+0x20>)
    3bce:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3bd0:	bf00      	nop
    3bd2:	3708      	adds	r7, #8
    3bd4:	46bd      	mov	sp, r7
    3bd6:	bd80      	pop	{r7, pc}
    3bd8:	00003711 	.word	0x00003711

00003bdc <hri_sercomusart_write_CTRLB_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
    3bdc:	b580      	push	{r7, lr}
    3bde:	b082      	sub	sp, #8
    3be0:	af00      	add	r7, sp, #0
    3be2:	6078      	str	r0, [r7, #4]
    3be4:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	683a      	ldr	r2, [r7, #0]
    3bea:	605a      	str	r2, [r3, #4]
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_MASK);
    3bec:	211f      	movs	r1, #31
    3bee:	6878      	ldr	r0, [r7, #4]
    3bf0:	4b02      	ldr	r3, [pc, #8]	; (3bfc <hri_sercomusart_write_CTRLB_reg+0x20>)
    3bf2:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3bf4:	bf00      	nop
    3bf6:	3708      	adds	r7, #8
    3bf8:	46bd      	mov	sp, r7
    3bfa:	bd80      	pop	{r7, pc}
    3bfc:	0000375d 	.word	0x0000375d

00003c00 <hri_sercomusart_write_CTRLC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_CTRLC_reg(const void *const hw, hri_sercomusart_ctrlc_reg_t data)
{
    3c00:	b480      	push	{r7}
    3c02:	b083      	sub	sp, #12
    3c04:	af00      	add	r7, sp, #0
    3c06:	6078      	str	r0, [r7, #4]
    3c08:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLC.reg = data;
    3c0a:	687b      	ldr	r3, [r7, #4]
    3c0c:	683a      	ldr	r2, [r7, #0]
    3c0e:	609a      	str	r2, [r3, #8]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3c10:	bf00      	nop
    3c12:	370c      	adds	r7, #12
    3c14:	46bd      	mov	sp, r7
    3c16:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c1a:	4770      	bx	lr

00003c1c <hri_sercomi2cm_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
    3c1c:	b480      	push	{r7}
    3c1e:	b083      	sub	sp, #12
    3c20:	af00      	add	r7, sp, #0
    3c22:	6078      	str	r0, [r7, #4]
    3c24:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    3c26:	687b      	ldr	r3, [r7, #4]
    3c28:	683a      	ldr	r2, [r7, #0]
    3c2a:	60da      	str	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3c2c:	bf00      	nop
    3c2e:	370c      	adds	r7, #12
    3c30:	46bd      	mov	sp, r7
    3c32:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c36:	4770      	bx	lr

00003c38 <hri_sercomusart_write_BAUD_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
    3c38:	b480      	push	{r7}
    3c3a:	b083      	sub	sp, #12
    3c3c:	af00      	add	r7, sp, #0
    3c3e:	6078      	str	r0, [r7, #4]
    3c40:	460b      	mov	r3, r1
    3c42:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
    3c44:	687b      	ldr	r3, [r7, #4]
    3c46:	887a      	ldrh	r2, [r7, #2]
    3c48:	819a      	strh	r2, [r3, #12]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3c4a:	bf00      	nop
    3c4c:	370c      	adds	r7, #12
    3c4e:	46bd      	mov	sp, r7
    3c50:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c54:	4770      	bx	lr

00003c56 <hri_sercomusart_write_RXPL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
    3c56:	b480      	push	{r7}
    3c58:	b083      	sub	sp, #12
    3c5a:	af00      	add	r7, sp, #0
    3c5c:	6078      	str	r0, [r7, #4]
    3c5e:	460b      	mov	r3, r1
    3c60:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
    3c62:	687b      	ldr	r3, [r7, #4]
    3c64:	78fa      	ldrb	r2, [r7, #3]
    3c66:	739a      	strb	r2, [r3, #14]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3c68:	bf00      	nop
    3c6a:	370c      	adds	r7, #12
    3c6c:	46bd      	mov	sp, r7
    3c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c72:	4770      	bx	lr

00003c74 <hri_sercomi2cm_write_ADDR_HS_bit>:
	tmp = (tmp & SERCOM_I2CM_ADDR_HS) >> SERCOM_I2CM_ADDR_HS_Pos;
	return (bool)tmp;
}

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
    3c74:	b580      	push	{r7, lr}
    3c76:	b084      	sub	sp, #16
    3c78:	af00      	add	r7, sp, #0
    3c7a:	6078      	str	r0, [r7, #4]
    3c7c:	460b      	mov	r3, r1
    3c7e:	70fb      	strb	r3, [r7, #3]
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    3c80:	687b      	ldr	r3, [r7, #4]
    3c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3c84:	60fb      	str	r3, [r7, #12]
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    3c86:	68fb      	ldr	r3, [r7, #12]
    3c88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3c8c:	60fb      	str	r3, [r7, #12]
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    3c8e:	78fb      	ldrb	r3, [r7, #3]
    3c90:	039b      	lsls	r3, r3, #14
    3c92:	461a      	mov	r2, r3
    3c94:	68fb      	ldr	r3, [r7, #12]
    3c96:	4313      	orrs	r3, r2
    3c98:	60fb      	str	r3, [r7, #12]
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    3c9a:	687b      	ldr	r3, [r7, #4]
    3c9c:	68fa      	ldr	r2, [r7, #12]
    3c9e:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3ca0:	2104      	movs	r1, #4
    3ca2:	6878      	ldr	r0, [r7, #4]
    3ca4:	4b02      	ldr	r3, [pc, #8]	; (3cb0 <hri_sercomi2cm_write_ADDR_HS_bit+0x3c>)
    3ca6:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3ca8:	bf00      	nop
    3caa:	3710      	adds	r7, #16
    3cac:	46bd      	mov	sp, r7
    3cae:	bd80      	pop	{r7, pc}
    3cb0:	00003711 	.word	0x00003711

00003cb4 <hri_sercomi2cm_write_ADDR_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b082      	sub	sp, #8
    3cb8:	af00      	add	r7, sp, #0
    3cba:	6078      	str	r0, [r7, #4]
    3cbc:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    3cbe:	687b      	ldr	r3, [r7, #4]
    3cc0:	683a      	ldr	r2, [r7, #0]
    3cc2:	625a      	str	r2, [r3, #36]	; 0x24
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3cc4:	2104      	movs	r1, #4
    3cc6:	6878      	ldr	r0, [r7, #4]
    3cc8:	4b02      	ldr	r3, [pc, #8]	; (3cd4 <hri_sercomi2cm_write_ADDR_reg+0x20>)
    3cca:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3ccc:	bf00      	nop
    3cce:	3708      	adds	r7, #8
    3cd0:	46bd      	mov	sp, r7
    3cd2:	bd80      	pop	{r7, pc}
    3cd4:	00003711 	.word	0x00003711

00003cd8 <hri_sercomi2cm_read_ADDR_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_addr_reg_t hri_sercomi2cm_read_ADDR_reg(const void *const hw)
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3ce0:	2104      	movs	r1, #4
    3ce2:	6878      	ldr	r0, [r7, #4]
    3ce4:	4b03      	ldr	r3, [pc, #12]	; (3cf4 <hri_sercomi2cm_read_ADDR_reg+0x1c>)
    3ce6:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    3ce8:	687b      	ldr	r3, [r7, #4]
    3cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    3cec:	4618      	mov	r0, r3
    3cee:	3708      	adds	r7, #8
    3cf0:	46bd      	mov	sp, r7
    3cf2:	bd80      	pop	{r7, pc}
    3cf4:	00003711 	.word	0x00003711

00003cf8 <hri_sercomi2cm_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomi2cm_write_DATA_reg(const void *const hw, hri_sercomi2cm_data_reg_t data)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b082      	sub	sp, #8
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	6078      	str	r0, [r7, #4]
    3d00:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.DATA.reg = data;
    3d02:	687b      	ldr	r3, [r7, #4]
    3d04:	683a      	ldr	r2, [r7, #0]
    3d06:	629a      	str	r2, [r3, #40]	; 0x28
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3d08:	2104      	movs	r1, #4
    3d0a:	6878      	ldr	r0, [r7, #4]
    3d0c:	4b02      	ldr	r3, [pc, #8]	; (3d18 <hri_sercomi2cm_write_DATA_reg+0x20>)
    3d0e:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3d10:	bf00      	nop
    3d12:	3708      	adds	r7, #8
    3d14:	46bd      	mov	sp, r7
    3d16:	bd80      	pop	{r7, pc}
    3d18:	00003711 	.word	0x00003711

00003d1c <hri_sercomi2cm_read_DATA_reg>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_data_reg_t hri_sercomi2cm_read_DATA_reg(const void *const hw)
{
    3d1c:	b580      	push	{r7, lr}
    3d1e:	b082      	sub	sp, #8
    3d20:	af00      	add	r7, sp, #0
    3d22:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3d24:	2104      	movs	r1, #4
    3d26:	6878      	ldr	r0, [r7, #4]
    3d28:	4b03      	ldr	r3, [pc, #12]	; (3d38 <hri_sercomi2cm_read_DATA_reg+0x1c>)
    3d2a:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
    3d2c:	687b      	ldr	r3, [r7, #4]
    3d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    3d30:	4618      	mov	r0, r3
    3d32:	3708      	adds	r7, #8
    3d34:	46bd      	mov	sp, r7
    3d36:	bd80      	pop	{r7, pc}
    3d38:	00003711 	.word	0x00003711

00003d3c <hri_sercomusart_write_DATA_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
    3d3c:	b480      	push	{r7}
    3d3e:	b083      	sub	sp, #12
    3d40:	af00      	add	r7, sp, #0
    3d42:	6078      	str	r0, [r7, #4]
    3d44:	6039      	str	r1, [r7, #0]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
    3d46:	687b      	ldr	r3, [r7, #4]
    3d48:	683a      	ldr	r2, [r7, #0]
    3d4a:	629a      	str	r2, [r3, #40]	; 0x28
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3d4c:	bf00      	nop
    3d4e:	370c      	adds	r7, #12
    3d50:	46bd      	mov	sp, r7
    3d52:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d56:	4770      	bx	lr

00003d58 <hri_sercomusart_read_DATA_reg>:
	((Sercom *)hw)->USART.DATA.reg ^= mask;
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_data_reg_t hri_sercomusart_read_DATA_reg(const void *const hw)
{
    3d58:	b480      	push	{r7}
    3d5a:	b083      	sub	sp, #12
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    3d60:	687b      	ldr	r3, [r7, #4]
    3d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
    3d64:	4618      	mov	r0, r3
    3d66:	370c      	adds	r7, #12
    3d68:	46bd      	mov	sp, r7
    3d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d6e:	4770      	bx	lr

00003d70 <hri_sercomusart_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
    3d70:	b480      	push	{r7}
    3d72:	b083      	sub	sp, #12
    3d74:	af00      	add	r7, sp, #0
    3d76:	6078      	str	r0, [r7, #4]
    3d78:	460b      	mov	r3, r1
    3d7a:	70fb      	strb	r3, [r7, #3]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    3d7c:	687b      	ldr	r3, [r7, #4]
    3d7e:	78fa      	ldrb	r2, [r7, #3]
    3d80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3d84:	bf00      	nop
    3d86:	370c      	adds	r7, #12
    3d88:	46bd      	mov	sp, r7
    3d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3d8e:	4770      	bx	lr

00003d90 <hri_sercomusart_clear_STATUS_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_sercomusart_clear_STATUS_reg(const void *const hw, hri_sercomusart_status_reg_t mask)
{
    3d90:	b480      	push	{r7}
    3d92:	b083      	sub	sp, #12
    3d94:	af00      	add	r7, sp, #0
    3d96:	6078      	str	r0, [r7, #4]
    3d98:	460b      	mov	r3, r1
    3d9a:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.STATUS.reg = mask;
    3d9c:	687b      	ldr	r3, [r7, #4]
    3d9e:	887a      	ldrh	r2, [r7, #2]
    3da0:	835a      	strh	r2, [r3, #26]
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3da2:	bf00      	nop
    3da4:	370c      	adds	r7, #12
    3da6:	46bd      	mov	sp, r7
    3da8:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dac:	4770      	bx	lr

00003dae <hri_sercomusart_read_STATUS_reg>:

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
    3dae:	b480      	push	{r7}
    3db0:	b083      	sub	sp, #12
    3db2:	af00      	add	r7, sp, #0
    3db4:	6078      	str	r0, [r7, #4]
	return ((Sercom *)hw)->USART.STATUS.reg;
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	8b5b      	ldrh	r3, [r3, #26]
    3dba:	b29b      	uxth	r3, r3
}
    3dbc:	4618      	mov	r0, r3
    3dbe:	370c      	adds	r7, #12
    3dc0:	46bd      	mov	sp, r7
    3dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dc6:	4770      	bx	lr

00003dc8 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf>:
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b082      	sub	sp, #8
    3dcc:	af00      	add	r7, sp, #0
    3dce:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3dd0:	2104      	movs	r1, #4
    3dd2:	6878      	ldr	r0, [r7, #4]
    3dd4:	4b06      	ldr	r3, [pc, #24]	; (3df0 <hri_sercomi2cm_read_STATUS_BUSSTATE_bf+0x28>)
    3dd6:	4798      	blx	r3
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    3dd8:	687b      	ldr	r3, [r7, #4]
    3dda:	8b5b      	ldrh	r3, [r3, #26]
    3ddc:	b29b      	uxth	r3, r3
    3dde:	091b      	lsrs	r3, r3, #4
    3de0:	b29b      	uxth	r3, r3
    3de2:	f003 0303 	and.w	r3, r3, #3
    3de6:	b29b      	uxth	r3, r3
}
    3de8:	4618      	mov	r0, r3
    3dea:	3708      	adds	r7, #8
    3dec:	46bd      	mov	sp, r7
    3dee:	bd80      	pop	{r7, pc}
    3df0:	00003711 	.word	0x00003711

00003df4 <hri_sercomi2cm_read_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg |= mask;
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
    3df4:	b580      	push	{r7, lr}
    3df6:	b082      	sub	sp, #8
    3df8:	af00      	add	r7, sp, #0
    3dfa:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3dfc:	2104      	movs	r1, #4
    3dfe:	6878      	ldr	r0, [r7, #4]
    3e00:	4b04      	ldr	r3, [pc, #16]	; (3e14 <hri_sercomi2cm_read_STATUS_reg+0x20>)
    3e02:	4798      	blx	r3
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    3e04:	687b      	ldr	r3, [r7, #4]
    3e06:	8b5b      	ldrh	r3, [r3, #26]
    3e08:	b29b      	uxth	r3, r3
}
    3e0a:	4618      	mov	r0, r3
    3e0c:	3708      	adds	r7, #8
    3e0e:	46bd      	mov	sp, r7
    3e10:	bd80      	pop	{r7, pc}
    3e12:	bf00      	nop
    3e14:	00003711 	.word	0x00003711

00003e18 <hri_sercomi2cm_clear_STATUS_reg>:
{
	((Sercom *)hw)->I2CM.STATUS.reg ^= mask;
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
    3e18:	b580      	push	{r7, lr}
    3e1a:	b082      	sub	sp, #8
    3e1c:	af00      	add	r7, sp, #0
    3e1e:	6078      	str	r0, [r7, #4]
    3e20:	460b      	mov	r3, r1
    3e22:	807b      	strh	r3, [r7, #2]
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	887a      	ldrh	r2, [r7, #2]
    3e28:	835a      	strh	r2, [r3, #26]
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
    3e2a:	2104      	movs	r1, #4
    3e2c:	6878      	ldr	r0, [r7, #4]
    3e2e:	4b03      	ldr	r3, [pc, #12]	; (3e3c <hri_sercomi2cm_clear_STATUS_reg+0x24>)
    3e30:	4798      	blx	r3
	SERCOM_CRITICAL_SECTION_LEAVE();
}
    3e32:	bf00      	nop
    3e34:	3708      	adds	r7, #8
    3e36:	46bd      	mov	sp, r7
    3e38:	bd80      	pop	{r7, pc}
    3e3a:	bf00      	nop
    3e3c:	00003711 	.word	0x00003711

00003e40 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b086      	sub	sp, #24
    3e44:	af00      	add	r7, sp, #0
    3e46:	6078      	str	r0, [r7, #4]
    3e48:	6039      	str	r1, [r7, #0]
	int32_t init_status;

	ASSERT(device);
    3e4a:	687b      	ldr	r3, [r7, #4]
    3e4c:	2b00      	cmp	r3, #0
    3e4e:	bf14      	ite	ne
    3e50:	2301      	movne	r3, #1
    3e52:	2300      	moveq	r3, #0
    3e54:	b2db      	uxtb	r3, r3
    3e56:	22cb      	movs	r2, #203	; 0xcb
    3e58:	491c      	ldr	r1, [pc, #112]	; (3ecc <_usart_async_init+0x8c>)
    3e5a:	4618      	mov	r0, r3
    3e5c:	4b1c      	ldr	r3, [pc, #112]	; (3ed0 <_usart_async_init+0x90>)
    3e5e:	4798      	blx	r3

	init_status = _usart_init(hw);
    3e60:	6838      	ldr	r0, [r7, #0]
    3e62:	4b1c      	ldr	r3, [pc, #112]	; (3ed4 <_usart_async_init+0x94>)
    3e64:	4798      	blx	r3
    3e66:	60f8      	str	r0, [r7, #12]
	if (init_status) {
    3e68:	68fb      	ldr	r3, [r7, #12]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d001      	beq.n	3e72 <_usart_async_init+0x32>
		return init_status;
    3e6e:	68fb      	ldr	r3, [r7, #12]
    3e70:	e027      	b.n	3ec2 <_usart_async_init+0x82>
	}
	device->hw = hw;
    3e72:	687b      	ldr	r3, [r7, #4]
    3e74:	683a      	ldr	r2, [r7, #0]
    3e76:	619a      	str	r2, [r3, #24]
	_sercom_init_irq_param(hw, (void *)device);
    3e78:	6879      	ldr	r1, [r7, #4]
    3e7a:	6838      	ldr	r0, [r7, #0]
    3e7c:	4b16      	ldr	r3, [pc, #88]	; (3ed8 <_usart_async_init+0x98>)
    3e7e:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    3e80:	6838      	ldr	r0, [r7, #0]
    3e82:	4b16      	ldr	r3, [pc, #88]	; (3edc <_usart_async_init+0x9c>)
    3e84:	4798      	blx	r3
    3e86:	4603      	mov	r3, r0
    3e88:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    3e8a:	2300      	movs	r3, #0
    3e8c:	613b      	str	r3, [r7, #16]
    3e8e:	e014      	b.n	3eba <_usart_async_init+0x7a>
		NVIC_DisableIRQ((IRQn_Type)irq);
    3e90:	7dfb      	ldrb	r3, [r7, #23]
    3e92:	b21b      	sxth	r3, r3
    3e94:	4618      	mov	r0, r3
    3e96:	4b12      	ldr	r3, [pc, #72]	; (3ee0 <_usart_async_init+0xa0>)
    3e98:	4798      	blx	r3
		NVIC_ClearPendingIRQ((IRQn_Type)irq);
    3e9a:	7dfb      	ldrb	r3, [r7, #23]
    3e9c:	b21b      	sxth	r3, r3
    3e9e:	4618      	mov	r0, r3
    3ea0:	4b10      	ldr	r3, [pc, #64]	; (3ee4 <_usart_async_init+0xa4>)
    3ea2:	4798      	blx	r3
		NVIC_EnableIRQ((IRQn_Type)irq);
    3ea4:	7dfb      	ldrb	r3, [r7, #23]
    3ea6:	b21b      	sxth	r3, r3
    3ea8:	4618      	mov	r0, r3
    3eaa:	4b0f      	ldr	r3, [pc, #60]	; (3ee8 <_usart_async_init+0xa8>)
    3eac:	4798      	blx	r3
		irq++;
    3eae:	7dfb      	ldrb	r3, [r7, #23]
    3eb0:	3301      	adds	r3, #1
    3eb2:	75fb      	strb	r3, [r7, #23]
	for (uint32_t i = 0; i < 4; i++) {
    3eb4:	693b      	ldr	r3, [r7, #16]
    3eb6:	3301      	adds	r3, #1
    3eb8:	613b      	str	r3, [r7, #16]
    3eba:	693b      	ldr	r3, [r7, #16]
    3ebc:	2b03      	cmp	r3, #3
    3ebe:	d9e7      	bls.n	3e90 <_usart_async_init+0x50>
	}
	return ERR_NONE;
    3ec0:	2300      	movs	r3, #0
}
    3ec2:	4618      	mov	r0, r3
    3ec4:	3718      	adds	r7, #24
    3ec6:	46bd      	mov	sp, r7
    3ec8:	bd80      	pop	{r7, pc}
    3eca:	bf00      	nop
    3ecc:	00005f04 	.word	0x00005f04
    3ed0:	00001869 	.word	0x00001869
    3ed4:	00004181 	.word	0x00004181
    3ed8:	00004155 	.word	0x00004155
    3edc:	000045f5 	.word	0x000045f5
    3ee0:	00003691 	.word	0x00003691
    3ee4:	000036d5 	.word	0x000036d5
    3ee8:	00003655 	.word	0x00003655

00003eec <_usart_async_enable>:

/**
 * \brief Enable SERCOM module
 */
void _usart_async_enable(struct _usart_async_device *const device)
{
    3eec:	b580      	push	{r7, lr}
    3eee:	b082      	sub	sp, #8
    3ef0:	af00      	add	r7, sp, #0
    3ef2:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	699b      	ldr	r3, [r3, #24]
    3ef8:	4618      	mov	r0, r3
    3efa:	4b03      	ldr	r3, [pc, #12]	; (3f08 <_usart_async_enable+0x1c>)
    3efc:	4798      	blx	r3
}
    3efe:	bf00      	nop
    3f00:	3708      	adds	r7, #8
    3f02:	46bd      	mov	sp, r7
    3f04:	bd80      	pop	{r7, pc}
    3f06:	bf00      	nop
    3f08:	00003a45 	.word	0x00003a45

00003f0c <_usart_async_write_byte>:

/**
 * \brief Write a byte to the given SERCOM USART instance
 */
void _usart_async_write_byte(struct _usart_async_device *const device, uint8_t data)
{
    3f0c:	b580      	push	{r7, lr}
    3f0e:	b082      	sub	sp, #8
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	460b      	mov	r3, r1
    3f16:	70fb      	strb	r3, [r7, #3]
	hri_sercomusart_write_DATA_reg(device->hw, data);
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	699b      	ldr	r3, [r3, #24]
    3f1c:	78fa      	ldrb	r2, [r7, #3]
    3f1e:	4611      	mov	r1, r2
    3f20:	4618      	mov	r0, r3
    3f22:	4b03      	ldr	r3, [pc, #12]	; (3f30 <_usart_async_write_byte+0x24>)
    3f24:	4798      	blx	r3
}
    3f26:	bf00      	nop
    3f28:	3708      	adds	r7, #8
    3f2a:	46bd      	mov	sp, r7
    3f2c:	bd80      	pop	{r7, pc}
    3f2e:	bf00      	nop
    3f30:	00003d3d 	.word	0x00003d3d

00003f34 <_usart_async_is_byte_sent>:

/**
 * \brief Check if USART is ready to send next byte
 */
bool _usart_async_is_byte_sent(const struct _usart_async_device *const device)
{
    3f34:	b580      	push	{r7, lr}
    3f36:	b082      	sub	sp, #8
    3f38:	af00      	add	r7, sp, #0
    3f3a:	6078      	str	r0, [r7, #4]
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    3f3c:	687b      	ldr	r3, [r7, #4]
    3f3e:	699b      	ldr	r3, [r3, #24]
    3f40:	4618      	mov	r0, r3
    3f42:	4b03      	ldr	r3, [pc, #12]	; (3f50 <_usart_async_is_byte_sent+0x1c>)
    3f44:	4798      	blx	r3
    3f46:	4603      	mov	r3, r0
}
    3f48:	4618      	mov	r0, r3
    3f4a:	3708      	adds	r7, #8
    3f4c:	46bd      	mov	sp, r7
    3f4e:	bd80      	pop	{r7, pc}
    3f50:	000037f7 	.word	0x000037f7

00003f54 <_usart_async_enable_byte_sent_irq>:

/**
 * \brief Enable data register empty interrupt
 */
void _usart_async_enable_byte_sent_irq(struct _usart_async_device *const device)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b082      	sub	sp, #8
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    3f5c:	687b      	ldr	r3, [r7, #4]
    3f5e:	699b      	ldr	r3, [r3, #24]
    3f60:	4618      	mov	r0, r3
    3f62:	4b03      	ldr	r3, [pc, #12]	; (3f70 <_usart_async_enable_byte_sent_irq+0x1c>)
    3f64:	4798      	blx	r3
}
    3f66:	bf00      	nop
    3f68:	3708      	adds	r7, #8
    3f6a:	46bd      	mov	sp, r7
    3f6c:	bd80      	pop	{r7, pc}
    3f6e:	bf00      	nop
    3f70:	000038b7 	.word	0x000038b7

00003f74 <_usart_async_enable_tx_done_irq>:

/**
 * \brief Enable transmission complete interrupt
 */
void _usart_async_enable_tx_done_irq(struct _usart_async_device *const device)
{
    3f74:	b580      	push	{r7, lr}
    3f76:	b082      	sub	sp, #8
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	699b      	ldr	r3, [r3, #24]
    3f80:	4618      	mov	r0, r3
    3f82:	4b03      	ldr	r3, [pc, #12]	; (3f90 <_usart_async_enable_tx_done_irq+0x1c>)
    3f84:	4798      	blx	r3
}
    3f86:	bf00      	nop
    3f88:	3708      	adds	r7, #8
    3f8a:	46bd      	mov	sp, r7
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	bf00      	nop
    3f90:	00003913 	.word	0x00003913

00003f94 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    3f94:	b4b0      	push	{r4, r5, r7}
    3f96:	b08d      	sub	sp, #52	; 0x34
    3f98:	af00      	add	r7, sp, #0
    3f9a:	6078      	str	r0, [r7, #4]
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    3f9c:	4b13      	ldr	r3, [pc, #76]	; (3fec <_sercom_get_hardware_index+0x58>)
    3f9e:	f107 040c 	add.w	r4, r7, #12
    3fa2:	461d      	mov	r5, r3
    3fa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3fa8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fb0:	2300      	movs	r3, #0
    3fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    3fb4:	e010      	b.n	3fd8 <_sercom_get_hardware_index+0x44>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    3fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fb8:	009b      	lsls	r3, r3, #2
    3fba:	f107 0230 	add.w	r2, r7, #48	; 0x30
    3fbe:	4413      	add	r3, r2
    3fc0:	f853 3c24 	ldr.w	r3, [r3, #-36]
    3fc4:	461a      	mov	r2, r3
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	429a      	cmp	r2, r3
    3fca:	d102      	bne.n	3fd2 <_sercom_get_hardware_index+0x3e>
			return i;
    3fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fce:	b2db      	uxtb	r3, r3
    3fd0:	e006      	b.n	3fe0 <_sercom_get_hardware_index+0x4c>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fd4:	3301      	adds	r3, #1
    3fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    3fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fda:	2b07      	cmp	r3, #7
    3fdc:	d9eb      	bls.n	3fb6 <_sercom_get_hardware_index+0x22>
		}
	}
	return 0;
    3fde:	2300      	movs	r3, #0
}
    3fe0:	4618      	mov	r0, r3
    3fe2:	3734      	adds	r7, #52	; 0x34
    3fe4:	46bd      	mov	sp, r7
    3fe6:	bcb0      	pop	{r4, r5, r7}
    3fe8:	4770      	bx	lr
    3fea:	bf00      	nop
    3fec:	00005f20 	.word	0x00005f20

00003ff0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    3ff0:	b590      	push	{r4, r7, lr}
    3ff2:	b085      	sub	sp, #20
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
	void *hw = device->hw;
    3ff8:	687b      	ldr	r3, [r7, #4]
    3ffa:	699b      	ldr	r3, [r3, #24]
    3ffc:	60fb      	str	r3, [r7, #12]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    3ffe:	68f8      	ldr	r0, [r7, #12]
    4000:	4b2f      	ldr	r3, [pc, #188]	; (40c0 <_sercom_usart_interrupt_handler+0xd0>)
    4002:	4798      	blx	r3
    4004:	4603      	mov	r3, r0
    4006:	2b00      	cmp	r3, #0
    4008:	d00d      	beq.n	4026 <_sercom_usart_interrupt_handler+0x36>
    400a:	68f8      	ldr	r0, [r7, #12]
    400c:	4b2d      	ldr	r3, [pc, #180]	; (40c4 <_sercom_usart_interrupt_handler+0xd4>)
    400e:	4798      	blx	r3
    4010:	4603      	mov	r3, r0
    4012:	2b00      	cmp	r3, #0
    4014:	d007      	beq.n	4026 <_sercom_usart_interrupt_handler+0x36>
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
    4016:	68f8      	ldr	r0, [r7, #12]
    4018:	4b2b      	ldr	r3, [pc, #172]	; (40c8 <_sercom_usart_interrupt_handler+0xd8>)
    401a:	4798      	blx	r3
		device->usart_cb.tx_byte_sent(device);
    401c:	687b      	ldr	r3, [r7, #4]
    401e:	681b      	ldr	r3, [r3, #0]
    4020:	6878      	ldr	r0, [r7, #4]
    4022:	4798      	blx	r3
    4024:	e049      	b.n	40ba <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    4026:	68f8      	ldr	r0, [r7, #12]
    4028:	4b28      	ldr	r3, [pc, #160]	; (40cc <_sercom_usart_interrupt_handler+0xdc>)
    402a:	4798      	blx	r3
    402c:	4603      	mov	r3, r0
    402e:	2b00      	cmp	r3, #0
    4030:	d00d      	beq.n	404e <_sercom_usart_interrupt_handler+0x5e>
    4032:	68f8      	ldr	r0, [r7, #12]
    4034:	4b26      	ldr	r3, [pc, #152]	; (40d0 <_sercom_usart_interrupt_handler+0xe0>)
    4036:	4798      	blx	r3
    4038:	4603      	mov	r3, r0
    403a:	2b00      	cmp	r3, #0
    403c:	d007      	beq.n	404e <_sercom_usart_interrupt_handler+0x5e>
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
    403e:	68f8      	ldr	r0, [r7, #12]
    4040:	4b24      	ldr	r3, [pc, #144]	; (40d4 <_sercom_usart_interrupt_handler+0xe4>)
    4042:	4798      	blx	r3
		device->usart_cb.tx_done_cb(device);
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	689b      	ldr	r3, [r3, #8]
    4048:	6878      	ldr	r0, [r7, #4]
    404a:	4798      	blx	r3
    404c:	e035      	b.n	40ba <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    404e:	68f8      	ldr	r0, [r7, #12]
    4050:	4b21      	ldr	r3, [pc, #132]	; (40d8 <_sercom_usart_interrupt_handler+0xe8>)
    4052:	4798      	blx	r3
    4054:	4603      	mov	r3, r0
    4056:	2b00      	cmp	r3, #0
    4058:	d017      	beq.n	408a <_sercom_usart_interrupt_handler+0x9a>
		if (hri_sercomusart_read_STATUS_reg(hw)
    405a:	68f8      	ldr	r0, [r7, #12]
    405c:	4b1f      	ldr	r3, [pc, #124]	; (40dc <_sercom_usart_interrupt_handler+0xec>)
    405e:	4798      	blx	r3
    4060:	4603      	mov	r3, r0
		    & (SERCOM_USART_STATUS_PERR | SERCOM_USART_STATUS_FERR | SERCOM_USART_STATUS_BUFOVF
    4062:	f003 0337 	and.w	r3, r3, #55	; 0x37
		if (hri_sercomusart_read_STATUS_reg(hw)
    4066:	2b00      	cmp	r3, #0
    4068:	d004      	beq.n	4074 <_sercom_usart_interrupt_handler+0x84>
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
    406a:	21ff      	movs	r1, #255	; 0xff
    406c:	68f8      	ldr	r0, [r7, #12]
    406e:	4b1c      	ldr	r3, [pc, #112]	; (40e0 <_sercom_usart_interrupt_handler+0xf0>)
    4070:	4798      	blx	r3
			return;
    4072:	e022      	b.n	40ba <_sercom_usart_interrupt_handler+0xca>
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	685c      	ldr	r4, [r3, #4]
    4078:	68f8      	ldr	r0, [r7, #12]
    407a:	4b1a      	ldr	r3, [pc, #104]	; (40e4 <_sercom_usart_interrupt_handler+0xf4>)
    407c:	4798      	blx	r3
    407e:	4603      	mov	r3, r0
    4080:	b2db      	uxtb	r3, r3
    4082:	4619      	mov	r1, r3
    4084:	6878      	ldr	r0, [r7, #4]
    4086:	47a0      	blx	r4
    4088:	e017      	b.n	40ba <_sercom_usart_interrupt_handler+0xca>
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    408a:	68f8      	ldr	r0, [r7, #12]
    408c:	4b16      	ldr	r3, [pc, #88]	; (40e8 <_sercom_usart_interrupt_handler+0xf8>)
    408e:	4798      	blx	r3
    4090:	4603      	mov	r3, r0
    4092:	2b00      	cmp	r3, #0
    4094:	d011      	beq.n	40ba <_sercom_usart_interrupt_handler+0xca>
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
    4096:	68f8      	ldr	r0, [r7, #12]
    4098:	4b14      	ldr	r3, [pc, #80]	; (40ec <_sercom_usart_interrupt_handler+0xfc>)
    409a:	4798      	blx	r3
		device->usart_cb.error_cb(device);
    409c:	687b      	ldr	r3, [r7, #4]
    409e:	68db      	ldr	r3, [r3, #12]
    40a0:	6878      	ldr	r0, [r7, #4]
    40a2:	4798      	blx	r3
		status = hri_sercomusart_read_STATUS_reg(hw);
    40a4:	68f8      	ldr	r0, [r7, #12]
    40a6:	4b0d      	ldr	r3, [pc, #52]	; (40dc <_sercom_usart_interrupt_handler+0xec>)
    40a8:	4798      	blx	r3
    40aa:	4603      	mov	r3, r0
    40ac:	60bb      	str	r3, [r7, #8]
		hri_sercomusart_clear_STATUS_reg(hw, status);
    40ae:	68bb      	ldr	r3, [r7, #8]
    40b0:	b29b      	uxth	r3, r3
    40b2:	4619      	mov	r1, r3
    40b4:	68f8      	ldr	r0, [r7, #12]
    40b6:	4b0a      	ldr	r3, [pc, #40]	; (40e0 <_sercom_usart_interrupt_handler+0xf0>)
    40b8:	4798      	blx	r3
	}
}
    40ba:	3714      	adds	r7, #20
    40bc:	46bd      	mov	sp, r7
    40be:	bd90      	pop	{r4, r7, pc}
    40c0:	000037f7 	.word	0x000037f7
    40c4:	000038d1 	.word	0x000038d1
    40c8:	000038f9 	.word	0x000038f9
    40cc:	0000381f 	.word	0x0000381f
    40d0:	0000392d 	.word	0x0000392d
    40d4:	00003957 	.word	0x00003957
    40d8:	00003849 	.word	0x00003849
    40dc:	00003daf 	.word	0x00003daf
    40e0:	00003d91 	.word	0x00003d91
    40e4:	00003d59 	.word	0x00003d59
    40e8:	00003873 	.word	0x00003873
    40ec:	0000389d 	.word	0x0000389d

000040f0 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
    40f0:	b580      	push	{r7, lr}
    40f2:	b084      	sub	sp, #16
    40f4:	af00      	add	r7, sp, #0
    40f6:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    40f8:	6878      	ldr	r0, [r7, #4]
    40fa:	4b12      	ldr	r3, [pc, #72]	; (4144 <_get_sercom_index+0x54>)
    40fc:	4798      	blx	r3
    40fe:	4603      	mov	r3, r0
    4100:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    4102:	2300      	movs	r3, #0
    4104:	73fb      	strb	r3, [r7, #15]
    4106:	e00f      	b.n	4128 <_get_sercom_index+0x38>
		if (_usarts[i].number == sercom_offset) {
    4108:	7bfa      	ldrb	r2, [r7, #15]
    410a:	490f      	ldr	r1, [pc, #60]	; (4148 <_get_sercom_index+0x58>)
    410c:	4613      	mov	r3, r2
    410e:	005b      	lsls	r3, r3, #1
    4110:	4413      	add	r3, r2
    4112:	00db      	lsls	r3, r3, #3
    4114:	440b      	add	r3, r1
    4116:	781b      	ldrb	r3, [r3, #0]
    4118:	7bba      	ldrb	r2, [r7, #14]
    411a:	429a      	cmp	r2, r3
    411c:	d101      	bne.n	4122 <_get_sercom_index+0x32>
			return i;
    411e:	7bfb      	ldrb	r3, [r7, #15]
    4120:	e00c      	b.n	413c <_get_sercom_index+0x4c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    4122:	7bfb      	ldrb	r3, [r7, #15]
    4124:	3301      	adds	r3, #1
    4126:	73fb      	strb	r3, [r7, #15]
    4128:	7bfb      	ldrb	r3, [r7, #15]
    412a:	2b00      	cmp	r3, #0
    412c:	d0ec      	beq.n	4108 <_get_sercom_index+0x18>
		}
	}

	ASSERT(false);
    412e:	f240 226b 	movw	r2, #619	; 0x26b
    4132:	4906      	ldr	r1, [pc, #24]	; (414c <_get_sercom_index+0x5c>)
    4134:	2000      	movs	r0, #0
    4136:	4b06      	ldr	r3, [pc, #24]	; (4150 <_get_sercom_index+0x60>)
    4138:	4798      	blx	r3
	return 0;
    413a:	2300      	movs	r3, #0
}
    413c:	4618      	mov	r0, r3
    413e:	3710      	adds	r7, #16
    4140:	46bd      	mov	sp, r7
    4142:	bd80      	pop	{r7, pc}
    4144:	00003f95 	.word	0x00003f95
    4148:	20000000 	.word	0x20000000
    414c:	00005f04 	.word	0x00005f04
    4150:	00001869 	.word	0x00001869

00004154 <_sercom_init_irq_param>:

/**
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{
    4154:	b480      	push	{r7}
    4156:	b083      	sub	sp, #12
    4158:	af00      	add	r7, sp, #0
    415a:	6078      	str	r0, [r7, #4]
    415c:	6039      	str	r1, [r7, #0]

	if (hw == SERCOM1) {
    415e:	687b      	ldr	r3, [r7, #4]
    4160:	4a05      	ldr	r2, [pc, #20]	; (4178 <_sercom_init_irq_param+0x24>)
    4162:	4293      	cmp	r3, r2
    4164:	d102      	bne.n	416c <_sercom_init_irq_param+0x18>
		_sercom1_dev = (struct _usart_async_device *)dev;
    4166:	4a05      	ldr	r2, [pc, #20]	; (417c <_sercom_init_irq_param+0x28>)
    4168:	683b      	ldr	r3, [r7, #0]
    416a:	6013      	str	r3, [r2, #0]
	}
}
    416c:	bf00      	nop
    416e:	370c      	adds	r7, #12
    4170:	46bd      	mov	sp, r7
    4172:	f85d 7b04 	ldr.w	r7, [sp], #4
    4176:	4770      	bx	lr
    4178:	40003400 	.word	0x40003400
    417c:	20000a78 	.word	0x20000a78

00004180 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
    4180:	b580      	push	{r7, lr}
    4182:	b084      	sub	sp, #16
    4184:	af00      	add	r7, sp, #0
    4186:	6078      	str	r0, [r7, #4]
	uint8_t i = _get_sercom_index(hw);
    4188:	6878      	ldr	r0, [r7, #4]
    418a:	4b61      	ldr	r3, [pc, #388]	; (4310 <_usart_init+0x190>)
    418c:	4798      	blx	r3
    418e:	4603      	mov	r3, r0
    4190:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    4192:	2101      	movs	r1, #1
    4194:	6878      	ldr	r0, [r7, #4]
    4196:	4b5f      	ldr	r3, [pc, #380]	; (4314 <_usart_init+0x194>)
    4198:	4798      	blx	r3
    419a:	4603      	mov	r3, r0
    419c:	f083 0301 	eor.w	r3, r3, #1
    41a0:	b2db      	uxtb	r3, r3
    41a2:	2b00      	cmp	r3, #0
    41a4:	d020      	beq.n	41e8 <_usart_init+0x68>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    41a6:	7bfa      	ldrb	r2, [r7, #15]
    41a8:	495b      	ldr	r1, [pc, #364]	; (4318 <_usart_init+0x198>)
    41aa:	4613      	mov	r3, r2
    41ac:	005b      	lsls	r3, r3, #1
    41ae:	4413      	add	r3, r2
    41b0:	00db      	lsls	r3, r3, #3
    41b2:	440b      	add	r3, r1
    41b4:	3304      	adds	r3, #4
    41b6:	681b      	ldr	r3, [r3, #0]
    41b8:	f003 031c 	and.w	r3, r3, #28
    41bc:	60bb      	str	r3, [r7, #8]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    41be:	2102      	movs	r1, #2
    41c0:	6878      	ldr	r0, [r7, #4]
    41c2:	4b56      	ldr	r3, [pc, #344]	; (431c <_usart_init+0x19c>)
    41c4:	4798      	blx	r3
    41c6:	4603      	mov	r3, r0
    41c8:	2b00      	cmp	r3, #0
    41ca:	d006      	beq.n	41da <_usart_init+0x5a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
    41cc:	6878      	ldr	r0, [r7, #4]
    41ce:	4b54      	ldr	r3, [pc, #336]	; (4320 <_usart_init+0x1a0>)
    41d0:	4798      	blx	r3
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
    41d2:	2102      	movs	r1, #2
    41d4:	6878      	ldr	r0, [r7, #4]
    41d6:	4b53      	ldr	r3, [pc, #332]	; (4324 <_usart_init+0x1a4>)
    41d8:	4798      	blx	r3
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    41da:	68bb      	ldr	r3, [r7, #8]
    41dc:	f043 0301 	orr.w	r3, r3, #1
    41e0:	4619      	mov	r1, r3
    41e2:	6878      	ldr	r0, [r7, #4]
    41e4:	4b50      	ldr	r3, [pc, #320]	; (4328 <_usart_init+0x1a8>)
    41e6:	4798      	blx	r3
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);
    41e8:	2101      	movs	r1, #1
    41ea:	6878      	ldr	r0, [r7, #4]
    41ec:	4b4d      	ldr	r3, [pc, #308]	; (4324 <_usart_init+0x1a4>)
    41ee:	4798      	blx	r3

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    41f0:	7bfa      	ldrb	r2, [r7, #15]
    41f2:	4949      	ldr	r1, [pc, #292]	; (4318 <_usart_init+0x198>)
    41f4:	4613      	mov	r3, r2
    41f6:	005b      	lsls	r3, r3, #1
    41f8:	4413      	add	r3, r2
    41fa:	00db      	lsls	r3, r3, #3
    41fc:	440b      	add	r3, r1
    41fe:	3304      	adds	r3, #4
    4200:	681b      	ldr	r3, [r3, #0]
    4202:	4619      	mov	r1, r3
    4204:	6878      	ldr	r0, [r7, #4]
    4206:	4b48      	ldr	r3, [pc, #288]	; (4328 <_usart_init+0x1a8>)
    4208:	4798      	blx	r3
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    420a:	7bfa      	ldrb	r2, [r7, #15]
    420c:	4942      	ldr	r1, [pc, #264]	; (4318 <_usart_init+0x198>)
    420e:	4613      	mov	r3, r2
    4210:	005b      	lsls	r3, r3, #1
    4212:	4413      	add	r3, r2
    4214:	00db      	lsls	r3, r3, #3
    4216:	440b      	add	r3, r1
    4218:	3308      	adds	r3, #8
    421a:	681b      	ldr	r3, [r3, #0]
    421c:	4619      	mov	r1, r3
    421e:	6878      	ldr	r0, [r7, #4]
    4220:	4b42      	ldr	r3, [pc, #264]	; (432c <_usart_init+0x1ac>)
    4222:	4798      	blx	r3
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    4224:	7bfa      	ldrb	r2, [r7, #15]
    4226:	493c      	ldr	r1, [pc, #240]	; (4318 <_usart_init+0x198>)
    4228:	4613      	mov	r3, r2
    422a:	005b      	lsls	r3, r3, #1
    422c:	4413      	add	r3, r2
    422e:	00db      	lsls	r3, r3, #3
    4230:	440b      	add	r3, r1
    4232:	330c      	adds	r3, #12
    4234:	681b      	ldr	r3, [r3, #0]
    4236:	4619      	mov	r1, r3
    4238:	6878      	ldr	r0, [r7, #4]
    423a:	4b3d      	ldr	r3, [pc, #244]	; (4330 <_usart_init+0x1b0>)
    423c:	4798      	blx	r3
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    423e:	7bfa      	ldrb	r2, [r7, #15]
    4240:	4935      	ldr	r1, [pc, #212]	; (4318 <_usart_init+0x198>)
    4242:	4613      	mov	r3, r2
    4244:	005b      	lsls	r3, r3, #1
    4246:	4413      	add	r3, r2
    4248:	00db      	lsls	r3, r3, #3
    424a:	440b      	add	r3, r1
    424c:	3304      	adds	r3, #4
    424e:	681b      	ldr	r3, [r3, #0]
    4250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    4254:	2b00      	cmp	r3, #0
    4256:	d10c      	bne.n	4272 <_usart_init+0xf2>
    4258:	7bfa      	ldrb	r2, [r7, #15]
    425a:	492f      	ldr	r1, [pc, #188]	; (4318 <_usart_init+0x198>)
    425c:	4613      	mov	r3, r2
    425e:	005b      	lsls	r3, r3, #1
    4260:	4413      	add	r3, r2
    4262:	00db      	lsls	r3, r3, #3
    4264:	440b      	add	r3, r1
    4266:	3304      	adds	r3, #4
    4268:	681b      	ldr	r3, [r3, #0]
    426a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
    426e:	2b00      	cmp	r3, #0
    4270:	d022      	beq.n	42b8 <_usart_init+0x138>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    4272:	7bfa      	ldrb	r2, [r7, #15]
    4274:	4928      	ldr	r1, [pc, #160]	; (4318 <_usart_init+0x198>)
    4276:	4613      	mov	r3, r2
    4278:	005b      	lsls	r3, r3, #1
    427a:	4413      	add	r3, r2
    427c:	00db      	lsls	r3, r3, #3
    427e:	440b      	add	r3, r1
    4280:	3310      	adds	r3, #16
    4282:	881b      	ldrh	r3, [r3, #0]
    4284:	f3c3 030c 	ubfx	r3, r3, #0, #13
    4288:	b299      	uxth	r1, r3
    428a:	687a      	ldr	r2, [r7, #4]
    428c:	8993      	ldrh	r3, [r2, #12]
    428e:	f361 030c 	bfi	r3, r1, #0, #13
    4292:	8193      	strh	r3, [r2, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    4294:	7bfa      	ldrb	r2, [r7, #15]
    4296:	4920      	ldr	r1, [pc, #128]	; (4318 <_usart_init+0x198>)
    4298:	4613      	mov	r3, r2
    429a:	005b      	lsls	r3, r3, #1
    429c:	4413      	add	r3, r2
    429e:	00db      	lsls	r3, r3, #3
    42a0:	440b      	add	r3, r1
    42a2:	3312      	adds	r3, #18
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	f003 0307 	and.w	r3, r3, #7
    42aa:	b2d9      	uxtb	r1, r3
    42ac:	687a      	ldr	r2, [r7, #4]
    42ae:	8993      	ldrh	r3, [r2, #12]
    42b0:	f361 334f 	bfi	r3, r1, #13, #3
    42b4:	8193      	strh	r3, [r2, #12]
    42b6:	e00c      	b.n	42d2 <_usart_init+0x152>
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    42b8:	7bfa      	ldrb	r2, [r7, #15]
    42ba:	4917      	ldr	r1, [pc, #92]	; (4318 <_usart_init+0x198>)
    42bc:	4613      	mov	r3, r2
    42be:	005b      	lsls	r3, r3, #1
    42c0:	4413      	add	r3, r2
    42c2:	00db      	lsls	r3, r3, #3
    42c4:	440b      	add	r3, r1
    42c6:	3310      	adds	r3, #16
    42c8:	881b      	ldrh	r3, [r3, #0]
    42ca:	4619      	mov	r1, r3
    42cc:	6878      	ldr	r0, [r7, #4]
    42ce:	4b19      	ldr	r3, [pc, #100]	; (4334 <_usart_init+0x1b4>)
    42d0:	4798      	blx	r3
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    42d2:	7bfa      	ldrb	r2, [r7, #15]
    42d4:	4910      	ldr	r1, [pc, #64]	; (4318 <_usart_init+0x198>)
    42d6:	4613      	mov	r3, r2
    42d8:	005b      	lsls	r3, r3, #1
    42da:	4413      	add	r3, r2
    42dc:	00db      	lsls	r3, r3, #3
    42de:	440b      	add	r3, r1
    42e0:	3313      	adds	r3, #19
    42e2:	781b      	ldrb	r3, [r3, #0]
    42e4:	4619      	mov	r1, r3
    42e6:	6878      	ldr	r0, [r7, #4]
    42e8:	4b13      	ldr	r3, [pc, #76]	; (4338 <_usart_init+0x1b8>)
    42ea:	4798      	blx	r3
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    42ec:	7bfa      	ldrb	r2, [r7, #15]
    42ee:	490a      	ldr	r1, [pc, #40]	; (4318 <_usart_init+0x198>)
    42f0:	4613      	mov	r3, r2
    42f2:	005b      	lsls	r3, r3, #1
    42f4:	4413      	add	r3, r2
    42f6:	00db      	lsls	r3, r3, #3
    42f8:	440b      	add	r3, r1
    42fa:	3314      	adds	r3, #20
    42fc:	781b      	ldrb	r3, [r3, #0]
    42fe:	4619      	mov	r1, r3
    4300:	6878      	ldr	r0, [r7, #4]
    4302:	4b0e      	ldr	r3, [pc, #56]	; (433c <_usart_init+0x1bc>)
    4304:	4798      	blx	r3

	return ERR_NONE;
    4306:	2300      	movs	r3, #0
}
    4308:	4618      	mov	r0, r3
    430a:	3710      	adds	r7, #16
    430c:	46bd      	mov	sp, r7
    430e:	bd80      	pop	{r7, pc}
    4310:	000040f1 	.word	0x000040f1
    4314:	00003781 	.word	0x00003781
    4318:	20000000 	.word	0x20000000
    431c:	00003a95 	.word	0x00003a95
    4320:	00003a6d 	.word	0x00003a6d
    4324:	0000375d 	.word	0x0000375d
    4328:	00003ac5 	.word	0x00003ac5
    432c:	00003bdd 	.word	0x00003bdd
    4330:	00003c01 	.word	0x00003c01
    4334:	00003c39 	.word	0x00003c39
    4338:	00003c57 	.word	0x00003c57
    433c:	00003d71 	.word	0x00003d71

00004340 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
    4340:	b580      	push	{r7, lr}
    4342:	b084      	sub	sp, #16
    4344:	af00      	add	r7, sp, #0
    4346:	6078      	str	r0, [r7, #4]
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    4348:	6878      	ldr	r0, [r7, #4]
    434a:	4b13      	ldr	r3, [pc, #76]	; (4398 <_get_i2cm_index+0x58>)
    434c:	4798      	blx	r3
    434e:	4603      	mov	r3, r0
    4350:	73bb      	strb	r3, [r7, #14]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    4352:	2300      	movs	r3, #0
    4354:	73fb      	strb	r3, [r7, #15]
    4356:	e010      	b.n	437a <_get_i2cm_index+0x3a>
		if (_i2cms[i].number == sercom_offset) {
    4358:	7bfa      	ldrb	r2, [r7, #15]
    435a:	4910      	ldr	r1, [pc, #64]	; (439c <_get_i2cm_index+0x5c>)
    435c:	4613      	mov	r3, r2
    435e:	005b      	lsls	r3, r3, #1
    4360:	4413      	add	r3, r2
    4362:	00db      	lsls	r3, r3, #3
    4364:	440b      	add	r3, r1
    4366:	781b      	ldrb	r3, [r3, #0]
    4368:	7bba      	ldrb	r2, [r7, #14]
    436a:	429a      	cmp	r2, r3
    436c:	d102      	bne.n	4374 <_get_i2cm_index+0x34>
			return i;
    436e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    4372:	e00d      	b.n	4390 <_get_i2cm_index+0x50>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    4374:	7bfb      	ldrb	r3, [r7, #15]
    4376:	3301      	adds	r3, #1
    4378:	73fb      	strb	r3, [r7, #15]
    437a:	7bfb      	ldrb	r3, [r7, #15]
    437c:	2b00      	cmp	r3, #0
    437e:	d0eb      	beq.n	4358 <_get_i2cm_index+0x18>
		}
	}

	ASSERT(false);
    4380:	f240 32ce 	movw	r2, #974	; 0x3ce
    4384:	4906      	ldr	r1, [pc, #24]	; (43a0 <_get_i2cm_index+0x60>)
    4386:	2000      	movs	r0, #0
    4388:	4b06      	ldr	r3, [pc, #24]	; (43a4 <_get_i2cm_index+0x64>)
    438a:	4798      	blx	r3
	return -1;
    438c:	f04f 33ff 	mov.w	r3, #4294967295
}
    4390:	4618      	mov	r0, r3
    4392:	3710      	adds	r7, #16
    4394:	46bd      	mov	sp, r7
    4396:	bd80      	pop	{r7, pc}
    4398:	00003f95 	.word	0x00003f95
    439c:	20000018 	.word	0x20000018
    43a0:	00005f04 	.word	0x00005f04
    43a4:	00001869 	.word	0x00001869

000043a8 <_sercom_i2c_send_stop>:

static inline void _sercom_i2c_send_stop(void *const hw)
{
    43a8:	b580      	push	{r7, lr}
    43aa:	b082      	sub	sp, #8
    43ac:	af00      	add	r7, sp, #0
    43ae:	6078      	str	r0, [r7, #4]
	hri_sercomi2cm_set_CTRLB_CMD_bf(hw, CMD_STOP);
    43b0:	2103      	movs	r1, #3
    43b2:	6878      	ldr	r0, [r7, #4]
    43b4:	4b02      	ldr	r3, [pc, #8]	; (43c0 <_sercom_i2c_send_stop+0x18>)
    43b6:	4798      	blx	r3
}
    43b8:	bf00      	nop
    43ba:	3708      	adds	r7, #8
    43bc:	46bd      	mov	sp, r7
    43be:	bd80      	pop	{r7, pc}
    43c0:	00003b89 	.word	0x00003b89

000043c4 <_sercom_i2c_sync_analyse_flags>:

/**
 * \brief SERCOM I2CM analyze hardware status and transfer next byte
 */
static inline int32_t _sercom_i2c_sync_analyse_flags(void *const hw, uint32_t flags, struct _i2c_m_msg *const msg)
{
    43c4:	b590      	push	{r4, r7, lr}
    43c6:	b087      	sub	sp, #28
    43c8:	af00      	add	r7, sp, #0
    43ca:	60f8      	str	r0, [r7, #12]
    43cc:	60b9      	str	r1, [r7, #8]
    43ce:	607a      	str	r2, [r7, #4]
	int      sclsm  = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    43d0:	68f8      	ldr	r0, [r7, #12]
    43d2:	4b7d      	ldr	r3, [pc, #500]	; (45c8 <_sercom_i2c_sync_analyse_flags+0x204>)
    43d4:	4798      	blx	r3
    43d6:	4603      	mov	r3, r0
    43d8:	617b      	str	r3, [r7, #20]
	uint16_t status = hri_sercomi2cm_read_STATUS_reg(hw);
    43da:	68f8      	ldr	r0, [r7, #12]
    43dc:	4b7b      	ldr	r3, [pc, #492]	; (45cc <_sercom_i2c_sync_analyse_flags+0x208>)
    43de:	4798      	blx	r3
    43e0:	4603      	mov	r3, r0
    43e2:	827b      	strh	r3, [r7, #18]

	if (flags & MB_FLAG) {
    43e4:	68bb      	ldr	r3, [r7, #8]
    43e6:	f003 0301 	and.w	r3, r3, #1
    43ea:	2b00      	cmp	r3, #0
    43ec:	f000 8095 	beq.w	451a <_sercom_i2c_sync_analyse_flags+0x156>
		/* tx error */
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    43f0:	8a7b      	ldrh	r3, [r7, #18]
    43f2:	f003 0302 	and.w	r3, r3, #2
    43f6:	2b00      	cmp	r3, #0
    43f8:	d01d      	beq.n	4436 <_sercom_i2c_sync_analyse_flags+0x72>
			hri_sercomi2cm_clear_interrupt_MB_bit(hw);
    43fa:	68f8      	ldr	r0, [r7, #12]
    43fc:	4b74      	ldr	r3, [pc, #464]	; (45d0 <_sercom_i2c_sync_analyse_flags+0x20c>)
    43fe:	4798      	blx	r3
			msg->flags |= I2C_M_FAIL;
    4400:	687b      	ldr	r3, [r7, #4]
    4402:	885b      	ldrh	r3, [r3, #2]
    4404:	b29b      	uxth	r3, r3
    4406:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    440a:	b29a      	uxth	r2, r3
    440c:	687b      	ldr	r3, [r7, #4]
    440e:	805a      	strh	r2, [r3, #2]
			msg->flags &= ~I2C_M_BUSY;
    4410:	687b      	ldr	r3, [r7, #4]
    4412:	885b      	ldrh	r3, [r3, #2]
    4414:	b29b      	uxth	r3, r3
    4416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    441a:	b29a      	uxth	r2, r3
    441c:	687b      	ldr	r3, [r7, #4]
    441e:	805a      	strh	r2, [r3, #2]

			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    4420:	8a7b      	ldrh	r3, [r7, #18]
    4422:	f003 0301 	and.w	r3, r3, #1
    4426:	2b00      	cmp	r3, #0
    4428:	d002      	beq.n	4430 <_sercom_i2c_sync_analyse_flags+0x6c>
				return I2C_ERR_BUS;
    442a:	f06f 0304 	mvn.w	r3, #4
    442e:	e0c6      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			return I2C_ERR_BAD_ADDRESS;
    4430:	f06f 0303 	mvn.w	r3, #3
    4434:	e0c3      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
		} else {
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    4436:	8a7b      	ldrh	r3, [r7, #18]
    4438:	f003 0304 	and.w	r3, r3, #4
    443c:	2b00      	cmp	r3, #0
    443e:	d01f      	beq.n	4480 <_sercom_i2c_sync_analyse_flags+0xbc>

				/* Slave rejects to receive more data */
				if (msg->len > 0) {
    4440:	687b      	ldr	r3, [r7, #4]
    4442:	685b      	ldr	r3, [r3, #4]
    4444:	2b00      	cmp	r3, #0
    4446:	dd07      	ble.n	4458 <_sercom_i2c_sync_analyse_flags+0x94>
					msg->flags |= I2C_M_FAIL;
    4448:	687b      	ldr	r3, [r7, #4]
    444a:	885b      	ldrh	r3, [r3, #2]
    444c:	b29b      	uxth	r3, r3
    444e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4452:	b29a      	uxth	r2, r3
    4454:	687b      	ldr	r3, [r7, #4]
    4456:	805a      	strh	r2, [r3, #2]
				}

				if (msg->flags & I2C_M_STOP) {
    4458:	687b      	ldr	r3, [r7, #4]
    445a:	885b      	ldrh	r3, [r3, #2]
    445c:	b29b      	uxth	r3, r3
    445e:	b21b      	sxth	r3, r3
    4460:	2b00      	cmp	r3, #0
    4462:	da02      	bge.n	446a <_sercom_i2c_sync_analyse_flags+0xa6>
					_sercom_i2c_send_stop(hw);
    4464:	68f8      	ldr	r0, [r7, #12]
    4466:	4b5b      	ldr	r3, [pc, #364]	; (45d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    4468:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    446a:	687b      	ldr	r3, [r7, #4]
    446c:	885b      	ldrh	r3, [r3, #2]
    446e:	b29b      	uxth	r3, r3
    4470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4474:	b29a      	uxth	r2, r3
    4476:	687b      	ldr	r3, [r7, #4]
    4478:	805a      	strh	r2, [r3, #2]

				return I2C_NACK;
    447a:	f06f 0301 	mvn.w	r3, #1
    447e:	e09e      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->flags & I2C_M_TEN) {
    4480:	687b      	ldr	r3, [r7, #4]
    4482:	885b      	ldrh	r3, [r3, #2]
    4484:	b29b      	uxth	r3, r3
    4486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    448a:	2b00      	cmp	r3, #0
    448c:	d01c      	beq.n	44c8 <_sercom_i2c_sync_analyse_flags+0x104>
				hri_sercomi2cm_write_ADDR_reg(hw,
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    448e:	687b      	ldr	r3, [r7, #4]
    4490:	881b      	ldrh	r3, [r3, #0]
    4492:	121b      	asrs	r3, r3, #8
    4494:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    4496:	f003 0406 	and.w	r4, r3, #6
    449a:	68f8      	ldr	r0, [r7, #12]
    449c:	4b4e      	ldr	r3, [pc, #312]	; (45d8 <_sercom_i2c_sync_analyse_flags+0x214>)
    449e:	4798      	blx	r3
    44a0:	4603      	mov	r3, r0
    44a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    44a6:	4323      	orrs	r3, r4
				hri_sercomi2cm_write_ADDR_reg(hw,
    44a8:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
    44ac:	4619      	mov	r1, r3
    44ae:	68f8      	ldr	r0, [r7, #12]
    44b0:	4b4a      	ldr	r3, [pc, #296]	; (45dc <_sercom_i2c_sync_analyse_flags+0x218>)
    44b2:	4798      	blx	r3
				msg->flags &= ~I2C_M_TEN;
    44b4:	687b      	ldr	r3, [r7, #4]
    44b6:	885b      	ldrh	r3, [r3, #2]
    44b8:	b29b      	uxth	r3, r3
    44ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    44be:	b29a      	uxth	r2, r3
    44c0:	687b      	ldr	r3, [r7, #4]
    44c2:	805a      	strh	r2, [r3, #2]

				return I2C_OK;
    44c4:	2300      	movs	r3, #0
    44c6:	e07a      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
			}

			if (msg->len == 0) {
    44c8:	687b      	ldr	r3, [r7, #4]
    44ca:	685b      	ldr	r3, [r3, #4]
    44cc:	2b00      	cmp	r3, #0
    44ce:	d111      	bne.n	44f4 <_sercom_i2c_sync_analyse_flags+0x130>
				if (msg->flags & I2C_M_STOP) {
    44d0:	687b      	ldr	r3, [r7, #4]
    44d2:	885b      	ldrh	r3, [r3, #2]
    44d4:	b29b      	uxth	r3, r3
    44d6:	b21b      	sxth	r3, r3
    44d8:	2b00      	cmp	r3, #0
    44da:	da02      	bge.n	44e2 <_sercom_i2c_sync_analyse_flags+0x11e>
					_sercom_i2c_send_stop(hw);
    44dc:	68f8      	ldr	r0, [r7, #12]
    44de:	4b3d      	ldr	r3, [pc, #244]	; (45d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    44e0:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	885b      	ldrh	r3, [r3, #2]
    44e6:	b29b      	uxth	r3, r3
    44e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    44ec:	b29a      	uxth	r2, r3
    44ee:	687b      	ldr	r3, [r7, #4]
    44f0:	805a      	strh	r2, [r3, #2]
    44f2:	e010      	b.n	4516 <_sercom_i2c_sync_analyse_flags+0x152>
			} else {
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	689b      	ldr	r3, [r3, #8]
    44f8:	781b      	ldrb	r3, [r3, #0]
    44fa:	4619      	mov	r1, r3
    44fc:	68f8      	ldr	r0, [r7, #12]
    44fe:	4b38      	ldr	r3, [pc, #224]	; (45e0 <_sercom_i2c_sync_analyse_flags+0x21c>)
    4500:	4798      	blx	r3
				msg->buffer++;
    4502:	687b      	ldr	r3, [r7, #4]
    4504:	689b      	ldr	r3, [r3, #8]
    4506:	1c5a      	adds	r2, r3, #1
    4508:	687b      	ldr	r3, [r7, #4]
    450a:	609a      	str	r2, [r3, #8]
				msg->len--;
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	685b      	ldr	r3, [r3, #4]
    4510:	1e5a      	subs	r2, r3, #1
    4512:	687b      	ldr	r3, [r7, #4]
    4514:	605a      	str	r2, [r3, #4]
			}

			return I2C_OK;
    4516:	2300      	movs	r3, #0
    4518:	e051      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
		}
	} else if (flags & SB_FLAG) {
    451a:	68bb      	ldr	r3, [r7, #8]
    451c:	f003 0302 	and.w	r3, r3, #2
    4520:	2b00      	cmp	r3, #0
    4522:	d04b      	beq.n	45bc <_sercom_i2c_sync_analyse_flags+0x1f8>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    4524:	687b      	ldr	r3, [r7, #4]
    4526:	685b      	ldr	r3, [r3, #4]
    4528:	2b00      	cmp	r3, #0
    452a:	d041      	beq.n	45b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
    452c:	8a7b      	ldrh	r3, [r7, #18]
    452e:	f003 0304 	and.w	r3, r3, #4
    4532:	2b00      	cmp	r3, #0
    4534:	d13c      	bne.n	45b0 <_sercom_i2c_sync_analyse_flags+0x1ec>
			msg->len--;
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	685b      	ldr	r3, [r3, #4]
    453a:	1e5a      	subs	r2, r3, #1
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	605a      	str	r2, [r3, #4]

			/* last byte, send nack */
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    4540:	687b      	ldr	r3, [r7, #4]
    4542:	685b      	ldr	r3, [r3, #4]
    4544:	2b00      	cmp	r3, #0
    4546:	d102      	bne.n	454e <_sercom_i2c_sync_analyse_flags+0x18a>
    4548:	697b      	ldr	r3, [r7, #20]
    454a:	2b00      	cmp	r3, #0
    454c:	d006      	beq.n	455c <_sercom_i2c_sync_analyse_flags+0x198>
    454e:	687b      	ldr	r3, [r7, #4]
    4550:	685b      	ldr	r3, [r3, #4]
    4552:	2b01      	cmp	r3, #1
    4554:	d105      	bne.n	4562 <_sercom_i2c_sync_analyse_flags+0x19e>
    4556:	697b      	ldr	r3, [r7, #20]
    4558:	2b00      	cmp	r3, #0
    455a:	d002      	beq.n	4562 <_sercom_i2c_sync_analyse_flags+0x19e>
				hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    455c:	68f8      	ldr	r0, [r7, #12]
    455e:	4b21      	ldr	r3, [pc, #132]	; (45e4 <_sercom_i2c_sync_analyse_flags+0x220>)
    4560:	4798      	blx	r3
			}

			if (msg->len == 0) {
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	685b      	ldr	r3, [r3, #4]
    4566:	2b00      	cmp	r3, #0
    4568:	d113      	bne.n	4592 <_sercom_i2c_sync_analyse_flags+0x1ce>
				if (msg->flags & I2C_M_STOP) {
    456a:	687b      	ldr	r3, [r7, #4]
    456c:	885b      	ldrh	r3, [r3, #2]
    456e:	b29b      	uxth	r3, r3
    4570:	b21b      	sxth	r3, r3
    4572:	2b00      	cmp	r3, #0
    4574:	da05      	bge.n	4582 <_sercom_i2c_sync_analyse_flags+0x1be>
					hri_sercomi2cm_clear_CTRLB_SMEN_bit(hw);
    4576:	68f8      	ldr	r0, [r7, #12]
    4578:	4b1b      	ldr	r3, [pc, #108]	; (45e8 <_sercom_i2c_sync_analyse_flags+0x224>)
    457a:	4798      	blx	r3
					_sercom_i2c_send_stop(hw);
    457c:	68f8      	ldr	r0, [r7, #12]
    457e:	4b15      	ldr	r3, [pc, #84]	; (45d4 <_sercom_i2c_sync_analyse_flags+0x210>)
    4580:	4798      	blx	r3
				}

				msg->flags &= ~I2C_M_BUSY;
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	885b      	ldrh	r3, [r3, #2]
    4586:	b29b      	uxth	r3, r3
    4588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    458c:	b29a      	uxth	r2, r3
    458e:	687b      	ldr	r3, [r7, #4]
    4590:	805a      	strh	r2, [r3, #2]

			/* Accessing DATA.DATA auto-triggers I2C bus operations.
			 * The operation performed depends on the state of
			 * CTRLB.ACKACT, CTRLB.SMEN
			 **/
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    4592:	687b      	ldr	r3, [r7, #4]
    4594:	689c      	ldr	r4, [r3, #8]
    4596:	1c62      	adds	r2, r4, #1
    4598:	687b      	ldr	r3, [r7, #4]
    459a:	609a      	str	r2, [r3, #8]
    459c:	68f8      	ldr	r0, [r7, #12]
    459e:	4b13      	ldr	r3, [pc, #76]	; (45ec <_sercom_i2c_sync_analyse_flags+0x228>)
    45a0:	4798      	blx	r3
    45a2:	4603      	mov	r3, r0
    45a4:	b2db      	uxtb	r3, r3
    45a6:	7023      	strb	r3, [r4, #0]
		} else {
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
			return I2C_NACK;
		}

		hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    45a8:	68f8      	ldr	r0, [r7, #12]
    45aa:	4b11      	ldr	r3, [pc, #68]	; (45f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    45ac:	4798      	blx	r3
    45ae:	e005      	b.n	45bc <_sercom_i2c_sync_analyse_flags+0x1f8>
			hri_sercomi2cm_clear_interrupt_SB_bit(hw);
    45b0:	68f8      	ldr	r0, [r7, #12]
    45b2:	4b0f      	ldr	r3, [pc, #60]	; (45f0 <_sercom_i2c_sync_analyse_flags+0x22c>)
    45b4:	4798      	blx	r3
			return I2C_NACK;
    45b6:	f06f 0301 	mvn.w	r3, #1
    45ba:	e000      	b.n	45be <_sercom_i2c_sync_analyse_flags+0x1fa>
	}

	return I2C_OK;
    45bc:	2300      	movs	r3, #0
}
    45be:	4618      	mov	r0, r3
    45c0:	371c      	adds	r7, #28
    45c2:	46bd      	mov	sp, r7
    45c4:	bd90      	pop	{r4, r7, pc}
    45c6:	bf00      	nop
    45c8:	000039c1 	.word	0x000039c1
    45cc:	00003df5 	.word	0x00003df5
    45d0:	000037a9 	.word	0x000037a9
    45d4:	000043a9 	.word	0x000043a9
    45d8:	00003cd9 	.word	0x00003cd9
    45dc:	00003cb5 	.word	0x00003cb5
    45e0:	00003cf9 	.word	0x00003cf9
    45e4:	00003b39 	.word	0x00003b39
    45e8:	00003b11 	.word	0x00003b11
    45ec:	00003d1d 	.word	0x00003d1d
    45f0:	000037c3 	.word	0x000037c3

000045f4 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    45f4:	b580      	push	{r7, lr}
    45f6:	b082      	sub	sp, #8
    45f8:	af00      	add	r7, sp, #0
    45fa:	6078      	str	r0, [r7, #4]
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    45fc:	6878      	ldr	r0, [r7, #4]
    45fe:	4b05      	ldr	r3, [pc, #20]	; (4614 <_sercom_get_irq_num+0x20>)
    4600:	4798      	blx	r3
    4602:	4603      	mov	r3, r0
    4604:	009b      	lsls	r3, r3, #2
    4606:	b2db      	uxtb	r3, r3
    4608:	332e      	adds	r3, #46	; 0x2e
    460a:	b2db      	uxtb	r3, r3
}
    460c:	4618      	mov	r0, r3
    460e:	3708      	adds	r7, #8
    4610:	46bd      	mov	sp, r7
    4612:	bd80      	pop	{r7, pc}
    4614:	00003f95 	.word	0x00003f95

00004618 <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    4618:	b580      	push	{r7, lr}
    461a:	b082      	sub	sp, #8
    461c:	af00      	add	r7, sp, #0
    461e:	6078      	str	r0, [r7, #4]
    4620:	6039      	str	r1, [r7, #0]
	ASSERT(i2c_dev);
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	2b00      	cmp	r3, #0
    4626:	bf14      	ite	ne
    4628:	2301      	movne	r3, #1
    462a:	2300      	moveq	r3, #0
    462c:	b2db      	uxtb	r3, r3
    462e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
    4632:	4908      	ldr	r1, [pc, #32]	; (4654 <_i2c_m_sync_init+0x3c>)
    4634:	4618      	mov	r0, r3
    4636:	4b08      	ldr	r3, [pc, #32]	; (4658 <_i2c_m_sync_init+0x40>)
    4638:	4798      	blx	r3

	i2c_dev->hw = hw;
    463a:	687b      	ldr	r3, [r7, #4]
    463c:	683a      	ldr	r2, [r7, #0]
    463e:	611a      	str	r2, [r3, #16]

	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	6839      	ldr	r1, [r7, #0]
    4644:	4618      	mov	r0, r3
    4646:	4b05      	ldr	r3, [pc, #20]	; (465c <_i2c_m_sync_init+0x44>)
    4648:	4798      	blx	r3
    464a:	4603      	mov	r3, r0
}
    464c:	4618      	mov	r0, r3
    464e:	3708      	adds	r7, #8
    4650:	46bd      	mov	sp, r7
    4652:	bd80      	pop	{r7, pc}
    4654:	00005f04 	.word	0x00005f04
    4658:	00001869 	.word	0x00001869
    465c:	000049d5 	.word	0x000049d5

00004660 <_i2c_m_sync_enable>:
 * \brief Enable the i2c master module
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_enable(struct _i2c_m_sync_device *const i2c_dev)
{
    4660:	b580      	push	{r7, lr}
    4662:	b082      	sub	sp, #8
    4664:	af00      	add	r7, sp, #0
    4666:	6078      	str	r0, [r7, #4]
	ASSERT(i2c_dev);
    4668:	687b      	ldr	r3, [r7, #4]
    466a:	2b00      	cmp	r3, #0
    466c:	bf14      	ite	ne
    466e:	2301      	movne	r3, #1
    4670:	2300      	moveq	r3, #0
    4672:	b2db      	uxtb	r3, r3
    4674:	f240 525d 	movw	r2, #1373	; 0x55d
    4678:	4906      	ldr	r1, [pc, #24]	; (4694 <_i2c_m_sync_enable+0x34>)
    467a:	4618      	mov	r0, r3
    467c:	4b06      	ldr	r3, [pc, #24]	; (4698 <_i2c_m_sync_enable+0x38>)
    467e:	4798      	blx	r3

	return _i2c_m_enable_implementation(i2c_dev->hw);
    4680:	687b      	ldr	r3, [r7, #4]
    4682:	691b      	ldr	r3, [r3, #16]
    4684:	4618      	mov	r0, r3
    4686:	4b05      	ldr	r3, [pc, #20]	; (469c <_i2c_m_sync_enable+0x3c>)
    4688:	4798      	blx	r3
    468a:	4603      	mov	r3, r0
}
    468c:	4618      	mov	r0, r3
    468e:	3708      	adds	r7, #8
    4690:	46bd      	mov	sp, r7
    4692:	bd80      	pop	{r7, pc}
    4694:	00005f04 	.word	0x00005f04
    4698:	00001869 	.word	0x00001869
    469c:	00004949 	.word	0x00004949

000046a0 <_sercom_i2c_sync_wait_bus>:
 * \return Bus response status.
 * \retval 0 Bus response status OK
 * \retval <0 Bus response fail
 */
inline static int32_t _sercom_i2c_sync_wait_bus(struct _i2c_m_sync_device *const i2c_dev, uint32_t *flags)
{
    46a0:	b580      	push	{r7, lr}
    46a2:	b084      	sub	sp, #16
    46a4:	af00      	add	r7, sp, #0
    46a6:	6078      	str	r0, [r7, #4]
    46a8:	6039      	str	r1, [r7, #0]
	uint32_t timeout = 65535;
    46aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    46ae:	60fb      	str	r3, [r7, #12]
	void *   hw      = i2c_dev->hw;
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	691b      	ldr	r3, [r3, #16]
    46b4:	60bb      	str	r3, [r7, #8]

	do {
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    46b6:	68b8      	ldr	r0, [r7, #8]
    46b8:	4b0f      	ldr	r3, [pc, #60]	; (46f8 <_sercom_i2c_sync_wait_bus+0x58>)
    46ba:	4798      	blx	r3
    46bc:	4603      	mov	r3, r0
    46be:	461a      	mov	r2, r3
    46c0:	683b      	ldr	r3, [r7, #0]
    46c2:	601a      	str	r2, [r3, #0]

		if (timeout-- == 0) {
    46c4:	68fb      	ldr	r3, [r7, #12]
    46c6:	1e5a      	subs	r2, r3, #1
    46c8:	60fa      	str	r2, [r7, #12]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d102      	bne.n	46d4 <_sercom_i2c_sync_wait_bus+0x34>
			return I2C_ERR_BUS;
    46ce:	f06f 0304 	mvn.w	r3, #4
    46d2:	e00c      	b.n	46ee <_sercom_i2c_sync_wait_bus+0x4e>
		}
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    46d4:	683b      	ldr	r3, [r7, #0]
    46d6:	681b      	ldr	r3, [r3, #0]
    46d8:	f003 0301 	and.w	r3, r3, #1
    46dc:	2b00      	cmp	r3, #0
    46de:	d105      	bne.n	46ec <_sercom_i2c_sync_wait_bus+0x4c>
    46e0:	683b      	ldr	r3, [r7, #0]
    46e2:	681b      	ldr	r3, [r3, #0]
    46e4:	f003 0302 	and.w	r3, r3, #2
    46e8:	2b00      	cmp	r3, #0
    46ea:	d0e4      	beq.n	46b6 <_sercom_i2c_sync_wait_bus+0x16>

	return I2C_OK;
    46ec:	2300      	movs	r3, #0
}
    46ee:	4618      	mov	r0, r3
    46f0:	3710      	adds	r7, #16
    46f2:	46bd      	mov	sp, r7
    46f4:	bd80      	pop	{r7, pc}
    46f6:	bf00      	nop
    46f8:	000037dd 	.word	0x000037dd

000046fc <_sercom_i2c_sync_send_address>:
 * \brief Send the slave address to bus, which will start the transfer
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
static int32_t _sercom_i2c_sync_send_address(struct _i2c_m_sync_device *const i2c_dev)
{
    46fc:	b590      	push	{r4, r7, lr}
    46fe:	b087      	sub	sp, #28
    4700:	af00      	add	r7, sp, #0
    4702:	6078      	str	r0, [r7, #4]
	void *             hw    = i2c_dev->hw;
    4704:	687b      	ldr	r3, [r7, #4]
    4706:	691b      	ldr	r3, [r3, #16]
    4708:	617b      	str	r3, [r7, #20]
	struct _i2c_m_msg *msg   = &i2c_dev->service.msg;
    470a:	687b      	ldr	r3, [r7, #4]
    470c:	613b      	str	r3, [r7, #16]
	int                sclsm = hri_sercomi2cm_get_CTRLA_SCLSM_bit(hw);
    470e:	6978      	ldr	r0, [r7, #20]
    4710:	4b39      	ldr	r3, [pc, #228]	; (47f8 <_sercom_i2c_sync_send_address+0xfc>)
    4712:	4798      	blx	r3
    4714:	4603      	mov	r3, r0
    4716:	60fb      	str	r3, [r7, #12]
	uint32_t           flags;

	ASSERT(i2c_dev);
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	2b00      	cmp	r3, #0
    471c:	bf14      	ite	ne
    471e:	2301      	movne	r3, #1
    4720:	2300      	moveq	r3, #0
    4722:	b2db      	uxtb	r3, r3
    4724:	f240 52cd 	movw	r2, #1485	; 0x5cd
    4728:	4934      	ldr	r1, [pc, #208]	; (47fc <_sercom_i2c_sync_send_address+0x100>)
    472a:	4618      	mov	r0, r3
    472c:	4b34      	ldr	r3, [pc, #208]	; (4800 <_sercom_i2c_sync_send_address+0x104>)
    472e:	4798      	blx	r3

	if (msg->len == 1 && sclsm) {
    4730:	693b      	ldr	r3, [r7, #16]
    4732:	685b      	ldr	r3, [r3, #4]
    4734:	2b01      	cmp	r3, #1
    4736:	d106      	bne.n	4746 <_sercom_i2c_sync_send_address+0x4a>
    4738:	68fb      	ldr	r3, [r7, #12]
    473a:	2b00      	cmp	r3, #0
    473c:	d003      	beq.n	4746 <_sercom_i2c_sync_send_address+0x4a>
		hri_sercomi2cm_set_CTRLB_ACKACT_bit(hw);
    473e:	6978      	ldr	r0, [r7, #20]
    4740:	4b30      	ldr	r3, [pc, #192]	; (4804 <_sercom_i2c_sync_send_address+0x108>)
    4742:	4798      	blx	r3
    4744:	e002      	b.n	474c <_sercom_i2c_sync_send_address+0x50>
	} else {
		hri_sercomi2cm_clear_CTRLB_ACKACT_bit(hw);
    4746:	6978      	ldr	r0, [r7, #20]
    4748:	4b2f      	ldr	r3, [pc, #188]	; (4808 <_sercom_i2c_sync_send_address+0x10c>)
    474a:	4798      	blx	r3
	}

	/* ten bit address */
	if (msg->addr & I2C_M_TEN) {
    474c:	693b      	ldr	r3, [r7, #16]
    474e:	881b      	ldrh	r3, [r3, #0]
    4750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    4754:	2b00      	cmp	r3, #0
    4756:	d022      	beq.n	479e <_sercom_i2c_sync_send_address+0xa2>
		if (msg->flags & I2C_M_RD) {
    4758:	693b      	ldr	r3, [r7, #16]
    475a:	885b      	ldrh	r3, [r3, #2]
    475c:	b29b      	uxth	r3, r3
    475e:	f003 0301 	and.w	r3, r3, #1
    4762:	2b00      	cmp	r3, #0
    4764:	d007      	beq.n	4776 <_sercom_i2c_sync_send_address+0x7a>
			msg->flags |= I2C_M_TEN;
    4766:	693b      	ldr	r3, [r7, #16]
    4768:	885b      	ldrh	r3, [r3, #2]
    476a:	b29b      	uxth	r3, r3
    476c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    4770:	b29a      	uxth	r2, r3
    4772:	693b      	ldr	r3, [r7, #16]
    4774:	805a      	strh	r2, [r3, #2]
		}

		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
    4776:	693b      	ldr	r3, [r7, #16]
    4778:	881b      	ldrh	r3, [r3, #0]
    477a:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    477c:	f240 74fe 	movw	r4, #2046	; 0x7fe
    4780:	401c      	ands	r4, r3
    4782:	6978      	ldr	r0, [r7, #20]
    4784:	4b21      	ldr	r3, [pc, #132]	; (480c <_sercom_i2c_sync_send_address+0x110>)
    4786:	4798      	blx	r3
    4788:	4603      	mov	r3, r0
    478a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    478e:	4323      	orrs	r3, r4
		hri_sercomi2cm_write_ADDR_reg(hw,
    4790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    4794:	4619      	mov	r1, r3
    4796:	6978      	ldr	r0, [r7, #20]
    4798:	4b1d      	ldr	r3, [pc, #116]	; (4810 <_sercom_i2c_sync_send_address+0x114>)
    479a:	4798      	blx	r3
    479c:	e01a      	b.n	47d4 <_sercom_i2c_sync_send_address+0xd8>
	} else {
		hri_sercomi2cm_write_ADDR_reg(hw,
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    479e:	693b      	ldr	r3, [r7, #16]
    47a0:	881b      	ldrh	r3, [r3, #0]
    47a2:	005b      	lsls	r3, r3, #1
    47a4:	b2db      	uxtb	r3, r3
    47a6:	693a      	ldr	r2, [r7, #16]
    47a8:	8852      	ldrh	r2, [r2, #2]
    47aa:	b292      	uxth	r2, r2
    47ac:	f002 0201 	and.w	r2, r2, #1
    47b0:	2a00      	cmp	r2, #0
    47b2:	bf14      	ite	ne
    47b4:	2201      	movne	r2, #1
    47b6:	2200      	moveq	r2, #0
    47b8:	b2d2      	uxtb	r2, r2
    47ba:	4313      	orrs	r3, r2
    47bc:	461c      	mov	r4, r3
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    47be:	6978      	ldr	r0, [r7, #20]
    47c0:	4b12      	ldr	r3, [pc, #72]	; (480c <_sercom_i2c_sync_send_address+0x110>)
    47c2:	4798      	blx	r3
    47c4:	4603      	mov	r3, r0
    47c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    47ca:	4323      	orrs	r3, r4
    47cc:	4619      	mov	r1, r3
    47ce:	6978      	ldr	r0, [r7, #20]
    47d0:	4b0f      	ldr	r3, [pc, #60]	; (4810 <_sercom_i2c_sync_send_address+0x114>)
    47d2:	4798      	blx	r3
	}

	_sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    47d4:	f107 0308 	add.w	r3, r7, #8
    47d8:	4619      	mov	r1, r3
    47da:	6878      	ldr	r0, [r7, #4]
    47dc:	4b0d      	ldr	r3, [pc, #52]	; (4814 <_sercom_i2c_sync_send_address+0x118>)
    47de:	4798      	blx	r3
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    47e0:	68bb      	ldr	r3, [r7, #8]
    47e2:	693a      	ldr	r2, [r7, #16]
    47e4:	4619      	mov	r1, r3
    47e6:	6978      	ldr	r0, [r7, #20]
    47e8:	4b0b      	ldr	r3, [pc, #44]	; (4818 <_sercom_i2c_sync_send_address+0x11c>)
    47ea:	4798      	blx	r3
    47ec:	4603      	mov	r3, r0
}
    47ee:	4618      	mov	r0, r3
    47f0:	371c      	adds	r7, #28
    47f2:	46bd      	mov	sp, r7
    47f4:	bd90      	pop	{r4, r7, pc}
    47f6:	bf00      	nop
    47f8:	000039c1 	.word	0x000039c1
    47fc:	00005f04 	.word	0x00005f04
    4800:	00001869 	.word	0x00001869
    4804:	00003b39 	.word	0x00003b39
    4808:	00003b61 	.word	0x00003b61
    480c:	00003cd9 	.word	0x00003cd9
    4810:	00003cb5 	.word	0x00003cb5
    4814:	000046a1 	.word	0x000046a1
    4818:	000043c5 	.word	0x000043c5

0000481c <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    481c:	b580      	push	{r7, lr}
    481e:	b086      	sub	sp, #24
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
    4824:	6039      	str	r1, [r7, #0]
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;
    4826:	687b      	ldr	r3, [r7, #4]
    4828:	691b      	ldr	r3, [r3, #16]
    482a:	613b      	str	r3, [r7, #16]

	ASSERT(i2c_dev);
    482c:	687b      	ldr	r3, [r7, #4]
    482e:	2b00      	cmp	r3, #0
    4830:	bf14      	ite	ne
    4832:	2301      	movne	r3, #1
    4834:	2300      	moveq	r3, #0
    4836:	b2db      	uxtb	r3, r3
    4838:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    483c:	493b      	ldr	r1, [pc, #236]	; (492c <_i2c_m_sync_transfer+0x110>)
    483e:	4618      	mov	r0, r3
    4840:	4b3b      	ldr	r3, [pc, #236]	; (4930 <_i2c_m_sync_transfer+0x114>)
    4842:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	691b      	ldr	r3, [r3, #16]
    4848:	2b00      	cmp	r3, #0
    484a:	bf14      	ite	ne
    484c:	2301      	movne	r3, #1
    484e:	2300      	moveq	r3, #0
    4850:	b2db      	uxtb	r3, r3
    4852:	f240 52f9 	movw	r2, #1529	; 0x5f9
    4856:	4935      	ldr	r1, [pc, #212]	; (492c <_i2c_m_sync_transfer+0x110>)
    4858:	4618      	mov	r0, r3
    485a:	4b35      	ldr	r3, [pc, #212]	; (4930 <_i2c_m_sync_transfer+0x114>)
    485c:	4798      	blx	r3
	ASSERT(msg);
    485e:	683b      	ldr	r3, [r7, #0]
    4860:	2b00      	cmp	r3, #0
    4862:	bf14      	ite	ne
    4864:	2301      	movne	r3, #1
    4866:	2300      	moveq	r3, #0
    4868:	b2db      	uxtb	r3, r3
    486a:	f240 52fa 	movw	r2, #1530	; 0x5fa
    486e:	492f      	ldr	r1, [pc, #188]	; (492c <_i2c_m_sync_transfer+0x110>)
    4870:	4618      	mov	r0, r3
    4872:	4b2f      	ldr	r3, [pc, #188]	; (4930 <_i2c_m_sync_transfer+0x114>)
    4874:	4798      	blx	r3

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    4876:	687b      	ldr	r3, [r7, #4]
    4878:	885b      	ldrh	r3, [r3, #2]
    487a:	b29b      	uxth	r3, r3
    487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4880:	2b00      	cmp	r3, #0
    4882:	d002      	beq.n	488a <_i2c_m_sync_transfer+0x6e>
		return I2C_ERR_BUSY;
    4884:	f06f 0305 	mvn.w	r3, #5
    4888:	e04c      	b.n	4924 <_i2c_m_sync_transfer+0x108>
	}

	msg->flags |= I2C_M_BUSY;
    488a:	683b      	ldr	r3, [r7, #0]
    488c:	885b      	ldrh	r3, [r3, #2]
    488e:	b29b      	uxth	r3, r3
    4890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4894:	b29a      	uxth	r2, r3
    4896:	683b      	ldr	r3, [r7, #0]
    4898:	805a      	strh	r2, [r3, #2]
	i2c_dev->service.msg = *msg;
    489a:	687b      	ldr	r3, [r7, #4]
    489c:	683a      	ldr	r2, [r7, #0]
    489e:	ca07      	ldmia	r2, {r0, r1, r2}
    48a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);
    48a4:	6938      	ldr	r0, [r7, #16]
    48a6:	4b23      	ldr	r3, [pc, #140]	; (4934 <_i2c_m_sync_transfer+0x118>)
    48a8:	4798      	blx	r3

	ret = _sercom_i2c_sync_send_address(i2c_dev);
    48aa:	6878      	ldr	r0, [r7, #4]
    48ac:	4b22      	ldr	r3, [pc, #136]	; (4938 <_i2c_m_sync_transfer+0x11c>)
    48ae:	4798      	blx	r3
    48b0:	6178      	str	r0, [r7, #20]

	if (ret) {
    48b2:	697b      	ldr	r3, [r7, #20]
    48b4:	2b00      	cmp	r3, #0
    48b6:	d02d      	beq.n	4914 <_i2c_m_sync_transfer+0xf8>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    48b8:	687b      	ldr	r3, [r7, #4]
    48ba:	885b      	ldrh	r3, [r3, #2]
    48bc:	b29b      	uxth	r3, r3
    48be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    48c2:	b29a      	uxth	r2, r3
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	805a      	strh	r2, [r3, #2]

		return ret;
    48c8:	697b      	ldr	r3, [r7, #20]
    48ca:	e02b      	b.n	4924 <_i2c_m_sync_transfer+0x108>
	}

	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
		ret = _sercom_i2c_sync_wait_bus(i2c_dev, &flags);
    48cc:	f107 030c 	add.w	r3, r7, #12
    48d0:	4619      	mov	r1, r3
    48d2:	6878      	ldr	r0, [r7, #4]
    48d4:	4b19      	ldr	r3, [pc, #100]	; (493c <_i2c_m_sync_transfer+0x120>)
    48d6:	4798      	blx	r3
    48d8:	6178      	str	r0, [r7, #20]

		if (ret) {
    48da:	697b      	ldr	r3, [r7, #20]
    48dc:	2b00      	cmp	r3, #0
    48de:	d012      	beq.n	4906 <_i2c_m_sync_transfer+0xea>
			if (msg->flags & I2C_M_STOP) {
    48e0:	683b      	ldr	r3, [r7, #0]
    48e2:	885b      	ldrh	r3, [r3, #2]
    48e4:	b29b      	uxth	r3, r3
    48e6:	b21b      	sxth	r3, r3
    48e8:	2b00      	cmp	r3, #0
    48ea:	da02      	bge.n	48f2 <_i2c_m_sync_transfer+0xd6>
				_sercom_i2c_send_stop(hw);
    48ec:	6938      	ldr	r0, [r7, #16]
    48ee:	4b14      	ldr	r3, [pc, #80]	; (4940 <_i2c_m_sync_transfer+0x124>)
    48f0:	4798      	blx	r3
			}

			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    48f2:	687b      	ldr	r3, [r7, #4]
    48f4:	885b      	ldrh	r3, [r3, #2]
    48f6:	b29b      	uxth	r3, r3
    48f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    48fc:	b29a      	uxth	r2, r3
    48fe:	687b      	ldr	r3, [r7, #4]
    4900:	805a      	strh	r2, [r3, #2]

			return ret;
    4902:	697b      	ldr	r3, [r7, #20]
    4904:	e00e      	b.n	4924 <_i2c_m_sync_transfer+0x108>
		}

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    4906:	68fb      	ldr	r3, [r7, #12]
    4908:	687a      	ldr	r2, [r7, #4]
    490a:	4619      	mov	r1, r3
    490c:	6938      	ldr	r0, [r7, #16]
    490e:	4b0d      	ldr	r3, [pc, #52]	; (4944 <_i2c_m_sync_transfer+0x128>)
    4910:	4798      	blx	r3
    4912:	6178      	str	r0, [r7, #20]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    4914:	687b      	ldr	r3, [r7, #4]
    4916:	885b      	ldrh	r3, [r3, #2]
    4918:	b29b      	uxth	r3, r3
    491a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    491e:	2b00      	cmp	r3, #0
    4920:	d1d4      	bne.n	48cc <_i2c_m_sync_transfer+0xb0>
	}

	return ret;
    4922:	697b      	ldr	r3, [r7, #20]
}
    4924:	4618      	mov	r0, r3
    4926:	3718      	adds	r7, #24
    4928:	46bd      	mov	sp, r7
    492a:	bd80      	pop	{r7, pc}
    492c:	00005f04 	.word	0x00005f04
    4930:	00001869 	.word	0x00001869
    4934:	00003ae9 	.word	0x00003ae9
    4938:	000046fd 	.word	0x000046fd
    493c:	000046a1 	.word	0x000046a1
    4940:	000043a9 	.word	0x000043a9
    4944:	000043c5 	.word	0x000043c5

00004948 <_i2c_m_enable_implementation>:

	return I2C_OK;
}

static inline int32_t _i2c_m_enable_implementation(void *const hw)
{
    4948:	b580      	push	{r7, lr}
    494a:	b084      	sub	sp, #16
    494c:	af00      	add	r7, sp, #0
    494e:	6078      	str	r0, [r7, #4]
	int timeout         = 65535;
    4950:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4954:	60fb      	str	r3, [r7, #12]
	int timeout_attempt = 4;
    4956:	2304      	movs	r3, #4
    4958:	60bb      	str	r3, [r7, #8]

	ASSERT(hw);
    495a:	687b      	ldr	r3, [r7, #4]
    495c:	2b00      	cmp	r3, #0
    495e:	bf14      	ite	ne
    4960:	2301      	movne	r3, #1
    4962:	2300      	moveq	r3, #0
    4964:	b2db      	uxtb	r3, r3
    4966:	f240 622d 	movw	r2, #1581	; 0x62d
    496a:	4915      	ldr	r1, [pc, #84]	; (49c0 <_i2c_m_enable_implementation+0x78>)
    496c:	4618      	mov	r0, r3
    496e:	4b15      	ldr	r3, [pc, #84]	; (49c4 <_i2c_m_enable_implementation+0x7c>)
    4970:	4798      	blx	r3

	/* Enable interrupts */
	hri_sercomi2cm_set_CTRLA_ENABLE_bit(hw);
    4972:	6878      	ldr	r0, [r7, #4]
    4974:	4b14      	ldr	r3, [pc, #80]	; (49c8 <_i2c_m_enable_implementation+0x80>)
    4976:	4798      	blx	r3

	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    4978:	e016      	b.n	49a8 <_i2c_m_enable_implementation+0x60>
		timeout--;
    497a:	68fb      	ldr	r3, [r7, #12]
    497c:	3b01      	subs	r3, #1
    497e:	60fb      	str	r3, [r7, #12]

		if (timeout <= 0) {
    4980:	68fb      	ldr	r3, [r7, #12]
    4982:	2b00      	cmp	r3, #0
    4984:	dc10      	bgt.n	49a8 <_i2c_m_enable_implementation+0x60>
			if (--timeout_attempt)
    4986:	68bb      	ldr	r3, [r7, #8]
    4988:	3b01      	subs	r3, #1
    498a:	60bb      	str	r3, [r7, #8]
    498c:	68bb      	ldr	r3, [r7, #8]
    498e:	2b00      	cmp	r3, #0
    4990:	d007      	beq.n	49a2 <_i2c_m_enable_implementation+0x5a>
				timeout = 65535;
    4992:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4996:	60fb      	str	r3, [r7, #12]
			else
				return I2C_ERR_BUSY;
			hri_sercomi2cm_clear_STATUS_reg(hw, SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE));
    4998:	2110      	movs	r1, #16
    499a:	6878      	ldr	r0, [r7, #4]
    499c:	4b0b      	ldr	r3, [pc, #44]	; (49cc <_i2c_m_enable_implementation+0x84>)
    499e:	4798      	blx	r3
    49a0:	e002      	b.n	49a8 <_i2c_m_enable_implementation+0x60>
				return I2C_ERR_BUSY;
    49a2:	f06f 0305 	mvn.w	r3, #5
    49a6:	e006      	b.n	49b6 <_i2c_m_enable_implementation+0x6e>
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    49a8:	6878      	ldr	r0, [r7, #4]
    49aa:	4b09      	ldr	r3, [pc, #36]	; (49d0 <_i2c_m_enable_implementation+0x88>)
    49ac:	4798      	blx	r3
    49ae:	4603      	mov	r3, r0
    49b0:	2b01      	cmp	r3, #1
    49b2:	d1e2      	bne.n	497a <_i2c_m_enable_implementation+0x32>
		}
	}
	return ERR_NONE;
    49b4:	2300      	movs	r3, #0
}
    49b6:	4618      	mov	r0, r3
    49b8:	3710      	adds	r7, #16
    49ba:	46bd      	mov	sp, r7
    49bc:	bd80      	pop	{r7, pc}
    49be:	bf00      	nop
    49c0:	00005f04 	.word	0x00005f04
    49c4:	00001869 	.word	0x00001869
    49c8:	00003971 	.word	0x00003971
    49cc:	00003e19 	.word	0x00003e19
    49d0:	00003dc9 	.word	0x00003dc9

000049d4 <_i2c_m_sync_init_impl>:

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b084      	sub	sp, #16
    49d8:	af00      	add	r7, sp, #0
    49da:	6078      	str	r0, [r7, #4]
    49dc:	6039      	str	r1, [r7, #0]
	uint8_t i = _get_i2cm_index(hw);
    49de:	6838      	ldr	r0, [r7, #0]
    49e0:	4b42      	ldr	r3, [pc, #264]	; (4aec <_i2c_m_sync_init_impl+0x118>)
    49e2:	4798      	blx	r3
    49e4:	4603      	mov	r3, r0
    49e6:	73fb      	strb	r3, [r7, #15]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    49e8:	2101      	movs	r1, #1
    49ea:	6838      	ldr	r0, [r7, #0]
    49ec:	4b40      	ldr	r3, [pc, #256]	; (4af0 <_i2c_m_sync_init_impl+0x11c>)
    49ee:	4798      	blx	r3
    49f0:	4603      	mov	r3, r0
    49f2:	f083 0301 	eor.w	r3, r3, #1
    49f6:	b2db      	uxtb	r3, r3
    49f8:	2b00      	cmp	r3, #0
    49fa:	d020      	beq.n	4a3e <_i2c_m_sync_init_impl+0x6a>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    49fc:	7bfa      	ldrb	r2, [r7, #15]
    49fe:	493d      	ldr	r1, [pc, #244]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4a00:	4613      	mov	r3, r2
    4a02:	005b      	lsls	r3, r3, #1
    4a04:	4413      	add	r3, r2
    4a06:	00db      	lsls	r3, r3, #3
    4a08:	440b      	add	r3, r1
    4a0a:	3304      	adds	r3, #4
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	f003 031c 	and.w	r3, r3, #28
    4a12:	60bb      	str	r3, [r7, #8]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    4a14:	2102      	movs	r1, #2
    4a16:	6838      	ldr	r0, [r7, #0]
    4a18:	4b37      	ldr	r3, [pc, #220]	; (4af8 <_i2c_m_sync_init_impl+0x124>)
    4a1a:	4798      	blx	r3
    4a1c:	4603      	mov	r3, r0
    4a1e:	2b00      	cmp	r3, #0
    4a20:	d006      	beq.n	4a30 <_i2c_m_sync_init_impl+0x5c>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
    4a22:	6838      	ldr	r0, [r7, #0]
    4a24:	4b35      	ldr	r3, [pc, #212]	; (4afc <_i2c_m_sync_init_impl+0x128>)
    4a26:	4798      	blx	r3
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
    4a28:	2102      	movs	r1, #2
    4a2a:	6838      	ldr	r0, [r7, #0]
    4a2c:	4b34      	ldr	r3, [pc, #208]	; (4b00 <_i2c_m_sync_init_impl+0x12c>)
    4a2e:	4798      	blx	r3
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    4a30:	68bb      	ldr	r3, [r7, #8]
    4a32:	f043 0301 	orr.w	r3, r3, #1
    4a36:	4619      	mov	r1, r3
    4a38:	6838      	ldr	r0, [r7, #0]
    4a3a:	4b32      	ldr	r3, [pc, #200]	; (4b04 <_i2c_m_sync_init_impl+0x130>)
    4a3c:	4798      	blx	r3
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);
    4a3e:	2101      	movs	r1, #1
    4a40:	6838      	ldr	r0, [r7, #0]
    4a42:	4b2f      	ldr	r3, [pc, #188]	; (4b00 <_i2c_m_sync_init_impl+0x12c>)
    4a44:	4798      	blx	r3

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    4a46:	7bfa      	ldrb	r2, [r7, #15]
    4a48:	492a      	ldr	r1, [pc, #168]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4a4a:	4613      	mov	r3, r2
    4a4c:	005b      	lsls	r3, r3, #1
    4a4e:	4413      	add	r3, r2
    4a50:	00db      	lsls	r3, r3, #3
    4a52:	440b      	add	r3, r1
    4a54:	3304      	adds	r3, #4
    4a56:	681b      	ldr	r3, [r3, #0]
    4a58:	4619      	mov	r1, r3
    4a5a:	6838      	ldr	r0, [r7, #0]
    4a5c:	4b29      	ldr	r3, [pc, #164]	; (4b04 <_i2c_m_sync_init_impl+0x130>)
    4a5e:	4798      	blx	r3
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    4a60:	7bfa      	ldrb	r2, [r7, #15]
    4a62:	4924      	ldr	r1, [pc, #144]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4a64:	4613      	mov	r3, r2
    4a66:	005b      	lsls	r3, r3, #1
    4a68:	4413      	add	r3, r2
    4a6a:	00db      	lsls	r3, r3, #3
    4a6c:	440b      	add	r3, r1
    4a6e:	3308      	adds	r3, #8
    4a70:	681b      	ldr	r3, [r3, #0]
    4a72:	4619      	mov	r1, r3
    4a74:	6838      	ldr	r0, [r7, #0]
    4a76:	4b24      	ldr	r3, [pc, #144]	; (4b08 <_i2c_m_sync_init_impl+0x134>)
    4a78:	4798      	blx	r3
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    4a7a:	7bfa      	ldrb	r2, [r7, #15]
    4a7c:	491d      	ldr	r1, [pc, #116]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4a7e:	4613      	mov	r3, r2
    4a80:	005b      	lsls	r3, r3, #1
    4a82:	4413      	add	r3, r2
    4a84:	00db      	lsls	r3, r3, #3
    4a86:	440b      	add	r3, r1
    4a88:	330c      	adds	r3, #12
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	4619      	mov	r1, r3
    4a8e:	6838      	ldr	r0, [r7, #0]
    4a90:	4b1e      	ldr	r3, [pc, #120]	; (4b0c <_i2c_m_sync_init_impl+0x138>)
    4a92:	4798      	blx	r3

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    4a94:	7bfa      	ldrb	r2, [r7, #15]
    4a96:	4917      	ldr	r1, [pc, #92]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4a98:	4613      	mov	r3, r2
    4a9a:	005b      	lsls	r3, r3, #1
    4a9c:	4413      	add	r3, r2
    4a9e:	00db      	lsls	r3, r3, #3
    4aa0:	440b      	add	r3, r1
    4aa2:	3304      	adds	r3, #4
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	0e1b      	lsrs	r3, r3, #24
    4aa8:	b29b      	uxth	r3, r3
    4aaa:	f003 0303 	and.w	r3, r3, #3
    4aae:	b29a      	uxth	r2, r3
    4ab0:	687b      	ldr	r3, [r7, #4]
    4ab2:	819a      	strh	r2, [r3, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    4ab4:	687b      	ldr	r3, [r7, #4]
    4ab6:	899b      	ldrh	r3, [r3, #12]
    4ab8:	2b01      	cmp	r3, #1
    4aba:	bf8c      	ite	hi
    4abc:	2301      	movhi	r3, #1
    4abe:	2300      	movls	r3, #0
    4ac0:	b2db      	uxtb	r3, r3
    4ac2:	4619      	mov	r1, r3
    4ac4:	6838      	ldr	r0, [r7, #0]
    4ac6:	4b12      	ldr	r3, [pc, #72]	; (4b10 <_i2c_m_sync_init_impl+0x13c>)
    4ac8:	4798      	blx	r3

	service->trise = _i2cms[i].trise;
    4aca:	7bfa      	ldrb	r2, [r7, #15]
    4acc:	4909      	ldr	r1, [pc, #36]	; (4af4 <_i2c_m_sync_init_impl+0x120>)
    4ace:	4613      	mov	r3, r2
    4ad0:	005b      	lsls	r3, r3, #1
    4ad2:	4413      	add	r3, r2
    4ad4:	00db      	lsls	r3, r3, #3
    4ad6:	440b      	add	r3, r1
    4ad8:	3312      	adds	r3, #18
    4ada:	881a      	ldrh	r2, [r3, #0]
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	81da      	strh	r2, [r3, #14]

	return ERR_NONE;
    4ae0:	2300      	movs	r3, #0
}
    4ae2:	4618      	mov	r0, r3
    4ae4:	3710      	adds	r7, #16
    4ae6:	46bd      	mov	sp, r7
    4ae8:	bd80      	pop	{r7, pc}
    4aea:	bf00      	nop
    4aec:	00004341 	.word	0x00004341
    4af0:	00003735 	.word	0x00003735
    4af4:	20000018 	.word	0x20000018
    4af8:	000039f1 	.word	0x000039f1
    4afc:	00003999 	.word	0x00003999
    4b00:	00003711 	.word	0x00003711
    4b04:	00003a21 	.word	0x00003a21
    4b08:	00003bb9 	.word	0x00003bb9
    4b0c:	00003c1d 	.word	0x00003c1d
    4b10:	00003c75 	.word	0x00003c75

00004b14 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    4b14:	b580      	push	{r7, lr}
    4b16:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom1_dev);
    4b18:	4b03      	ldr	r3, [pc, #12]	; (4b28 <SERCOM1_0_Handler+0x14>)
    4b1a:	681b      	ldr	r3, [r3, #0]
    4b1c:	4618      	mov	r0, r3
    4b1e:	4b03      	ldr	r3, [pc, #12]	; (4b2c <SERCOM1_0_Handler+0x18>)
    4b20:	4798      	blx	r3
}
    4b22:	bf00      	nop
    4b24:	bd80      	pop	{r7, pc}
    4b26:	bf00      	nop
    4b28:	20000a78 	.word	0x20000a78
    4b2c:	00003ff1 	.word	0x00003ff1

00004b30 <SERCOM1_1_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    4b30:	b580      	push	{r7, lr}
    4b32:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom1_dev);
    4b34:	4b03      	ldr	r3, [pc, #12]	; (4b44 <SERCOM1_1_Handler+0x14>)
    4b36:	681b      	ldr	r3, [r3, #0]
    4b38:	4618      	mov	r0, r3
    4b3a:	4b03      	ldr	r3, [pc, #12]	; (4b48 <SERCOM1_1_Handler+0x18>)
    4b3c:	4798      	blx	r3
}
    4b3e:	bf00      	nop
    4b40:	bd80      	pop	{r7, pc}
    4b42:	bf00      	nop
    4b44:	20000a78 	.word	0x20000a78
    4b48:	00003ff1 	.word	0x00003ff1

00004b4c <SERCOM1_2_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom1_dev);
    4b50:	4b03      	ldr	r3, [pc, #12]	; (4b60 <SERCOM1_2_Handler+0x14>)
    4b52:	681b      	ldr	r3, [r3, #0]
    4b54:	4618      	mov	r0, r3
    4b56:	4b03      	ldr	r3, [pc, #12]	; (4b64 <SERCOM1_2_Handler+0x18>)
    4b58:	4798      	blx	r3
}
    4b5a:	bf00      	nop
    4b5c:	bd80      	pop	{r7, pc}
    4b5e:	bf00      	nop
    4b60:	20000a78 	.word	0x20000a78
    4b64:	00003ff1 	.word	0x00003ff1

00004b68 <SERCOM1_3_Handler>:
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    4b68:	b580      	push	{r7, lr}
    4b6a:	af00      	add	r7, sp, #0
	_sercom_usart_interrupt_handler(_sercom1_dev);
    4b6c:	4b03      	ldr	r3, [pc, #12]	; (4b7c <SERCOM1_3_Handler+0x14>)
    4b6e:	681b      	ldr	r3, [r3, #0]
    4b70:	4618      	mov	r0, r3
    4b72:	4b03      	ldr	r3, [pc, #12]	; (4b80 <SERCOM1_3_Handler+0x18>)
    4b74:	4798      	blx	r3
}
    4b76:	bf00      	nop
    4b78:	bd80      	pop	{r7, pc}
    4b7a:	bf00      	nop
    4b7c:	20000a78 	.word	0x20000a78
    4b80:	00003ff1 	.word	0x00003ff1

00004b84 <_system_time_init>:

/**
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
    4b84:	b480      	push	{r7}
    4b86:	b083      	sub	sp, #12
    4b88:	af00      	add	r7, sp, #0
    4b8a:	6078      	str	r0, [r7, #4]
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    4b8c:	4b06      	ldr	r3, [pc, #24]	; (4ba8 <_system_time_init+0x24>)
    4b8e:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4b92:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    4b94:	4b04      	ldr	r3, [pc, #16]	; (4ba8 <_system_time_init+0x24>)
    4b96:	2205      	movs	r2, #5
    4b98:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    4b9a:	bf00      	nop
    4b9c:	370c      	adds	r7, #12
    4b9e:	46bd      	mov	sp, r7
    4ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ba4:	4770      	bx	lr
    4ba6:	bf00      	nop
    4ba8:	e000e010 	.word	0xe000e010

00004bac <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    4bac:	b580      	push	{r7, lr}
    4bae:	b082      	sub	sp, #8
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
	_system_time_init(hw);
    4bb4:	6878      	ldr	r0, [r7, #4]
    4bb6:	4b03      	ldr	r3, [pc, #12]	; (4bc4 <_delay_init+0x18>)
    4bb8:	4798      	blx	r3
}
    4bba:	bf00      	nop
    4bbc:	3708      	adds	r7, #8
    4bbe:	46bd      	mov	sp, r7
    4bc0:	bd80      	pop	{r7, pc}
    4bc2:	bf00      	nop
    4bc4:	00004b85 	.word	0x00004b85

00004bc8 <_delay_cycles>:
}
/**
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
    4bc8:	b480      	push	{r7}
    4bca:	b085      	sub	sp, #20
    4bcc:	af00      	add	r7, sp, #0
    4bce:	6078      	str	r0, [r7, #4]
    4bd0:	6039      	str	r1, [r7, #0]
	(void)hw;
	uint8_t  n   = cycles >> 24;
    4bd2:	683b      	ldr	r3, [r7, #0]
    4bd4:	0e1b      	lsrs	r3, r3, #24
    4bd6:	73fb      	strb	r3, [r7, #15]
	uint32_t buf = cycles;
    4bd8:	683b      	ldr	r3, [r7, #0]
    4bda:	60bb      	str	r3, [r7, #8]

	while (n--) {
    4bdc:	e013      	b.n	4c06 <_delay_cycles+0x3e>
		SysTick->LOAD = 0xFFFFFF;
    4bde:	4b16      	ldr	r3, [pc, #88]	; (4c38 <_delay_cycles+0x70>)
    4be0:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4be4:	605a      	str	r2, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    4be6:	4b14      	ldr	r3, [pc, #80]	; (4c38 <_delay_cycles+0x70>)
    4be8:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4bec:	609a      	str	r2, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4bee:	bf00      	nop
    4bf0:	4b11      	ldr	r3, [pc, #68]	; (4c38 <_delay_cycles+0x70>)
    4bf2:	681b      	ldr	r3, [r3, #0]
    4bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d0f9      	beq.n	4bf0 <_delay_cycles+0x28>
			;
		buf -= 0xFFFFFF;
    4bfc:	68bb      	ldr	r3, [r7, #8]
    4bfe:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
    4c02:	3301      	adds	r3, #1
    4c04:	60bb      	str	r3, [r7, #8]
	while (n--) {
    4c06:	7bfb      	ldrb	r3, [r7, #15]
    4c08:	1e5a      	subs	r2, r3, #1
    4c0a:	73fa      	strb	r2, [r7, #15]
    4c0c:	2b00      	cmp	r3, #0
    4c0e:	d1e6      	bne.n	4bde <_delay_cycles+0x16>
	}

	SysTick->LOAD = buf;
    4c10:	4a09      	ldr	r2, [pc, #36]	; (4c38 <_delay_cycles+0x70>)
    4c12:	68bb      	ldr	r3, [r7, #8]
    4c14:	6053      	str	r3, [r2, #4]
	SysTick->VAL  = buf;
    4c16:	4a08      	ldr	r2, [pc, #32]	; (4c38 <_delay_cycles+0x70>)
    4c18:	68bb      	ldr	r3, [r7, #8]
    4c1a:	6093      	str	r3, [r2, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    4c1c:	bf00      	nop
    4c1e:	4b06      	ldr	r3, [pc, #24]	; (4c38 <_delay_cycles+0x70>)
    4c20:	681b      	ldr	r3, [r3, #0]
    4c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    4c26:	2b00      	cmp	r3, #0
    4c28:	d0f9      	beq.n	4c1e <_delay_cycles+0x56>
		;
}
    4c2a:	bf00      	nop
    4c2c:	3714      	adds	r7, #20
    4c2e:	46bd      	mov	sp, r7
    4c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c34:	4770      	bx	lr
    4c36:	bf00      	nop
    4c38:	e000e010 	.word	0xe000e010

00004c3c <__NVIC_EnableIRQ>:
{
    4c3c:	b480      	push	{r7}
    4c3e:	b083      	sub	sp, #12
    4c40:	af00      	add	r7, sp, #0
    4c42:	4603      	mov	r3, r0
    4c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c4a:	2b00      	cmp	r3, #0
    4c4c:	db0b      	blt.n	4c66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c4e:	4909      	ldr	r1, [pc, #36]	; (4c74 <__NVIC_EnableIRQ+0x38>)
    4c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c54:	095b      	lsrs	r3, r3, #5
    4c56:	88fa      	ldrh	r2, [r7, #6]
    4c58:	f002 021f 	and.w	r2, r2, #31
    4c5c:	2001      	movs	r0, #1
    4c5e:	fa00 f202 	lsl.w	r2, r0, r2
    4c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4c66:	bf00      	nop
    4c68:	370c      	adds	r7, #12
    4c6a:	46bd      	mov	sp, r7
    4c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4c70:	4770      	bx	lr
    4c72:	bf00      	nop
    4c74:	e000e100 	.word	0xe000e100

00004c78 <__NVIC_DisableIRQ>:
{
    4c78:	b480      	push	{r7}
    4c7a:	b083      	sub	sp, #12
    4c7c:	af00      	add	r7, sp, #0
    4c7e:	4603      	mov	r3, r0
    4c80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c86:	2b00      	cmp	r3, #0
    4c88:	db10      	blt.n	4cac <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4c8a:	490b      	ldr	r1, [pc, #44]	; (4cb8 <__NVIC_DisableIRQ+0x40>)
    4c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4c90:	095b      	lsrs	r3, r3, #5
    4c92:	88fa      	ldrh	r2, [r7, #6]
    4c94:	f002 021f 	and.w	r2, r2, #31
    4c98:	2001      	movs	r0, #1
    4c9a:	fa00 f202 	lsl.w	r2, r0, r2
    4c9e:	3320      	adds	r3, #32
    4ca0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    4ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ca8:	f3bf 8f6f 	isb	sy
}
    4cac:	bf00      	nop
    4cae:	370c      	adds	r7, #12
    4cb0:	46bd      	mov	sp, r7
    4cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cb6:	4770      	bx	lr
    4cb8:	e000e100 	.word	0xe000e100

00004cbc <__NVIC_ClearPendingIRQ>:
{
    4cbc:	b480      	push	{r7}
    4cbe:	b083      	sub	sp, #12
    4cc0:	af00      	add	r7, sp, #0
    4cc2:	4603      	mov	r3, r0
    4cc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
    4cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cca:	2b00      	cmp	r3, #0
    4ccc:	db0c      	blt.n	4ce8 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4cce:	4909      	ldr	r1, [pc, #36]	; (4cf4 <__NVIC_ClearPendingIRQ+0x38>)
    4cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
    4cd4:	095b      	lsrs	r3, r3, #5
    4cd6:	88fa      	ldrh	r2, [r7, #6]
    4cd8:	f002 021f 	and.w	r2, r2, #31
    4cdc:	2001      	movs	r0, #1
    4cde:	fa00 f202 	lsl.w	r2, r0, r2
    4ce2:	3360      	adds	r3, #96	; 0x60
    4ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    4ce8:	bf00      	nop
    4cea:	370c      	adds	r7, #12
    4cec:	46bd      	mov	sp, r7
    4cee:	f85d 7b04 	ldr.w	r7, [sp], #4
    4cf2:	4770      	bx	lr
    4cf4:	e000e100 	.word	0xe000e100

00004cf8 <hri_tcc_wait_for_sync>:
typedef uint32_t hri_tcc_wexctrl_reg_t;
typedef uint8_t  hri_tcc_ctrlbset_reg_t;
typedef uint8_t  hri_tcc_dbgctrl_reg_t;

static inline void hri_tcc_wait_for_sync(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    4cf8:	b480      	push	{r7}
    4cfa:	b083      	sub	sp, #12
    4cfc:	af00      	add	r7, sp, #0
    4cfe:	6078      	str	r0, [r7, #4]
    4d00:	6039      	str	r1, [r7, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    4d02:	bf00      	nop
    4d04:	687b      	ldr	r3, [r7, #4]
    4d06:	689a      	ldr	r2, [r3, #8]
    4d08:	683b      	ldr	r3, [r7, #0]
    4d0a:	4013      	ands	r3, r2
    4d0c:	2b00      	cmp	r3, #0
    4d0e:	d1f9      	bne.n	4d04 <hri_tcc_wait_for_sync+0xc>
	};
}
    4d10:	bf00      	nop
    4d12:	370c      	adds	r7, #12
    4d14:	46bd      	mov	sp, r7
    4d16:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d1a:	4770      	bx	lr

00004d1c <hri_tcc_is_syncing>:

static inline bool hri_tcc_is_syncing(const void *const hw, hri_tcc_syncbusy_reg_t reg)
{
    4d1c:	b480      	push	{r7}
    4d1e:	b083      	sub	sp, #12
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
    4d24:	6039      	str	r1, [r7, #0]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    4d26:	687b      	ldr	r3, [r7, #4]
    4d28:	689a      	ldr	r2, [r3, #8]
    4d2a:	683b      	ldr	r3, [r7, #0]
    4d2c:	4013      	ands	r3, r2
    4d2e:	2b00      	cmp	r3, #0
    4d30:	bf14      	ite	ne
    4d32:	2301      	movne	r3, #1
    4d34:	2300      	moveq	r3, #0
    4d36:	b2db      	uxtb	r3, r3
}
    4d38:	4618      	mov	r0, r3
    4d3a:	370c      	adds	r7, #12
    4d3c:	46bd      	mov	sp, r7
    4d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d42:	4770      	bx	lr

00004d44 <hri_tcc_get_interrupt_OVF_bit>:
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
    4d44:	b480      	push	{r7}
    4d46:	b083      	sub	sp, #12
    4d48:	af00      	add	r7, sp, #0
    4d4a:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    4d4c:	687b      	ldr	r3, [r7, #4]
    4d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4d50:	f003 0301 	and.w	r3, r3, #1
    4d54:	2b00      	cmp	r3, #0
    4d56:	bf14      	ite	ne
    4d58:	2301      	movne	r3, #1
    4d5a:	2300      	moveq	r3, #0
    4d5c:	b2db      	uxtb	r3, r3
}
    4d5e:	4618      	mov	r0, r3
    4d60:	370c      	adds	r7, #12
    4d62:	46bd      	mov	sp, r7
    4d64:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d68:	4770      	bx	lr

00004d6a <hri_tcc_clear_interrupt_OVF_bit>:

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
    4d6a:	b480      	push	{r7}
    4d6c:	b083      	sub	sp, #12
    4d6e:	af00      	add	r7, sp, #0
    4d70:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    4d72:	687b      	ldr	r3, [r7, #4]
    4d74:	2201      	movs	r2, #1
    4d76:	62da      	str	r2, [r3, #44]	; 0x2c
}
    4d78:	bf00      	nop
    4d7a:	370c      	adds	r7, #12
    4d7c:	46bd      	mov	sp, r7
    4d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d82:	4770      	bx	lr

00004d84 <hri_tcc_clear_interrupt_ERR_bit>:
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_ERR) >> TCC_INTFLAG_ERR_Pos;
}

static inline void hri_tcc_clear_interrupt_ERR_bit(const void *const hw)
{
    4d84:	b480      	push	{r7}
    4d86:	b083      	sub	sp, #12
    4d88:	af00      	add	r7, sp, #0
    4d8a:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	2208      	movs	r2, #8
    4d90:	62da      	str	r2, [r3, #44]	; 0x2c
}
    4d92:	bf00      	nop
    4d94:	370c      	adds	r7, #12
    4d96:	46bd      	mov	sp, r7
    4d98:	f85d 7b04 	ldr.w	r7, [sp], #4
    4d9c:	4770      	bx	lr

00004d9e <hri_tcc_clear_CTRLB_LUPD_bit>:
		((Tcc *)hw)->CTRLBSET.reg = TCC_CTRLBSET_LUPD;
	}
}

static inline void hri_tcc_clear_CTRLB_LUPD_bit(const void *const hw)
{
    4d9e:	b480      	push	{r7}
    4da0:	b083      	sub	sp, #12
    4da2:	af00      	add	r7, sp, #0
    4da4:	6078      	str	r0, [r7, #4]
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	2202      	movs	r2, #2
    4daa:	711a      	strb	r2, [r3, #4]
}
    4dac:	bf00      	nop
    4dae:	370c      	adds	r7, #12
    4db0:	46bd      	mov	sp, r7
    4db2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4db6:	4770      	bx	lr

00004db8 <hri_tcc_set_CTRLB_reg>:
{
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_CMD(mask);
}

static inline void hri_tcc_set_CTRLB_reg(const void *const hw, hri_tcc_ctrlbset_reg_t mask)
{
    4db8:	b480      	push	{r7}
    4dba:	b083      	sub	sp, #12
    4dbc:	af00      	add	r7, sp, #0
    4dbe:	6078      	str	r0, [r7, #4]
    4dc0:	460b      	mov	r3, r1
    4dc2:	70fb      	strb	r3, [r7, #3]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	78fa      	ldrb	r2, [r7, #3]
    4dc8:	715a      	strb	r2, [r3, #5]
}
    4dca:	bf00      	nop
    4dcc:	370c      	adds	r7, #12
    4dce:	46bd      	mov	sp, r7
    4dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dd4:	4770      	bx	lr

00004dd6 <hri_tcc_get_INTEN_ERR_bit>:
{
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
}

static inline bool hri_tcc_get_INTEN_ERR_bit(const void *const hw)
{
    4dd6:	b480      	push	{r7}
    4dd8:	b083      	sub	sp, #12
    4dda:	af00      	add	r7, sp, #0
    4ddc:	6078      	str	r0, [r7, #4]
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    4dde:	687b      	ldr	r3, [r7, #4]
    4de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4de2:	08db      	lsrs	r3, r3, #3
    4de4:	f003 0301 	and.w	r3, r3, #1
    4de8:	2b00      	cmp	r3, #0
    4dea:	bf14      	ite	ne
    4dec:	2301      	movne	r3, #1
    4dee:	2300      	moveq	r3, #0
    4df0:	b2db      	uxtb	r3, r3
}
    4df2:	4618      	mov	r0, r3
    4df4:	370c      	adds	r7, #12
    4df6:	46bd      	mov	sp, r7
    4df8:	f85d 7b04 	ldr.w	r7, [sp], #4
    4dfc:	4770      	bx	lr
	...

00004e00 <hri_tcc_set_CTRLA_ENABLE_bit>:
	tmp = (tmp & TCC_CTRLA_SWRST) >> TCC_CTRLA_SWRST_Pos;
	return (bool)tmp;
}

static inline void hri_tcc_set_CTRLA_ENABLE_bit(const void *const hw)
{
    4e00:	b580      	push	{r7, lr}
    4e02:	b082      	sub	sp, #8
    4e04:	af00      	add	r7, sp, #0
    4e06:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    4e08:	687b      	ldr	r3, [r7, #4]
    4e0a:	681b      	ldr	r3, [r3, #0]
    4e0c:	f043 0202 	orr.w	r2, r3, #2
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4e14:	2103      	movs	r1, #3
    4e16:	6878      	ldr	r0, [r7, #4]
    4e18:	4b02      	ldr	r3, [pc, #8]	; (4e24 <hri_tcc_set_CTRLA_ENABLE_bit+0x24>)
    4e1a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4e1c:	bf00      	nop
    4e1e:	3708      	adds	r7, #8
    4e20:	46bd      	mov	sp, r7
    4e22:	bd80      	pop	{r7, pc}
    4e24:	00004cf9 	.word	0x00004cf9

00004e28 <hri_tcc_get_CTRLA_ENABLE_bit>:

static inline bool hri_tcc_get_CTRLA_ENABLE_bit(const void *const hw)
{
    4e28:	b580      	push	{r7, lr}
    4e2a:	b084      	sub	sp, #16
    4e2c:	af00      	add	r7, sp, #0
    4e2e:	6078      	str	r0, [r7, #4]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4e30:	2103      	movs	r1, #3
    4e32:	6878      	ldr	r0, [r7, #4]
    4e34:	4b09      	ldr	r3, [pc, #36]	; (4e5c <hri_tcc_get_CTRLA_ENABLE_bit+0x34>)
    4e36:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	681b      	ldr	r3, [r3, #0]
    4e3c:	60fb      	str	r3, [r7, #12]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    4e3e:	68fb      	ldr	r3, [r7, #12]
    4e40:	085b      	lsrs	r3, r3, #1
    4e42:	f003 0301 	and.w	r3, r3, #1
    4e46:	60fb      	str	r3, [r7, #12]
	return (bool)tmp;
    4e48:	68fb      	ldr	r3, [r7, #12]
    4e4a:	2b00      	cmp	r3, #0
    4e4c:	bf14      	ite	ne
    4e4e:	2301      	movne	r3, #1
    4e50:	2300      	moveq	r3, #0
    4e52:	b2db      	uxtb	r3, r3
}
    4e54:	4618      	mov	r0, r3
    4e56:	3710      	adds	r7, #16
    4e58:	46bd      	mov	sp, r7
    4e5a:	bd80      	pop	{r7, pc}
    4e5c:	00004cf9 	.word	0x00004cf9

00004e60 <hri_tcc_clear_CTRLA_ENABLE_bit>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline void hri_tcc_clear_CTRLA_ENABLE_bit(const void *const hw)
{
    4e60:	b580      	push	{r7, lr}
    4e62:	b082      	sub	sp, #8
    4e64:	af00      	add	r7, sp, #0
    4e66:	6078      	str	r0, [r7, #4]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    4e68:	687b      	ldr	r3, [r7, #4]
    4e6a:	681b      	ldr	r3, [r3, #0]
    4e6c:	f023 0202 	bic.w	r2, r3, #2
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4e74:	2103      	movs	r1, #3
    4e76:	6878      	ldr	r0, [r7, #4]
    4e78:	4b02      	ldr	r3, [pc, #8]	; (4e84 <hri_tcc_clear_CTRLA_ENABLE_bit+0x24>)
    4e7a:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4e7c:	bf00      	nop
    4e7e:	3708      	adds	r7, #8
    4e80:	46bd      	mov	sp, r7
    4e82:	bd80      	pop	{r7, pc}
    4e84:	00004cf9 	.word	0x00004cf9

00004e88 <hri_tcc_get_CTRLA_reg>:
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	TCC_CRITICAL_SECTION_LEAVE();
}

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
    4e88:	b580      	push	{r7, lr}
    4e8a:	b084      	sub	sp, #16
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
    4e90:	6039      	str	r1, [r7, #0]
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4e92:	2103      	movs	r1, #3
    4e94:	6878      	ldr	r0, [r7, #4]
    4e96:	4b07      	ldr	r3, [pc, #28]	; (4eb4 <hri_tcc_get_CTRLA_reg+0x2c>)
    4e98:	4798      	blx	r3
	tmp = ((Tcc *)hw)->CTRLA.reg;
    4e9a:	687b      	ldr	r3, [r7, #4]
    4e9c:	681b      	ldr	r3, [r3, #0]
    4e9e:	60fb      	str	r3, [r7, #12]
	tmp &= mask;
    4ea0:	68fa      	ldr	r2, [r7, #12]
    4ea2:	683b      	ldr	r3, [r7, #0]
    4ea4:	4013      	ands	r3, r2
    4ea6:	60fb      	str	r3, [r7, #12]
	return tmp;
    4ea8:	68fb      	ldr	r3, [r7, #12]
}
    4eaa:	4618      	mov	r0, r3
    4eac:	3710      	adds	r7, #16
    4eae:	46bd      	mov	sp, r7
    4eb0:	bd80      	pop	{r7, pc}
    4eb2:	bf00      	nop
    4eb4:	00004cf9 	.word	0x00004cf9

00004eb8 <hri_tcc_write_CTRLA_reg>:

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
    4eb8:	b580      	push	{r7, lr}
    4eba:	b082      	sub	sp, #8
    4ebc:	af00      	add	r7, sp, #0
    4ebe:	6078      	str	r0, [r7, #4]
    4ec0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    4ec2:	687b      	ldr	r3, [r7, #4]
    4ec4:	683a      	ldr	r2, [r7, #0]
    4ec6:	601a      	str	r2, [r3, #0]
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
    4ec8:	2103      	movs	r1, #3
    4eca:	6878      	ldr	r0, [r7, #4]
    4ecc:	4b02      	ldr	r3, [pc, #8]	; (4ed8 <hri_tcc_write_CTRLA_reg+0x20>)
    4ece:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4ed0:	bf00      	nop
    4ed2:	3708      	adds	r7, #8
    4ed4:	46bd      	mov	sp, r7
    4ed6:	bd80      	pop	{r7, pc}
    4ed8:	00004cf9 	.word	0x00004cf9

00004edc <hri_tcc_write_DBGCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
    4edc:	b480      	push	{r7}
    4ede:	b083      	sub	sp, #12
    4ee0:	af00      	add	r7, sp, #0
    4ee2:	6078      	str	r0, [r7, #4]
    4ee4:	460b      	mov	r3, r1
    4ee6:	70fb      	strb	r3, [r7, #3]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	78fa      	ldrb	r2, [r7, #3]
    4eec:	779a      	strb	r2, [r3, #30]
	TCC_CRITICAL_SECTION_LEAVE();
}
    4eee:	bf00      	nop
    4ef0:	370c      	adds	r7, #12
    4ef2:	46bd      	mov	sp, r7
    4ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ef8:	4770      	bx	lr

00004efa <hri_tcc_write_EVCTRL_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
    4efa:	b480      	push	{r7}
    4efc:	b083      	sub	sp, #12
    4efe:	af00      	add	r7, sp, #0
    4f00:	6078      	str	r0, [r7, #4]
    4f02:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    4f04:	687b      	ldr	r3, [r7, #4]
    4f06:	683a      	ldr	r2, [r7, #0]
    4f08:	621a      	str	r2, [r3, #32]
	TCC_CRITICAL_SECTION_LEAVE();
}
    4f0a:	bf00      	nop
    4f0c:	370c      	adds	r7, #12
    4f0e:	46bd      	mov	sp, r7
    4f10:	f85d 7b04 	ldr.w	r7, [sp], #4
    4f14:	4770      	bx	lr
	...

00004f18 <hri_tcc_write_WAVE_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
    4f18:	b580      	push	{r7, lr}
    4f1a:	b082      	sub	sp, #8
    4f1c:	af00      	add	r7, sp, #0
    4f1e:	6078      	str	r0, [r7, #4]
    4f20:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	683a      	ldr	r2, [r7, #0]
    4f26:	63da      	str	r2, [r3, #60]	; 0x3c
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_MASK);
    4f28:	f643 71ff 	movw	r1, #16383	; 0x3fff
    4f2c:	6878      	ldr	r0, [r7, #4]
    4f2e:	4b03      	ldr	r3, [pc, #12]	; (4f3c <hri_tcc_write_WAVE_reg+0x24>)
    4f30:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4f32:	bf00      	nop
    4f34:	3708      	adds	r7, #8
    4f36:	46bd      	mov	sp, r7
    4f38:	bd80      	pop	{r7, pc}
    4f3a:	bf00      	nop
    4f3c:	00004cf9 	.word	0x00004cf9

00004f40 <hri_tcc_write_PER_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b082      	sub	sp, #8
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
    4f48:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	683a      	ldr	r2, [r7, #0]
    4f4e:	641a      	str	r2, [r3, #64]	; 0x40
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_PER);
    4f50:	2180      	movs	r1, #128	; 0x80
    4f52:	6878      	ldr	r0, [r7, #4]
    4f54:	4b02      	ldr	r3, [pc, #8]	; (4f60 <hri_tcc_write_PER_reg+0x20>)
    4f56:	4798      	blx	r3
	TCC_CRITICAL_SECTION_LEAVE();
}
    4f58:	bf00      	nop
    4f5a:	3708      	adds	r7, #8
    4f5c:	46bd      	mov	sp, r7
    4f5e:	bd80      	pop	{r7, pc}
    4f60:	00004cf9 	.word	0x00004cf9

00004f64 <hri_tcc_write_CC_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
    4f64:	b580      	push	{r7, lr}
    4f66:	b084      	sub	sp, #16
    4f68:	af00      	add	r7, sp, #0
    4f6a:	60f8      	str	r0, [r7, #12]
    4f6c:	460b      	mov	r3, r1
    4f6e:	607a      	str	r2, [r7, #4]
    4f70:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    4f72:	7afb      	ldrb	r3, [r7, #11]
    4f74:	68fa      	ldr	r2, [r7, #12]
    4f76:	3310      	adds	r3, #16
    4f78:	009b      	lsls	r3, r3, #2
    4f7a:	4413      	add	r3, r2
    4f7c:	687a      	ldr	r2, [r7, #4]
    4f7e:	605a      	str	r2, [r3, #4]
	hri_tcc_wait_for_sync(hw,
    4f80:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
    4f84:	68f8      	ldr	r0, [r7, #12]
    4f86:	4b03      	ldr	r3, [pc, #12]	; (4f94 <hri_tcc_write_CC_reg+0x30>)
    4f88:	4798      	blx	r3
	                      TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CC1 | TCC_SYNCBUSY_CC2 | TCC_SYNCBUSY_CC3 | TCC_SYNCBUSY_CC4
	                          | TCC_SYNCBUSY_CC5);
	TCC_CRITICAL_SECTION_LEAVE();
}
    4f8a:	bf00      	nop
    4f8c:	3710      	adds	r7, #16
    4f8e:	46bd      	mov	sp, r7
    4f90:	bd80      	pop	{r7, pc}
    4f92:	bf00      	nop
    4f94:	00004cf9 	.word	0x00004cf9

00004f98 <hri_tcc_write_PERBUF_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_PERBUF_reg(const void *const hw, hri_tcc_perbuf_reg_t data)
{
    4f98:	b480      	push	{r7}
    4f9a:	b083      	sub	sp, #12
    4f9c:	af00      	add	r7, sp, #0
    4f9e:	6078      	str	r0, [r7, #4]
    4fa0:	6039      	str	r1, [r7, #0]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PERBUF.reg = data;
    4fa2:	687b      	ldr	r3, [r7, #4]
    4fa4:	683a      	ldr	r2, [r7, #0]
    4fa6:	66da      	str	r2, [r3, #108]	; 0x6c
	TCC_CRITICAL_SECTION_LEAVE();
}
    4fa8:	bf00      	nop
    4faa:	370c      	adds	r7, #12
    4fac:	46bd      	mov	sp, r7
    4fae:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fb2:	4770      	bx	lr

00004fb4 <hri_tcc_write_CCBUF_reg>:
	tmp &= mask;
	return tmp;
}

static inline void hri_tcc_write_CCBUF_reg(const void *const hw, uint8_t index, hri_tcc_ccbuf_reg_t data)
{
    4fb4:	b480      	push	{r7}
    4fb6:	b085      	sub	sp, #20
    4fb8:	af00      	add	r7, sp, #0
    4fba:	60f8      	str	r0, [r7, #12]
    4fbc:	460b      	mov	r3, r1
    4fbe:	607a      	str	r2, [r7, #4]
    4fc0:	72fb      	strb	r3, [r7, #11]
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCBUF[index].reg = data;
    4fc2:	7afa      	ldrb	r2, [r7, #11]
    4fc4:	68fb      	ldr	r3, [r7, #12]
    4fc6:	321c      	adds	r2, #28
    4fc8:	6879      	ldr	r1, [r7, #4]
    4fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	TCC_CRITICAL_SECTION_LEAVE();
}
    4fce:	bf00      	nop
    4fd0:	3714      	adds	r7, #20
    4fd2:	46bd      	mov	sp, r7
    4fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    4fd8:	4770      	bx	lr
	...

00004fdc <_tcc_init_irq_param>:

/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
    4fdc:	b480      	push	{r7}
    4fde:	b083      	sub	sp, #12
    4fe0:	af00      	add	r7, sp, #0
    4fe2:	6078      	str	r0, [r7, #4]
    4fe4:	6039      	str	r1, [r7, #0]
	if (hw == TCC0) {
    4fe6:	687b      	ldr	r3, [r7, #4]
    4fe8:	4a05      	ldr	r2, [pc, #20]	; (5000 <_tcc_init_irq_param+0x24>)
    4fea:	4293      	cmp	r3, r2
    4fec:	d102      	bne.n	4ff4 <_tcc_init_irq_param+0x18>
		_tcc0_dev = (struct _pwm_device *)dev;
    4fee:	4a05      	ldr	r2, [pc, #20]	; (5004 <_tcc_init_irq_param+0x28>)
    4ff0:	683b      	ldr	r3, [r7, #0]
    4ff2:	6013      	str	r3, [r2, #0]
	}
}
    4ff4:	bf00      	nop
    4ff6:	370c      	adds	r7, #12
    4ff8:	46bd      	mov	sp, r7
    4ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ffe:	4770      	bx	lr
    5000:	41016000 	.word	0x41016000
    5004:	20000a8c 	.word	0x20000a8c

00005008 <_pwm_init>:
/**
 * \brief Initialize TCC for PWM mode
 */
int32_t _pwm_init(struct _pwm_device *const device, void *const hw)
{
    5008:	b580      	push	{r7, lr}
    500a:	b084      	sub	sp, #16
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
    5010:	6039      	str	r1, [r7, #0]
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    5012:	6838      	ldr	r0, [r7, #0]
    5014:	4b6d      	ldr	r3, [pc, #436]	; (51cc <_pwm_init+0x1c4>)
    5016:	4798      	blx	r3
    5018:	60f8      	str	r0, [r7, #12]
	if (cfg == NULL) {
    501a:	68fb      	ldr	r3, [r7, #12]
    501c:	2b00      	cmp	r3, #0
    501e:	d102      	bne.n	5026 <_pwm_init+0x1e>
		return ERR_NOT_FOUND;
    5020:	f06f 0309 	mvn.w	r3, #9
    5024:	e0cd      	b.n	51c2 <_pwm_init+0x1ba>
	}
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    5026:	6838      	ldr	r0, [r7, #0]
    5028:	4b69      	ldr	r3, [pc, #420]	; (51d0 <_pwm_init+0x1c8>)
    502a:	4798      	blx	r3
    502c:	60b8      	str	r0, [r7, #8]
	if (cfg_pwm == NULL) {
    502e:	68bb      	ldr	r3, [r7, #8]
    5030:	2b00      	cmp	r3, #0
    5032:	d102      	bne.n	503a <_pwm_init+0x32>
		return ERR_NOT_FOUND;
    5034:	f06f 0309 	mvn.w	r3, #9
    5038:	e0c3      	b.n	51c2 <_pwm_init+0x1ba>
	}

	device->hw = hw;
    503a:	687b      	ldr	r3, [r7, #4]
    503c:	683a      	ldr	r2, [r7, #0]
    503e:	611a      	str	r2, [r3, #16]

	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    5040:	2101      	movs	r1, #1
    5042:	6838      	ldr	r0, [r7, #0]
    5044:	4b63      	ldr	r3, [pc, #396]	; (51d4 <_pwm_init+0x1cc>)
    5046:	4798      	blx	r3
    5048:	4603      	mov	r3, r0
    504a:	f083 0301 	eor.w	r3, r3, #1
    504e:	b2db      	uxtb	r3, r3
    5050:	2b00      	cmp	r3, #0
    5052:	d011      	beq.n	5078 <_pwm_init+0x70>
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    5054:	2102      	movs	r1, #2
    5056:	6838      	ldr	r0, [r7, #0]
    5058:	4b5f      	ldr	r3, [pc, #380]	; (51d8 <_pwm_init+0x1d0>)
    505a:	4798      	blx	r3
    505c:	4603      	mov	r3, r0
    505e:	2b00      	cmp	r3, #0
    5060:	d006      	beq.n	5070 <_pwm_init+0x68>
			hri_tcc_clear_CTRLA_ENABLE_bit(hw);
    5062:	6838      	ldr	r0, [r7, #0]
    5064:	4b5d      	ldr	r3, [pc, #372]	; (51dc <_pwm_init+0x1d4>)
    5066:	4798      	blx	r3
			hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_ENABLE);
    5068:	2102      	movs	r1, #2
    506a:	6838      	ldr	r0, [r7, #0]
    506c:	4b5c      	ldr	r3, [pc, #368]	; (51e0 <_pwm_init+0x1d8>)
    506e:	4798      	blx	r3
		}
		hri_tcc_write_CTRLA_reg(hw, TCC_CTRLA_SWRST);
    5070:	2101      	movs	r1, #1
    5072:	6838      	ldr	r0, [r7, #0]
    5074:	4b5b      	ldr	r3, [pc, #364]	; (51e4 <_pwm_init+0x1dc>)
    5076:	4798      	blx	r3
	}
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST);
    5078:	2101      	movs	r1, #1
    507a:	6838      	ldr	r0, [r7, #0]
    507c:	4b58      	ldr	r3, [pc, #352]	; (51e0 <_pwm_init+0x1d8>)
    507e:	4798      	blx	r3

	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    5080:	68fb      	ldr	r3, [r7, #12]
    5082:	689b      	ldr	r3, [r3, #8]
    5084:	4619      	mov	r1, r3
    5086:	6838      	ldr	r0, [r7, #0]
    5088:	4b56      	ldr	r3, [pc, #344]	; (51e4 <_pwm_init+0x1dc>)
    508a:	4798      	blx	r3
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    508c:	68fb      	ldr	r3, [r7, #12]
    508e:	7b1b      	ldrb	r3, [r3, #12]
    5090:	4619      	mov	r1, r3
    5092:	6838      	ldr	r0, [r7, #0]
    5094:	4b54      	ldr	r3, [pc, #336]	; (51e8 <_pwm_init+0x1e0>)
    5096:	4798      	blx	r3
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    5098:	68fb      	ldr	r3, [r7, #12]
    509a:	7b5b      	ldrb	r3, [r3, #13]
    509c:	4619      	mov	r1, r3
    509e:	6838      	ldr	r0, [r7, #0]
    50a0:	4b52      	ldr	r3, [pc, #328]	; (51ec <_pwm_init+0x1e4>)
    50a2:	4798      	blx	r3
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    50a4:	68fb      	ldr	r3, [r7, #12]
    50a6:	691b      	ldr	r3, [r3, #16]
    50a8:	4619      	mov	r1, r3
    50aa:	6838      	ldr	r0, [r7, #0]
    50ac:	4b50      	ldr	r3, [pc, #320]	; (51f0 <_pwm_init+0x1e8>)
    50ae:	4798      	blx	r3

	hri_tcc_write_WAVE_reg(hw, cfg_pwm->wave);
    50b0:	68bb      	ldr	r3, [r7, #8]
    50b2:	691b      	ldr	r3, [r3, #16]
    50b4:	4619      	mov	r1, r3
    50b6:	6838      	ldr	r0, [r7, #0]
    50b8:	4b4e      	ldr	r3, [pc, #312]	; (51f4 <_pwm_init+0x1ec>)
    50ba:	4798      	blx	r3
	hri_tcc_write_PER_reg(hw, cfg_pwm->period);
    50bc:	68bb      	ldr	r3, [r7, #8]
    50be:	689b      	ldr	r3, [r3, #8]
    50c0:	4619      	mov	r1, r3
    50c2:	6838      	ldr	r0, [r7, #0]
    50c4:	4b4c      	ldr	r3, [pc, #304]	; (51f8 <_pwm_init+0x1f0>)
    50c6:	4798      	blx	r3
	cfg->per = cfg_pwm->period;
    50c8:	68bb      	ldr	r3, [r7, #8]
    50ca:	689a      	ldr	r2, [r3, #8]
    50cc:	68fb      	ldr	r3, [r7, #12]
    50ce:	62da      	str	r2, [r3, #44]	; 0x2c
	switch (cfg_pwm->sel_ch) {
    50d0:	68bb      	ldr	r3, [r7, #8]
    50d2:	799b      	ldrb	r3, [r3, #6]
    50d4:	2b05      	cmp	r3, #5
    50d6:	d857      	bhi.n	5188 <_pwm_init+0x180>
    50d8:	a201      	add	r2, pc, #4	; (adr r2, 50e0 <_pwm_init+0xd8>)
    50da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    50de:	bf00      	nop
    50e0:	000050f9 	.word	0x000050f9
    50e4:	00005111 	.word	0x00005111
    50e8:	00005129 	.word	0x00005129
    50ec:	00005141 	.word	0x00005141
    50f0:	00005159 	.word	0x00005159
    50f4:	00005171 	.word	0x00005171
	case 0:
		cfg->cc0 = cfg_pwm->duty_cycle;
    50f8:	68bb      	ldr	r3, [r7, #8]
    50fa:	68da      	ldr	r2, [r3, #12]
    50fc:	68fb      	ldr	r3, [r7, #12]
    50fe:	615a      	str	r2, [r3, #20]
		hri_tcc_write_CC_reg(hw, 0, cfg->cc0);
    5100:	68fb      	ldr	r3, [r7, #12]
    5102:	695b      	ldr	r3, [r3, #20]
    5104:	461a      	mov	r2, r3
    5106:	2100      	movs	r1, #0
    5108:	6838      	ldr	r0, [r7, #0]
    510a:	4b3c      	ldr	r3, [pc, #240]	; (51fc <_pwm_init+0x1f4>)
    510c:	4798      	blx	r3
		break;
    510e:	e03e      	b.n	518e <_pwm_init+0x186>
	case 1:
		cfg->cc1 = cfg_pwm->duty_cycle;
    5110:	68bb      	ldr	r3, [r7, #8]
    5112:	68da      	ldr	r2, [r3, #12]
    5114:	68fb      	ldr	r3, [r7, #12]
    5116:	619a      	str	r2, [r3, #24]
		hri_tcc_write_CC_reg(hw, 1, cfg->cc1);
    5118:	68fb      	ldr	r3, [r7, #12]
    511a:	699b      	ldr	r3, [r3, #24]
    511c:	461a      	mov	r2, r3
    511e:	2101      	movs	r1, #1
    5120:	6838      	ldr	r0, [r7, #0]
    5122:	4b36      	ldr	r3, [pc, #216]	; (51fc <_pwm_init+0x1f4>)
    5124:	4798      	blx	r3
		break;
    5126:	e032      	b.n	518e <_pwm_init+0x186>
	case 2:
		cfg->cc2 = cfg_pwm->duty_cycle;
    5128:	68bb      	ldr	r3, [r7, #8]
    512a:	68da      	ldr	r2, [r3, #12]
    512c:	68fb      	ldr	r3, [r7, #12]
    512e:	61da      	str	r2, [r3, #28]
		hri_tcc_write_CC_reg(hw, 2, cfg->cc2);
    5130:	68fb      	ldr	r3, [r7, #12]
    5132:	69db      	ldr	r3, [r3, #28]
    5134:	461a      	mov	r2, r3
    5136:	2102      	movs	r1, #2
    5138:	6838      	ldr	r0, [r7, #0]
    513a:	4b30      	ldr	r3, [pc, #192]	; (51fc <_pwm_init+0x1f4>)
    513c:	4798      	blx	r3
		break;
    513e:	e026      	b.n	518e <_pwm_init+0x186>
	case 3:
		cfg->cc3 = cfg_pwm->duty_cycle;
    5140:	68bb      	ldr	r3, [r7, #8]
    5142:	68da      	ldr	r2, [r3, #12]
    5144:	68fb      	ldr	r3, [r7, #12]
    5146:	621a      	str	r2, [r3, #32]
		hri_tcc_write_CC_reg(hw, 3, cfg->cc3);
    5148:	68fb      	ldr	r3, [r7, #12]
    514a:	6a1b      	ldr	r3, [r3, #32]
    514c:	461a      	mov	r2, r3
    514e:	2103      	movs	r1, #3
    5150:	6838      	ldr	r0, [r7, #0]
    5152:	4b2a      	ldr	r3, [pc, #168]	; (51fc <_pwm_init+0x1f4>)
    5154:	4798      	blx	r3
		break;
    5156:	e01a      	b.n	518e <_pwm_init+0x186>
	case 4:
		cfg->cc4 = cfg_pwm->duty_cycle;
    5158:	68bb      	ldr	r3, [r7, #8]
    515a:	68da      	ldr	r2, [r3, #12]
    515c:	68fb      	ldr	r3, [r7, #12]
    515e:	625a      	str	r2, [r3, #36]	; 0x24
		hri_tcc_write_CC_reg(hw, 4, cfg->cc4);
    5160:	68fb      	ldr	r3, [r7, #12]
    5162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5164:	461a      	mov	r2, r3
    5166:	2104      	movs	r1, #4
    5168:	6838      	ldr	r0, [r7, #0]
    516a:	4b24      	ldr	r3, [pc, #144]	; (51fc <_pwm_init+0x1f4>)
    516c:	4798      	blx	r3
		break;
    516e:	e00e      	b.n	518e <_pwm_init+0x186>
	case 5:
		cfg->cc5 = cfg_pwm->duty_cycle;
    5170:	68bb      	ldr	r3, [r7, #8]
    5172:	68da      	ldr	r2, [r3, #12]
    5174:	68fb      	ldr	r3, [r7, #12]
    5176:	629a      	str	r2, [r3, #40]	; 0x28
		hri_tcc_write_CC_reg(hw, 5, cfg->cc5);
    5178:	68fb      	ldr	r3, [r7, #12]
    517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    517c:	461a      	mov	r2, r3
    517e:	2105      	movs	r1, #5
    5180:	6838      	ldr	r0, [r7, #0]
    5182:	4b1e      	ldr	r3, [pc, #120]	; (51fc <_pwm_init+0x1f4>)
    5184:	4798      	blx	r3
		break;
    5186:	e002      	b.n	518e <_pwm_init+0x186>
	default:
		return ERR_NO_RESOURCE;
    5188:	f06f 031b 	mvn.w	r3, #27
    518c:	e019      	b.n	51c2 <_pwm_init+0x1ba>
		break;
	}
	hri_tcc_clear_CTRLB_LUPD_bit(hw);
    518e:	6838      	ldr	r0, [r7, #0]
    5190:	4b1b      	ldr	r3, [pc, #108]	; (5200 <_pwm_init+0x1f8>)
    5192:	4798      	blx	r3

	_tcc_init_irq_param(hw, (void *)device);
    5194:	6879      	ldr	r1, [r7, #4]
    5196:	6838      	ldr	r0, [r7, #0]
    5198:	4b1a      	ldr	r3, [pc, #104]	; (5204 <_pwm_init+0x1fc>)
    519a:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    519c:	68bb      	ldr	r3, [r7, #8]
    519e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    51a2:	4618      	mov	r0, r3
    51a4:	4b18      	ldr	r3, [pc, #96]	; (5208 <_pwm_init+0x200>)
    51a6:	4798      	blx	r3
	NVIC_ClearPendingIRQ((IRQn_Type)cfg_pwm->irq);
    51a8:	68bb      	ldr	r3, [r7, #8]
    51aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    51ae:	4618      	mov	r0, r3
    51b0:	4b16      	ldr	r3, [pc, #88]	; (520c <_pwm_init+0x204>)
    51b2:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type)cfg_pwm->irq);
    51b4:	68bb      	ldr	r3, [r7, #8]
    51b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    51ba:	4618      	mov	r0, r3
    51bc:	4b14      	ldr	r3, [pc, #80]	; (5210 <_pwm_init+0x208>)
    51be:	4798      	blx	r3

	return ERR_NONE;
    51c0:	2300      	movs	r3, #0
}
    51c2:	4618      	mov	r0, r3
    51c4:	3710      	adds	r7, #16
    51c6:	46bd      	mov	sp, r7
    51c8:	bd80      	pop	{r7, pc}
    51ca:	bf00      	nop
    51cc:	00005339 	.word	0x00005339
    51d0:	0000538d 	.word	0x0000538d
    51d4:	00004d1d 	.word	0x00004d1d
    51d8:	00004e89 	.word	0x00004e89
    51dc:	00004e61 	.word	0x00004e61
    51e0:	00004cf9 	.word	0x00004cf9
    51e4:	00004eb9 	.word	0x00004eb9
    51e8:	00004db9 	.word	0x00004db9
    51ec:	00004edd 	.word	0x00004edd
    51f0:	00004efb 	.word	0x00004efb
    51f4:	00004f19 	.word	0x00004f19
    51f8:	00004f41 	.word	0x00004f41
    51fc:	00004f65 	.word	0x00004f65
    5200:	00004d9f 	.word	0x00004d9f
    5204:	00004fdd 	.word	0x00004fdd
    5208:	00004c79 	.word	0x00004c79
    520c:	00004cbd 	.word	0x00004cbd
    5210:	00004c3d 	.word	0x00004c3d

00005214 <_pwm_enable>:
}
/**
 * \brief Start PWM
 */
void _pwm_enable(struct _pwm_device *const device)
{
    5214:	b580      	push	{r7, lr}
    5216:	b082      	sub	sp, #8
    5218:	af00      	add	r7, sp, #0
    521a:	6078      	str	r0, [r7, #4]
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    521c:	687b      	ldr	r3, [r7, #4]
    521e:	691b      	ldr	r3, [r3, #16]
    5220:	4618      	mov	r0, r3
    5222:	4b03      	ldr	r3, [pc, #12]	; (5230 <_pwm_enable+0x1c>)
    5224:	4798      	blx	r3
}
    5226:	bf00      	nop
    5228:	3708      	adds	r7, #8
    522a:	46bd      	mov	sp, r7
    522c:	bd80      	pop	{r7, pc}
    522e:	bf00      	nop
    5230:	00004e01 	.word	0x00004e01

00005234 <_pwm_set_param>:
}
/**
 * \brief Set PWM parameter
 */
void _pwm_set_param(struct _pwm_device *const device, const pwm_period_t period, const pwm_period_t duty_cycle)
{
    5234:	b580      	push	{r7, lr}
    5236:	b086      	sub	sp, #24
    5238:	af00      	add	r7, sp, #0
    523a:	60f8      	str	r0, [r7, #12]
    523c:	60b9      	str	r1, [r7, #8]
    523e:	607a      	str	r2, [r7, #4]
	void *const         hw      = device->hw;
    5240:	68fb      	ldr	r3, [r7, #12]
    5242:	691b      	ldr	r3, [r3, #16]
    5244:	617b      	str	r3, [r7, #20]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    5246:	6978      	ldr	r0, [r7, #20]
    5248:	4b0a      	ldr	r3, [pc, #40]	; (5274 <_pwm_set_param+0x40>)
    524a:	4798      	blx	r3
    524c:	6138      	str	r0, [r7, #16]
	if (cfg_pwm != NULL) {
    524e:	693b      	ldr	r3, [r7, #16]
    5250:	2b00      	cmp	r3, #0
    5252:	d00a      	beq.n	526a <_pwm_set_param+0x36>
		hri_tcc_write_PERB_reg(hw, period);
    5254:	68b9      	ldr	r1, [r7, #8]
    5256:	6978      	ldr	r0, [r7, #20]
    5258:	4b07      	ldr	r3, [pc, #28]	; (5278 <_pwm_set_param+0x44>)
    525a:	4798      	blx	r3
		hri_tcc_write_CCB_reg(hw, cfg_pwm->sel_ch, duty_cycle);
    525c:	693b      	ldr	r3, [r7, #16]
    525e:	799b      	ldrb	r3, [r3, #6]
    5260:	687a      	ldr	r2, [r7, #4]
    5262:	4619      	mov	r1, r3
    5264:	6978      	ldr	r0, [r7, #20]
    5266:	4b05      	ldr	r3, [pc, #20]	; (527c <_pwm_set_param+0x48>)
    5268:	4798      	blx	r3
		;
	}
}
    526a:	bf00      	nop
    526c:	3718      	adds	r7, #24
    526e:	46bd      	mov	sp, r7
    5270:	bd80      	pop	{r7, pc}
    5272:	bf00      	nop
    5274:	0000538d 	.word	0x0000538d
    5278:	00004f99 	.word	0x00004f99
    527c:	00004fb5 	.word	0x00004fb5

00005280 <_pwm_is_enabled>:
}
/**
 * \brief Check if PWM is running
 */
bool _pwm_is_enabled(const struct _pwm_device *const device)
{
    5280:	b580      	push	{r7, lr}
    5282:	b082      	sub	sp, #8
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    5288:	687b      	ldr	r3, [r7, #4]
    528a:	691b      	ldr	r3, [r3, #16]
    528c:	4618      	mov	r0, r3
    528e:	4b03      	ldr	r3, [pc, #12]	; (529c <_pwm_is_enabled+0x1c>)
    5290:	4798      	blx	r3
    5292:	4603      	mov	r3, r0
}
    5294:	4618      	mov	r0, r3
    5296:	3708      	adds	r7, #8
    5298:	46bd      	mov	sp, r7
    529a:	bd80      	pop	{r7, pc}
    529c:	00004e29 	.word	0x00004e29

000052a0 <_tcc_get_pwm>:

/**
 * \brief Retrieve pwm helper functions
 */
struct _pwm_hpl_interface *_tcc_get_pwm(void)
{
    52a0:	b480      	push	{r7}
    52a2:	af00      	add	r7, sp, #0
	return NULL;
    52a4:	2300      	movs	r3, #0
}
    52a6:	4618      	mov	r0, r3
    52a8:	46bd      	mov	sp, r7
    52aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    52ae:	4770      	bx	lr

000052b0 <tcc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tcc_pwm_interrupt_handler(struct _pwm_device *device)
{
    52b0:	b580      	push	{r7, lr}
    52b2:	b084      	sub	sp, #16
    52b4:	af00      	add	r7, sp, #0
    52b6:	6078      	str	r0, [r7, #4]
	void *const hw = device->hw;
    52b8:	687b      	ldr	r3, [r7, #4]
    52ba:	691b      	ldr	r3, [r3, #16]
    52bc:	60fb      	str	r3, [r7, #12]

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    52be:	68f8      	ldr	r0, [r7, #12]
    52c0:	4b12      	ldr	r3, [pc, #72]	; (530c <tcc_pwm_interrupt_handler+0x5c>)
    52c2:	4798      	blx	r3
    52c4:	4603      	mov	r3, r0
    52c6:	2b00      	cmp	r3, #0
    52c8:	d00a      	beq.n	52e0 <tcc_pwm_interrupt_handler+0x30>
		hri_tcc_clear_interrupt_OVF_bit(hw);
    52ca:	68f8      	ldr	r0, [r7, #12]
    52cc:	4b10      	ldr	r3, [pc, #64]	; (5310 <tcc_pwm_interrupt_handler+0x60>)
    52ce:	4798      	blx	r3
		if (NULL != device->callback.pwm_period_cb) {
    52d0:	687b      	ldr	r3, [r7, #4]
    52d2:	681b      	ldr	r3, [r3, #0]
    52d4:	2b00      	cmp	r3, #0
    52d6:	d003      	beq.n	52e0 <tcc_pwm_interrupt_handler+0x30>
			device->callback.pwm_period_cb(device);
    52d8:	687b      	ldr	r3, [r7, #4]
    52da:	681b      	ldr	r3, [r3, #0]
    52dc:	6878      	ldr	r0, [r7, #4]
    52de:	4798      	blx	r3
		}
	}
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    52e0:	68f8      	ldr	r0, [r7, #12]
    52e2:	4b0c      	ldr	r3, [pc, #48]	; (5314 <tcc_pwm_interrupt_handler+0x64>)
    52e4:	4798      	blx	r3
    52e6:	4603      	mov	r3, r0
    52e8:	2b00      	cmp	r3, #0
    52ea:	d00a      	beq.n	5302 <tcc_pwm_interrupt_handler+0x52>
		hri_tcc_clear_interrupt_ERR_bit(hw);
    52ec:	68f8      	ldr	r0, [r7, #12]
    52ee:	4b0a      	ldr	r3, [pc, #40]	; (5318 <tcc_pwm_interrupt_handler+0x68>)
    52f0:	4798      	blx	r3
		if (NULL != device->callback.pwm_error_cb) {
    52f2:	687b      	ldr	r3, [r7, #4]
    52f4:	685b      	ldr	r3, [r3, #4]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d003      	beq.n	5302 <tcc_pwm_interrupt_handler+0x52>
			device->callback.pwm_error_cb(device);
    52fa:	687b      	ldr	r3, [r7, #4]
    52fc:	685b      	ldr	r3, [r3, #4]
    52fe:	6878      	ldr	r0, [r7, #4]
    5300:	4798      	blx	r3
		}
	}
}
    5302:	bf00      	nop
    5304:	3710      	adds	r7, #16
    5306:	46bd      	mov	sp, r7
    5308:	bd80      	pop	{r7, pc}
    530a:	bf00      	nop
    530c:	00004d45 	.word	0x00004d45
    5310:	00004d6b 	.word	0x00004d6b
    5314:	00004dd7 	.word	0x00004dd7
    5318:	00004d85 	.word	0x00004d85

0000531c <TCC0_0_Handler>:

/**
 * \brief TCC interrupt handler
 */
void TCC0_0_Handler(void)
{
    531c:	b580      	push	{r7, lr}
    531e:	af00      	add	r7, sp, #0
	tcc_pwm_interrupt_handler(_tcc0_dev);
    5320:	4b03      	ldr	r3, [pc, #12]	; (5330 <TCC0_0_Handler+0x14>)
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	4618      	mov	r0, r3
    5326:	4b03      	ldr	r3, [pc, #12]	; (5334 <TCC0_0_Handler+0x18>)
    5328:	4798      	blx	r3
}
    532a:	bf00      	nop
    532c:	bd80      	pop	{r7, pc}
    532e:	bf00      	nop
    5330:	20000a8c 	.word	0x20000a8c
    5334:	000052b1 	.word	0x000052b1

00005338 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
    5338:	b480      	push	{r7}
    533a:	b085      	sub	sp, #20
    533c:	af00      	add	r7, sp, #0
    533e:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    5340:	2300      	movs	r3, #0
    5342:	73fb      	strb	r3, [r7, #15]
    5344:	e015      	b.n	5372 <_get_tcc_cfg+0x3a>
		if (_cfgs[i].hw == hw) {
    5346:	7bfa      	ldrb	r2, [r7, #15]
    5348:	490f      	ldr	r1, [pc, #60]	; (5388 <_get_tcc_cfg+0x50>)
    534a:	4613      	mov	r3, r2
    534c:	005b      	lsls	r3, r3, #1
    534e:	4413      	add	r3, r2
    5350:	011b      	lsls	r3, r3, #4
    5352:	440b      	add	r3, r1
    5354:	681a      	ldr	r2, [r3, #0]
    5356:	687b      	ldr	r3, [r7, #4]
    5358:	429a      	cmp	r2, r3
    535a:	d107      	bne.n	536c <_get_tcc_cfg+0x34>
			return &(_cfgs[i]);
    535c:	7bfa      	ldrb	r2, [r7, #15]
    535e:	4613      	mov	r3, r2
    5360:	005b      	lsls	r3, r3, #1
    5362:	4413      	add	r3, r2
    5364:	011b      	lsls	r3, r3, #4
    5366:	4a08      	ldr	r2, [pc, #32]	; (5388 <_get_tcc_cfg+0x50>)
    5368:	4413      	add	r3, r2
    536a:	e006      	b.n	537a <_get_tcc_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    536c:	7bfb      	ldrb	r3, [r7, #15]
    536e:	3301      	adds	r3, #1
    5370:	73fb      	strb	r3, [r7, #15]
    5372:	7bfb      	ldrb	r3, [r7, #15]
    5374:	2b00      	cmp	r3, #0
    5376:	d0e6      	beq.n	5346 <_get_tcc_cfg+0xe>
		}
	}
	return NULL;
    5378:	2300      	movs	r3, #0
}
    537a:	4618      	mov	r0, r3
    537c:	3714      	adds	r7, #20
    537e:	46bd      	mov	sp, r7
    5380:	f85d 7b04 	ldr.w	r7, [sp], #4
    5384:	4770      	bx	lr
    5386:	bf00      	nop
    5388:	20000030 	.word	0x20000030

0000538c <_get_tcc_pwm_cfg>:

static struct tcc_pwm_cfg *_get_tcc_pwm_cfg(void *hw)
{
    538c:	b480      	push	{r7}
    538e:	b085      	sub	sp, #20
    5390:	af00      	add	r7, sp, #0
    5392:	6078      	str	r0, [r7, #4]
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    5394:	2300      	movs	r3, #0
    5396:	73fb      	strb	r3, [r7, #15]
    5398:	e015      	b.n	53c6 <_get_tcc_pwm_cfg+0x3a>
		if (_cfgs_pwm[i].hw == hw) {
    539a:	7bfa      	ldrb	r2, [r7, #15]
    539c:	490f      	ldr	r1, [pc, #60]	; (53dc <_get_tcc_pwm_cfg+0x50>)
    539e:	4613      	mov	r3, r2
    53a0:	009b      	lsls	r3, r3, #2
    53a2:	4413      	add	r3, r2
    53a4:	009b      	lsls	r3, r3, #2
    53a6:	440b      	add	r3, r1
    53a8:	681a      	ldr	r2, [r3, #0]
    53aa:	687b      	ldr	r3, [r7, #4]
    53ac:	429a      	cmp	r2, r3
    53ae:	d107      	bne.n	53c0 <_get_tcc_pwm_cfg+0x34>
			return &(_cfgs_pwm[i]);
    53b0:	7bfa      	ldrb	r2, [r7, #15]
    53b2:	4613      	mov	r3, r2
    53b4:	009b      	lsls	r3, r3, #2
    53b6:	4413      	add	r3, r2
    53b8:	009b      	lsls	r3, r3, #2
    53ba:	4a08      	ldr	r2, [pc, #32]	; (53dc <_get_tcc_pwm_cfg+0x50>)
    53bc:	4413      	add	r3, r2
    53be:	e006      	b.n	53ce <_get_tcc_pwm_cfg+0x42>
	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    53c0:	7bfb      	ldrb	r3, [r7, #15]
    53c2:	3301      	adds	r3, #1
    53c4:	73fb      	strb	r3, [r7, #15]
    53c6:	7bfb      	ldrb	r3, [r7, #15]
    53c8:	2b00      	cmp	r3, #0
    53ca:	d0e6      	beq.n	539a <_get_tcc_pwm_cfg+0xe>
		}
	}
	return NULL;
    53cc:	2300      	movs	r3, #0
}
    53ce:	4618      	mov	r0, r3
    53d0:	3714      	adds	r7, #20
    53d2:	46bd      	mov	sp, r7
    53d4:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d8:	4770      	bx	lr
    53da:	bf00      	nop
    53dc:	20000060 	.word	0x20000060

000053e0 <hri_port_read_DIR_reg>:
{
    53e0:	b480      	push	{r7}
    53e2:	b083      	sub	sp, #12
    53e4:	af00      	add	r7, sp, #0
    53e6:	6078      	str	r0, [r7, #4]
    53e8:	460b      	mov	r3, r1
    53ea:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    53ec:	78fb      	ldrb	r3, [r7, #3]
    53ee:	687a      	ldr	r2, [r7, #4]
    53f0:	01db      	lsls	r3, r3, #7
    53f2:	4413      	add	r3, r2
    53f4:	681b      	ldr	r3, [r3, #0]
}
    53f6:	4618      	mov	r0, r3
    53f8:	370c      	adds	r7, #12
    53fa:	46bd      	mov	sp, r7
    53fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5400:	4770      	bx	lr

00005402 <hri_port_set_OUT_reg>:
{
    5402:	b480      	push	{r7}
    5404:	b085      	sub	sp, #20
    5406:	af00      	add	r7, sp, #0
    5408:	60f8      	str	r0, [r7, #12]
    540a:	460b      	mov	r3, r1
    540c:	607a      	str	r2, [r7, #4]
    540e:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5410:	7afb      	ldrb	r3, [r7, #11]
    5412:	68fa      	ldr	r2, [r7, #12]
    5414:	01db      	lsls	r3, r3, #7
    5416:	4413      	add	r3, r2
    5418:	3318      	adds	r3, #24
    541a:	687a      	ldr	r2, [r7, #4]
    541c:	601a      	str	r2, [r3, #0]
}
    541e:	bf00      	nop
    5420:	3714      	adds	r7, #20
    5422:	46bd      	mov	sp, r7
    5424:	f85d 7b04 	ldr.w	r7, [sp], #4
    5428:	4770      	bx	lr

0000542a <hri_port_read_OUT_reg>:
{
    542a:	b480      	push	{r7}
    542c:	b083      	sub	sp, #12
    542e:	af00      	add	r7, sp, #0
    5430:	6078      	str	r0, [r7, #4]
    5432:	460b      	mov	r3, r1
    5434:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5436:	78fb      	ldrb	r3, [r7, #3]
    5438:	687a      	ldr	r2, [r7, #4]
    543a:	01db      	lsls	r3, r3, #7
    543c:	4413      	add	r3, r2
    543e:	3310      	adds	r3, #16
    5440:	681b      	ldr	r3, [r3, #0]
}
    5442:	4618      	mov	r0, r3
    5444:	370c      	adds	r7, #12
    5446:	46bd      	mov	sp, r7
    5448:	f85d 7b04 	ldr.w	r7, [sp], #4
    544c:	4770      	bx	lr

0000544e <hri_port_clear_OUT_reg>:
{
    544e:	b480      	push	{r7}
    5450:	b085      	sub	sp, #20
    5452:	af00      	add	r7, sp, #0
    5454:	60f8      	str	r0, [r7, #12]
    5456:	460b      	mov	r3, r1
    5458:	607a      	str	r2, [r7, #4]
    545a:	72fb      	strb	r3, [r7, #11]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    545c:	7afb      	ldrb	r3, [r7, #11]
    545e:	68fa      	ldr	r2, [r7, #12]
    5460:	01db      	lsls	r3, r3, #7
    5462:	4413      	add	r3, r2
    5464:	3314      	adds	r3, #20
    5466:	687a      	ldr	r2, [r7, #4]
    5468:	601a      	str	r2, [r3, #0]
}
    546a:	bf00      	nop
    546c:	3714      	adds	r7, #20
    546e:	46bd      	mov	sp, r7
    5470:	f85d 7b04 	ldr.w	r7, [sp], #4
    5474:	4770      	bx	lr

00005476 <hri_port_read_IN_reg>:
{
    5476:	b480      	push	{r7}
    5478:	b083      	sub	sp, #12
    547a:	af00      	add	r7, sp, #0
    547c:	6078      	str	r0, [r7, #4]
    547e:	460b      	mov	r3, r1
    5480:	70fb      	strb	r3, [r7, #3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5482:	78fb      	ldrb	r3, [r7, #3]
    5484:	687a      	ldr	r2, [r7, #4]
    5486:	01db      	lsls	r3, r3, #7
    5488:	4413      	add	r3, r2
    548a:	3320      	adds	r3, #32
    548c:	681b      	ldr	r3, [r3, #0]
}
    548e:	4618      	mov	r0, r3
    5490:	370c      	adds	r7, #12
    5492:	46bd      	mov	sp, r7
    5494:	f85d 7b04 	ldr.w	r7, [sp], #4
    5498:	4770      	bx	lr
	...

0000549c <_gpio_set_level>:
{
    549c:	b580      	push	{r7, lr}
    549e:	b082      	sub	sp, #8
    54a0:	af00      	add	r7, sp, #0
    54a2:	4603      	mov	r3, r0
    54a4:	6039      	str	r1, [r7, #0]
    54a6:	71fb      	strb	r3, [r7, #7]
    54a8:	4613      	mov	r3, r2
    54aa:	71bb      	strb	r3, [r7, #6]
	if (level) {
    54ac:	79bb      	ldrb	r3, [r7, #6]
    54ae:	2b00      	cmp	r3, #0
    54b0:	d006      	beq.n	54c0 <_gpio_set_level+0x24>
		hri_port_set_OUT_reg(PORT, port, mask);
    54b2:	79fb      	ldrb	r3, [r7, #7]
    54b4:	683a      	ldr	r2, [r7, #0]
    54b6:	4619      	mov	r1, r3
    54b8:	4806      	ldr	r0, [pc, #24]	; (54d4 <_gpio_set_level+0x38>)
    54ba:	4b07      	ldr	r3, [pc, #28]	; (54d8 <_gpio_set_level+0x3c>)
    54bc:	4798      	blx	r3
}
    54be:	e005      	b.n	54cc <_gpio_set_level+0x30>
		hri_port_clear_OUT_reg(PORT, port, mask);
    54c0:	79fb      	ldrb	r3, [r7, #7]
    54c2:	683a      	ldr	r2, [r7, #0]
    54c4:	4619      	mov	r1, r3
    54c6:	4803      	ldr	r0, [pc, #12]	; (54d4 <_gpio_set_level+0x38>)
    54c8:	4b04      	ldr	r3, [pc, #16]	; (54dc <_gpio_set_level+0x40>)
    54ca:	4798      	blx	r3
}
    54cc:	bf00      	nop
    54ce:	3708      	adds	r7, #8
    54d0:	46bd      	mov	sp, r7
    54d2:	bd80      	pop	{r7, pc}
    54d4:	41008000 	.word	0x41008000
    54d8:	00005403 	.word	0x00005403
    54dc:	0000544f 	.word	0x0000544f

000054e0 <_gpio_get_level>:
{
    54e0:	b580      	push	{r7, lr}
    54e2:	b086      	sub	sp, #24
    54e4:	af00      	add	r7, sp, #0
    54e6:	4603      	mov	r3, r0
    54e8:	71fb      	strb	r3, [r7, #7]
	CRITICAL_SECTION_ENTER();
    54ea:	f107 030c 	add.w	r3, r7, #12
    54ee:	4618      	mov	r0, r3
    54f0:	4b13      	ldr	r3, [pc, #76]	; (5540 <_gpio_get_level+0x60>)
    54f2:	4798      	blx	r3
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);
    54f4:	79fb      	ldrb	r3, [r7, #7]
    54f6:	4619      	mov	r1, r3
    54f8:	4812      	ldr	r0, [pc, #72]	; (5544 <_gpio_get_level+0x64>)
    54fa:	4b13      	ldr	r3, [pc, #76]	; (5548 <_gpio_get_level+0x68>)
    54fc:	4798      	blx	r3
    54fe:	6178      	str	r0, [r7, #20]
	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
    5500:	79fb      	ldrb	r3, [r7, #7]
    5502:	4619      	mov	r1, r3
    5504:	480f      	ldr	r0, [pc, #60]	; (5544 <_gpio_get_level+0x64>)
    5506:	4b11      	ldr	r3, [pc, #68]	; (554c <_gpio_get_level+0x6c>)
    5508:	4798      	blx	r3
    550a:	4602      	mov	r2, r0
    550c:	697b      	ldr	r3, [r7, #20]
    550e:	43db      	mvns	r3, r3
    5510:	4013      	ands	r3, r2
    5512:	613b      	str	r3, [r7, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    5514:	79fb      	ldrb	r3, [r7, #7]
    5516:	4619      	mov	r1, r3
    5518:	480a      	ldr	r0, [pc, #40]	; (5544 <_gpio_get_level+0x64>)
    551a:	4b0d      	ldr	r3, [pc, #52]	; (5550 <_gpio_get_level+0x70>)
    551c:	4798      	blx	r3
    551e:	4602      	mov	r2, r0
    5520:	697b      	ldr	r3, [r7, #20]
    5522:	4013      	ands	r3, r2
    5524:	693a      	ldr	r2, [r7, #16]
    5526:	4313      	orrs	r3, r2
    5528:	613b      	str	r3, [r7, #16]
	CRITICAL_SECTION_LEAVE();
    552a:	f107 030c 	add.w	r3, r7, #12
    552e:	4618      	mov	r0, r3
    5530:	4b08      	ldr	r3, [pc, #32]	; (5554 <_gpio_get_level+0x74>)
    5532:	4798      	blx	r3
	return tmp;
    5534:	693b      	ldr	r3, [r7, #16]
}
    5536:	4618      	mov	r0, r3
    5538:	3718      	adds	r7, #24
    553a:	46bd      	mov	sp, r7
    553c:	bd80      	pop	{r7, pc}
    553e:	bf00      	nop
    5540:	00000ded 	.word	0x00000ded
    5544:	41008000 	.word	0x41008000
    5548:	000053e1 	.word	0x000053e1
    554c:	00005477 	.word	0x00005477
    5550:	0000542b 	.word	0x0000542b
    5554:	00000e13 	.word	0x00000e13

00005558 <gpio_set_pin_level>:
{
    5558:	b580      	push	{r7, lr}
    555a:	b082      	sub	sp, #8
    555c:	af00      	add	r7, sp, #0
    555e:	4603      	mov	r3, r0
    5560:	460a      	mov	r2, r1
    5562:	71fb      	strb	r3, [r7, #7]
    5564:	4613      	mov	r3, r2
    5566:	71bb      	strb	r3, [r7, #6]
	_gpio_set_level((enum gpio_port)GPIO_PORT(pin), 1U << GPIO_PIN(pin), level);
    5568:	79fb      	ldrb	r3, [r7, #7]
    556a:	095b      	lsrs	r3, r3, #5
    556c:	b2d8      	uxtb	r0, r3
    556e:	79fb      	ldrb	r3, [r7, #7]
    5570:	f003 031f 	and.w	r3, r3, #31
    5574:	2201      	movs	r2, #1
    5576:	fa02 f303 	lsl.w	r3, r2, r3
    557a:	79ba      	ldrb	r2, [r7, #6]
    557c:	4619      	mov	r1, r3
    557e:	4b03      	ldr	r3, [pc, #12]	; (558c <gpio_set_pin_level+0x34>)
    5580:	4798      	blx	r3
}
    5582:	bf00      	nop
    5584:	3708      	adds	r7, #8
    5586:	46bd      	mov	sp, r7
    5588:	bd80      	pop	{r7, pc}
    558a:	bf00      	nop
    558c:	0000549d 	.word	0x0000549d

00005590 <gpio_get_pin_level>:
 * Reads the level on pins connected to a port
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
    5590:	b580      	push	{r7, lr}
    5592:	b082      	sub	sp, #8
    5594:	af00      	add	r7, sp, #0
    5596:	4603      	mov	r3, r0
    5598:	71fb      	strb	r3, [r7, #7]
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    559a:	79fb      	ldrb	r3, [r7, #7]
    559c:	095b      	lsrs	r3, r3, #5
    559e:	b2db      	uxtb	r3, r3
    55a0:	4618      	mov	r0, r3
    55a2:	4b09      	ldr	r3, [pc, #36]	; (55c8 <gpio_get_pin_level+0x38>)
    55a4:	4798      	blx	r3
    55a6:	4601      	mov	r1, r0
    55a8:	79fb      	ldrb	r3, [r7, #7]
    55aa:	f003 031f 	and.w	r3, r3, #31
    55ae:	2201      	movs	r2, #1
    55b0:	fa02 f303 	lsl.w	r3, r2, r3
    55b4:	400b      	ands	r3, r1
    55b6:	2b00      	cmp	r3, #0
    55b8:	bf14      	ite	ne
    55ba:	2301      	movne	r3, #1
    55bc:	2300      	moveq	r3, #0
    55be:	b2db      	uxtb	r3, r3
}
    55c0:	4618      	mov	r0, r3
    55c2:	3708      	adds	r7, #8
    55c4:	46bd      	mov	sp, r7
    55c6:	bd80      	pop	{r7, pc}
    55c8:	000054e1 	.word	0x000054e1

000055cc <camera_async_enable>:
 * \param[in] descr Camera sensor descriptor to enable
 *
 * \return Enabling status.
 */
static inline int32_t camera_async_enable(struct camera_async_descriptor *const descr)
{
    55cc:	b580      	push	{r7, lr}
    55ce:	b082      	sub	sp, #8
    55d0:	af00      	add	r7, sp, #0
    55d2:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    55d4:	687b      	ldr	r3, [r7, #4]
    55d6:	2b00      	cmp	r3, #0
    55d8:	bf14      	ite	ne
    55da:	2301      	movne	r3, #1
    55dc:	2300      	moveq	r3, #0
    55de:	b2db      	uxtb	r3, r3
    55e0:	227f      	movs	r2, #127	; 0x7f
    55e2:	4906      	ldr	r1, [pc, #24]	; (55fc <camera_async_enable+0x30>)
    55e4:	4618      	mov	r0, r3
    55e6:	4b06      	ldr	r3, [pc, #24]	; (5600 <camera_async_enable+0x34>)
    55e8:	4798      	blx	r3

	_camera_async_enable(&descr->device);
    55ea:	687b      	ldr	r3, [r7, #4]
    55ec:	4618      	mov	r0, r3
    55ee:	4b05      	ldr	r3, [pc, #20]	; (5604 <camera_async_enable+0x38>)
    55f0:	4798      	blx	r3

	return ERR_NONE;
    55f2:	2300      	movs	r3, #0
}
    55f4:	4618      	mov	r0, r3
    55f6:	3708      	adds	r7, #8
    55f8:	46bd      	mov	sp, r7
    55fa:	bd80      	pop	{r7, pc}
    55fc:	00005f54 	.word	0x00005f54
    5600:	00001869 	.word	0x00001869
    5604:	000034a5 	.word	0x000034a5

00005608 <camera_async_disable>:
 * \param[in] descr The camera sensor descriptor to disable
 *
 * \return Disabling status.
 */
static inline int32_t camera_async_disable(struct camera_async_descriptor *const descr)
{
    5608:	b580      	push	{r7, lr}
    560a:	b082      	sub	sp, #8
    560c:	af00      	add	r7, sp, #0
    560e:	6078      	str	r0, [r7, #4]
	ASSERT(descr);
    5610:	687b      	ldr	r3, [r7, #4]
    5612:	2b00      	cmp	r3, #0
    5614:	bf14      	ite	ne
    5616:	2301      	movne	r3, #1
    5618:	2300      	moveq	r3, #0
    561a:	b2db      	uxtb	r3, r3
    561c:	2291      	movs	r2, #145	; 0x91
    561e:	4906      	ldr	r1, [pc, #24]	; (5638 <camera_async_disable+0x30>)
    5620:	4618      	mov	r0, r3
    5622:	4b06      	ldr	r3, [pc, #24]	; (563c <camera_async_disable+0x34>)
    5624:	4798      	blx	r3

	_camera_async_disable(&descr->device);
    5626:	687b      	ldr	r3, [r7, #4]
    5628:	4618      	mov	r0, r3
    562a:	4b05      	ldr	r3, [pc, #20]	; (5640 <camera_async_disable+0x38>)
    562c:	4798      	blx	r3

	return ERR_NONE;
    562e:	2300      	movs	r3, #0
}
    5630:	4618      	mov	r0, r3
    5632:	3708      	adds	r7, #8
    5634:	46bd      	mov	sp, r7
    5636:	bd80      	pop	{r7, pc}
    5638:	00005f54 	.word	0x00005f54
    563c:	00001869 	.word	0x00001869
    5640:	000034c5 	.word	0x000034c5

00005644 <camera_async_capture_start>:
 *
 * \return Capture start status.
 */
static inline int32_t camera_async_capture_start(struct camera_async_descriptor *const descr, uint32_t ch,
                                                 uint32_t *buf)
{
    5644:	b580      	push	{r7, lr}
    5646:	b084      	sub	sp, #16
    5648:	af00      	add	r7, sp, #0
    564a:	60f8      	str	r0, [r7, #12]
    564c:	60b9      	str	r1, [r7, #8]
    564e:	607a      	str	r2, [r7, #4]
	ASSERT(descr);
    5650:	68fb      	ldr	r3, [r7, #12]
    5652:	2b00      	cmp	r3, #0
    5654:	bf14      	ite	ne
    5656:	2301      	movne	r3, #1
    5658:	2300      	moveq	r3, #0
    565a:	b2db      	uxtb	r3, r3
    565c:	22b9      	movs	r2, #185	; 0xb9
    565e:	490d      	ldr	r1, [pc, #52]	; (5694 <camera_async_capture_start+0x50>)
    5660:	4618      	mov	r0, r3
    5662:	4b0d      	ldr	r3, [pc, #52]	; (5698 <camera_async_capture_start+0x54>)
    5664:	4798      	blx	r3
	ASSERT(buf);
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	2b00      	cmp	r3, #0
    566a:	bf14      	ite	ne
    566c:	2301      	movne	r3, #1
    566e:	2300      	moveq	r3, #0
    5670:	b2db      	uxtb	r3, r3
    5672:	22ba      	movs	r2, #186	; 0xba
    5674:	4907      	ldr	r1, [pc, #28]	; (5694 <camera_async_capture_start+0x50>)
    5676:	4618      	mov	r0, r3
    5678:	4b07      	ldr	r3, [pc, #28]	; (5698 <camera_async_capture_start+0x54>)
    567a:	4798      	blx	r3

	_camera_async_capture_start(&descr->device, ch, buf);
    567c:	68fb      	ldr	r3, [r7, #12]
    567e:	687a      	ldr	r2, [r7, #4]
    5680:	68b9      	ldr	r1, [r7, #8]
    5682:	4618      	mov	r0, r3
    5684:	4b05      	ldr	r3, [pc, #20]	; (569c <camera_async_capture_start+0x58>)
    5686:	4798      	blx	r3

	return ERR_NONE;
    5688:	2300      	movs	r3, #0
}
    568a:	4618      	mov	r0, r3
    568c:	3710      	adds	r7, #16
    568e:	46bd      	mov	sp, r7
    5690:	bd80      	pop	{r7, pc}
    5692:	bf00      	nop
    5694:	00005f54 	.word	0x00005f54
    5698:	00001869 	.word	0x00001869
    569c:	000034e5 	.word	0x000034e5

000056a0 <ext_irq_cb_PCC_VSYNC>:
	delay_ms(1);
}


static void ext_irq_cb_PCC_VSYNC(void)
{
    56a0:	b480      	push	{r7}
    56a2:	af00      	add	r7, sp, #0
	
	//Do Nothing
//	asm ("nop");
}
    56a4:	bf00      	nop
    56a6:	46bd      	mov	sp, r7
    56a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    56ac:	4770      	bx	lr
	...

000056b0 <config_sensor_ov7670>:

void config_sensor_ov7670(void)
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b082      	sub	sp, #8
    56b4:	af00      	add	r7, sp, #0

	uint8_t PCC_SCCB_Buffer[2];
	uint8_t recv_vid;
	uint8_t recv_pid;
	
	gpio_set_pin_level(PCC_PWDN, false);
    56b6:	2100      	movs	r1, #0
    56b8:	2056      	movs	r0, #86	; 0x56
    56ba:	4b71      	ldr	r3, [pc, #452]	; (5880 <config_sensor_ov7670+0x1d0>)
    56bc:	4798      	blx	r3
	gpio_set_pin_level(PCC_RESET, true);
    56be:	2101      	movs	r1, #1
    56c0:	2057      	movs	r0, #87	; 0x57
    56c2:	4b6f      	ldr	r3, [pc, #444]	; (5880 <config_sensor_ov7670+0x1d0>)
    56c4:	4798      	blx	r3
	delay_ms(10);
    56c6:	200a      	movs	r0, #10
    56c8:	4b6e      	ldr	r3, [pc, #440]	; (5884 <config_sensor_ov7670+0x1d4>)
    56ca:	4798      	blx	r3
	
	i2c_m_sync_get_io_descriptor(&PCC_SCCB, &PCC_SCCB_io);
    56cc:	496e      	ldr	r1, [pc, #440]	; (5888 <config_sensor_ov7670+0x1d8>)
    56ce:	486f      	ldr	r0, [pc, #444]	; (588c <config_sensor_ov7670+0x1dc>)
    56d0:	4b6f      	ldr	r3, [pc, #444]	; (5890 <config_sensor_ov7670+0x1e0>)
    56d2:	4798      	blx	r3
	i2c_m_sync_enable(&PCC_SCCB);
    56d4:	486d      	ldr	r0, [pc, #436]	; (588c <config_sensor_ov7670+0x1dc>)
    56d6:	4b6f      	ldr	r3, [pc, #444]	; (5894 <config_sensor_ov7670+0x1e4>)
    56d8:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&PCC_SCCB, OV7670_SLAVE_ADDRESS, I2C_M_SEVEN);
    56da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    56de:	2121      	movs	r1, #33	; 0x21
    56e0:	486a      	ldr	r0, [pc, #424]	; (588c <config_sensor_ov7670+0x1dc>)
    56e2:	4b6d      	ldr	r3, [pc, #436]	; (5898 <config_sensor_ov7670+0x1e8>)
    56e4:	4798      	blx	r3

	PCC_SCCB_Buffer[0] = OV7670_CHIPID_HIGH;
    56e6:	230a      	movs	r3, #10
    56e8:	713b      	strb	r3, [r7, #4]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 1);
    56ea:	1d3b      	adds	r3, r7, #4
    56ec:	2201      	movs	r2, #1
    56ee:	4619      	mov	r1, r3
    56f0:	486a      	ldr	r0, [pc, #424]	; (589c <config_sensor_ov7670+0x1ec>)
    56f2:	4b6b      	ldr	r3, [pc, #428]	; (58a0 <config_sensor_ov7670+0x1f0>)
    56f4:	4798      	blx	r3
	io_read(&PCC_SCCB.io, &recv_vid, 1);
    56f6:	1cfb      	adds	r3, r7, #3
    56f8:	2201      	movs	r2, #1
    56fa:	4619      	mov	r1, r3
    56fc:	4867      	ldr	r0, [pc, #412]	; (589c <config_sensor_ov7670+0x1ec>)
    56fe:	4b69      	ldr	r3, [pc, #420]	; (58a4 <config_sensor_ov7670+0x1f4>)
    5700:	4798      	blx	r3

	delay_ms(10);
    5702:	200a      	movs	r0, #10
    5704:	4b5f      	ldr	r3, [pc, #380]	; (5884 <config_sensor_ov7670+0x1d4>)
    5706:	4798      	blx	r3
	PCC_SCCB_Buffer[0] = OV7670_CHIPID_LOW;
    5708:	230b      	movs	r3, #11
    570a:	713b      	strb	r3, [r7, #4]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 1);
    570c:	1d3b      	adds	r3, r7, #4
    570e:	2201      	movs	r2, #1
    5710:	4619      	mov	r1, r3
    5712:	4862      	ldr	r0, [pc, #392]	; (589c <config_sensor_ov7670+0x1ec>)
    5714:	4b62      	ldr	r3, [pc, #392]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5716:	4798      	blx	r3
	io_read(&PCC_SCCB.io, &recv_pid, 1);
    5718:	1cbb      	adds	r3, r7, #2
    571a:	2201      	movs	r2, #1
    571c:	4619      	mov	r1, r3
    571e:	485f      	ldr	r0, [pc, #380]	; (589c <config_sensor_ov7670+0x1ec>)
    5720:	4b60      	ldr	r3, [pc, #384]	; (58a4 <config_sensor_ov7670+0x1f4>)
    5722:	4798      	blx	r3
	delay_ms(10);
    5724:	200a      	movs	r0, #10
    5726:	4b57      	ldr	r3, [pc, #348]	; (5884 <config_sensor_ov7670+0x1d4>)
    5728:	4798      	blx	r3
	if(OV7670_CHIPID_VID == recv_vid && OV7670_CHIPID_PID == recv_pid)
    572a:	78fb      	ldrb	r3, [r7, #3]
    572c:	2b76      	cmp	r3, #118	; 0x76
    572e:	d102      	bne.n	5736 <config_sensor_ov7670+0x86>
    5730:	78bb      	ldrb	r3, [r7, #2]
    5732:	2b73      	cmp	r3, #115	; 0x73
    5734:	d000      	beq.n	5738 <config_sensor_ov7670+0x88>
	else
	{
		#ifdef CAMERA_0_TEST
	//	io_write(&EDBG_COM.io, Display_Invalid_VID_PID, sizeof(Display_Invalid_VID_PID));
		#endif
		while(1);
    5736:	e7fe      	b.n	5736 <config_sensor_ov7670+0x86>
// 	PCC_SCCB_Buffer[1] = 0x80;//08
// 	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
////	delay_ms(500);
	///////////////////////////////////////////////////
	
		PCC_SCCB_Buffer[0] = 0x0C;
    5738:	230c      	movs	r3, #12
    573a:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x04;//08
    573c:	2304      	movs	r3, #4
    573e:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5740:	1d3b      	adds	r3, r7, #4
    5742:	2202      	movs	r2, #2
    5744:	4619      	mov	r1, r3
    5746:	4855      	ldr	r0, [pc, #340]	; (589c <config_sensor_ov7670+0x1ec>)
    5748:	4b55      	ldr	r3, [pc, #340]	; (58a0 <config_sensor_ov7670+0x1f0>)
    574a:	4798      	blx	r3
			
		PCC_SCCB_Buffer[0] = 0x12;
    574c:	2312      	movs	r3, #18
    574e:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x14;//14
    5750:	2314      	movs	r3, #20
    5752:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5754:	1d3b      	adds	r3, r7, #4
    5756:	2202      	movs	r2, #2
    5758:	4619      	mov	r1, r3
    575a:	4850      	ldr	r0, [pc, #320]	; (589c <config_sensor_ov7670+0x1ec>)
    575c:	4b50      	ldr	r3, [pc, #320]	; (58a0 <config_sensor_ov7670+0x1f0>)
    575e:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x11;
    5760:	2311      	movs	r3, #17
    5762:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x01;
    5764:	2301      	movs	r3, #1
    5766:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5768:	1d3b      	adds	r3, r7, #4
    576a:	2202      	movs	r2, #2
    576c:	4619      	mov	r1, r3
    576e:	484b      	ldr	r0, [pc, #300]	; (589c <config_sensor_ov7670+0x1ec>)
    5770:	4b4b      	ldr	r3, [pc, #300]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5772:	4798      	blx	r3
	
		PCC_SCCB_Buffer[0] = 0x15;
    5774:	2315      	movs	r3, #21
    5776:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x03;//02  03
    5778:	2303      	movs	r3, #3
    577a:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    577c:	1d3b      	adds	r3, r7, #4
    577e:	2202      	movs	r2, #2
    5780:	4619      	mov	r1, r3
    5782:	4846      	ldr	r0, [pc, #280]	; (589c <config_sensor_ov7670+0x1ec>)
    5784:	4b46      	ldr	r3, [pc, #280]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5786:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x8c;
    5788:	238c      	movs	r3, #140	; 0x8c
    578a:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x00;
    578c:	2300      	movs	r3, #0
    578e:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5790:	1d3b      	adds	r3, r7, #4
    5792:	2202      	movs	r2, #2
    5794:	4619      	mov	r1, r3
    5796:	4841      	ldr	r0, [pc, #260]	; (589c <config_sensor_ov7670+0x1ec>)
    5798:	4b41      	ldr	r3, [pc, #260]	; (58a0 <config_sensor_ov7670+0x1f0>)
    579a:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x40;
    579c:	2340      	movs	r3, #64	; 0x40
    579e:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0xd0;
    57a0:	23d0      	movs	r3, #208	; 0xd0
    57a2:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    57a4:	1d3b      	adds	r3, r7, #4
    57a6:	2202      	movs	r2, #2
    57a8:	4619      	mov	r1, r3
    57aa:	483c      	ldr	r0, [pc, #240]	; (589c <config_sensor_ov7670+0x1ec>)
    57ac:	4b3c      	ldr	r3, [pc, #240]	; (58a0 <config_sensor_ov7670+0x1f0>)
    57ae:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x1E;
    57b0:	231e      	movs	r3, #30
    57b2:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x01;//31  01
    57b4:	2301      	movs	r3, #1
    57b6:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    57b8:	1d3b      	adds	r3, r7, #4
    57ba:	2202      	movs	r2, #2
    57bc:	4619      	mov	r1, r3
    57be:	4837      	ldr	r0, [pc, #220]	; (589c <config_sensor_ov7670+0x1ec>)
    57c0:	4b37      	ldr	r3, [pc, #220]	; (58a0 <config_sensor_ov7670+0x1f0>)
    57c2:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x3A;
    57c4:	233a      	movs	r3, #58	; 0x3a
    57c6:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x0D;
    57c8:	230d      	movs	r3, #13
    57ca:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    57cc:	1d3b      	adds	r3, r7, #4
    57ce:	2202      	movs	r2, #2
    57d0:	4619      	mov	r1, r3
    57d2:	4832      	ldr	r0, [pc, #200]	; (589c <config_sensor_ov7670+0x1ec>)
    57d4:	4b32      	ldr	r3, [pc, #200]	; (58a0 <config_sensor_ov7670+0x1f0>)
    57d6:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x3E;
    57d8:	233e      	movs	r3, #62	; 0x3e
    57da:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x19; //19
    57dc:	2319      	movs	r3, #25
    57de:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    57e0:	1d3b      	adds	r3, r7, #4
    57e2:	2202      	movs	r2, #2
    57e4:	4619      	mov	r1, r3
    57e6:	482d      	ldr	r0, [pc, #180]	; (589c <config_sensor_ov7670+0x1ec>)
    57e8:	4b2d      	ldr	r3, [pc, #180]	; (58a0 <config_sensor_ov7670+0x1f0>)
    57ea:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x73;
    57ec:	2373      	movs	r3, #115	; 0x73
    57ee:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0xF9;//f1  f9
    57f0:	23f9      	movs	r3, #249	; 0xf9
    57f2:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    57f4:	1d3b      	adds	r3, r7, #4
    57f6:	2202      	movs	r2, #2
    57f8:	4619      	mov	r1, r3
    57fa:	4828      	ldr	r0, [pc, #160]	; (589c <config_sensor_ov7670+0x1ec>)
    57fc:	4b28      	ldr	r3, [pc, #160]	; (58a0 <config_sensor_ov7670+0x1f0>)
    57fe:	4798      	blx	r3
	
		PCC_SCCB_Buffer[0] = 0xa2;
    5800:	23a2      	movs	r3, #162	; 0xa2
    5802:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x02;
    5804:	2302      	movs	r3, #2
    5806:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5808:	1d3b      	adds	r3, r7, #4
    580a:	2202      	movs	r2, #2
    580c:	4619      	mov	r1, r3
    580e:	4823      	ldr	r0, [pc, #140]	; (589c <config_sensor_ov7670+0x1ec>)
    5810:	4b23      	ldr	r3, [pc, #140]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5812:	4798      	blx	r3
			
		PCC_SCCB_Buffer[0] = 0x17;
    5814:	2317      	movs	r3, #23
    5816:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x16;//0x0b  16
    5818:	2316      	movs	r3, #22
    581a:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    581c:	1d3b      	adds	r3, r7, #4
    581e:	2202      	movs	r2, #2
    5820:	4619      	mov	r1, r3
    5822:	481e      	ldr	r0, [pc, #120]	; (589c <config_sensor_ov7670+0x1ec>)
    5824:	4b1e      	ldr	r3, [pc, #120]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5826:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x70;
    5828:	2370      	movs	r3, #112	; 0x70
    582a:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x3a;
    582c:	233a      	movs	r3, #58	; 0x3a
    582e:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5830:	1d3b      	adds	r3, r7, #4
    5832:	2202      	movs	r2, #2
    5834:	4619      	mov	r1, r3
    5836:	4819      	ldr	r0, [pc, #100]	; (589c <config_sensor_ov7670+0x1ec>)
    5838:	4b19      	ldr	r3, [pc, #100]	; (58a0 <config_sensor_ov7670+0x1f0>)
    583a:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x71;
    583c:	2371      	movs	r3, #113	; 0x71
    583e:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x35;
    5840:	2335      	movs	r3, #53	; 0x35
    5842:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5844:	1d3b      	adds	r3, r7, #4
    5846:	2202      	movs	r2, #2
    5848:	4619      	mov	r1, r3
    584a:	4814      	ldr	r0, [pc, #80]	; (589c <config_sensor_ov7670+0x1ec>)
    584c:	4b14      	ldr	r3, [pc, #80]	; (58a0 <config_sensor_ov7670+0x1f0>)
    584e:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x72;
    5850:	2372      	movs	r3, #114	; 0x72
    5852:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x11;
    5854:	2311      	movs	r3, #17
    5856:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    5858:	1d3b      	adds	r3, r7, #4
    585a:	2202      	movs	r2, #2
    585c:	4619      	mov	r1, r3
    585e:	480f      	ldr	r0, [pc, #60]	; (589c <config_sensor_ov7670+0x1ec>)
    5860:	4b0f      	ldr	r3, [pc, #60]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5862:	4798      	blx	r3
		
		PCC_SCCB_Buffer[0] = 0x32;
    5864:	2332      	movs	r3, #50	; 0x32
    5866:	713b      	strb	r3, [r7, #4]
		PCC_SCCB_Buffer[1] = 0x24;//80  24
    5868:	2324      	movs	r3, #36	; 0x24
    586a:	717b      	strb	r3, [r7, #5]
		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    586c:	1d3b      	adds	r3, r7, #4
    586e:	2202      	movs	r2, #2
    5870:	4619      	mov	r1, r3
    5872:	480a      	ldr	r0, [pc, #40]	; (589c <config_sensor_ov7670+0x1ec>)
    5874:	4b0a      	ldr	r3, [pc, #40]	; (58a0 <config_sensor_ov7670+0x1f0>)
    5876:	4798      	blx	r3
// 		PCC_SCCB_Buffer[0] = 0x72;
// 		PCC_SCCB_Buffer[1] = 0x11;
// 		io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);

	
}
    5878:	bf00      	nop
    587a:	3708      	adds	r7, #8
    587c:	46bd      	mov	sp, r7
    587e:	bd80      	pop	{r7, pc}
    5880:	00005559 	.word	0x00005559
    5884:	00000f15 	.word	0x00000f15
    5888:	20026350 	.word	0x20026350
    588c:	20026314 	.word	0x20026314
    5890:	0000131f 	.word	0x0000131f
    5894:	000012c5 	.word	0x000012c5
    5898:	000012e5 	.word	0x000012e5
    589c:	20026328 	.word	0x20026328
    58a0:	00001341 	.word	0x00001341
    58a4:	00001391 	.word	0x00001391

000058a8 <main>:
/////////////////////////////////////////////////////////////////////
int main(void)
{
    58a8:	b580      	push	{r7, lr}
    58aa:	af00      	add	r7, sp, #0
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    58ac:	4b35      	ldr	r3, [pc, #212]	; (5984 <main+0xdc>)
    58ae:	4798      	blx	r3
	gpio_set_pin_level(PCC_RESET, false);
    58b0:	2100      	movs	r1, #0
    58b2:	2057      	movs	r0, #87	; 0x57
    58b4:	4b34      	ldr	r3, [pc, #208]	; (5988 <main+0xe0>)
    58b6:	4798      	blx	r3
	usart_async_enable(&EDBG_COM);
    58b8:	4834      	ldr	r0, [pc, #208]	; (598c <main+0xe4>)
    58ba:	4b35      	ldr	r3, [pc, #212]	; (5990 <main+0xe8>)
    58bc:	4798      	blx	r3
 	//pwm_set_parameters(&PWM_0,22,11);
	pwm_set_parameters(&PWM_0,4,2);
    58be:	2202      	movs	r2, #2
    58c0:	2104      	movs	r1, #4
    58c2:	4834      	ldr	r0, [pc, #208]	; (5994 <main+0xec>)
    58c4:	4b34      	ldr	r3, [pc, #208]	; (5998 <main+0xf0>)
    58c6:	4798      	blx	r3
	 
 	pwm_enable(&PWM_0);	
    58c8:	4832      	ldr	r0, [pc, #200]	; (5994 <main+0xec>)
    58ca:	4b34      	ldr	r3, [pc, #208]	; (599c <main+0xf4>)
    58cc:	4798      	blx	r3
	
	
		memset(CAMERA_OV7670_frame_buf.hword,0x30,sizeof(CAMERA_OV7670_frame_buf.hword));
    58ce:	f44f 3216 	mov.w	r2, #153600	; 0x25800
    58d2:	2130      	movs	r1, #48	; 0x30
    58d4:	4832      	ldr	r0, [pc, #200]	; (59a0 <main+0xf8>)
    58d6:	4b33      	ldr	r3, [pc, #204]	; (59a4 <main+0xfc>)
    58d8:	4798      	blx	r3
       	config_sensor_ov7670();
    58da:	4b33      	ldr	r3, [pc, #204]	; (59a8 <main+0x100>)
    58dc:	4798      	blx	r3
		   
 		ext_irq_register(PCC_VSYNC, ext_irq_cb_PCC_VSYNC);	
    58de:	4933      	ldr	r1, [pc, #204]	; (59ac <main+0x104>)
    58e0:	200c      	movs	r0, #12
    58e2:	4b33      	ldr	r3, [pc, #204]	; (59b0 <main+0x108>)
    58e4:	4798      	blx	r3
		ext_irq_enable(PCC_VSYNC);
    58e6:	200c      	movs	r0, #12
    58e8:	4b32      	ldr	r3, [pc, #200]	; (59b4 <main+0x10c>)
    58ea:	4798      	blx	r3
 		while(gpio_get_pin_level(PCC_VSYNC) == 0);
    58ec:	bf00      	nop
    58ee:	200c      	movs	r0, #12
    58f0:	4b31      	ldr	r3, [pc, #196]	; (59b8 <main+0x110>)
    58f2:	4798      	blx	r3
    58f4:	4603      	mov	r3, r0
    58f6:	f083 0301 	eor.w	r3, r3, #1
    58fa:	b2db      	uxtb	r3, r3
    58fc:	2b00      	cmp	r3, #0
    58fe:	d1f6      	bne.n	58ee <main+0x46>
 		while(gpio_get_pin_level(PCC_VSYNC) != 0);
    5900:	bf00      	nop
    5902:	200c      	movs	r0, #12
    5904:	4b2c      	ldr	r3, [pc, #176]	; (59b8 <main+0x110>)
    5906:	4798      	blx	r3
    5908:	4603      	mov	r3, r0
    590a:	2b00      	cmp	r3, #0
    590c:	d1f9      	bne.n	5902 <main+0x5a>
  		camera_async_enable(&CAMERA_OV7670);
    590e:	482b      	ldr	r0, [pc, #172]	; (59bc <main+0x114>)
    5910:	4b2b      	ldr	r3, [pc, #172]	; (59c0 <main+0x118>)
    5912:	4798      	blx	r3
  		camera_async_capture_start(&CAMERA_OV7670, 0, (uint32_t *) &CAMERA_OV7670_frame_buf.hword[0]);
    5914:	4a22      	ldr	r2, [pc, #136]	; (59a0 <main+0xf8>)
    5916:	2100      	movs	r1, #0
    5918:	4828      	ldr	r0, [pc, #160]	; (59bc <main+0x114>)
    591a:	4b2a      	ldr	r3, [pc, #168]	; (59c4 <main+0x11c>)
    591c:	4798      	blx	r3
//  
 		flag_frame_captured = 0;
    591e:	4b2a      	ldr	r3, [pc, #168]	; (59c8 <main+0x120>)
    5920:	2200      	movs	r2, #0
    5922:	601a      	str	r2, [r3, #0]
 		while(flag_frame_captured == 0);
    5924:	bf00      	nop
    5926:	4b28      	ldr	r3, [pc, #160]	; (59c8 <main+0x120>)
    5928:	681b      	ldr	r3, [r3, #0]
    592a:	2b00      	cmp	r3, #0
    592c:	d0fb      	beq.n	5926 <main+0x7e>
		camera_async_disable(&CAMERA_OV7670);
    592e:	4823      	ldr	r0, [pc, #140]	; (59bc <main+0x114>)
    5930:	4b26      	ldr	r3, [pc, #152]	; (59cc <main+0x124>)
    5932:	4798      	blx	r3
 		ext_irq_disable(PCC_VSYNC);	 
    5934:	200c      	movs	r0, #12
    5936:	4b26      	ldr	r3, [pc, #152]	; (59d0 <main+0x128>)
    5938:	4798      	blx	r3
		
	  ////  memset(CAMERA_OV7670_frame_buf.hword,0x30,sizeof(CAMERA_OV7670_frame_buf.hword));
		for(Index = 0; Index < 153600; Index++)		
    593a:	4b26      	ldr	r3, [pc, #152]	; (59d4 <main+0x12c>)
    593c:	2200      	movs	r2, #0
    593e:	601a      	str	r2, [r3, #0]
    5940:	e019      	b.n	5976 <main+0xce>
		{
			while(_usart_async_is_byte_sent(&EDBG_COM.device) == 0);
    5942:	bf00      	nop
    5944:	4824      	ldr	r0, [pc, #144]	; (59d8 <main+0x130>)
    5946:	4b25      	ldr	r3, [pc, #148]	; (59dc <main+0x134>)
    5948:	4798      	blx	r3
    594a:	4603      	mov	r3, r0
    594c:	f083 0301 	eor.w	r3, r3, #1
    5950:	b2db      	uxtb	r3, r3
    5952:	2b00      	cmp	r3, #0
    5954:	d1f6      	bne.n	5944 <main+0x9c>
			_usart_async_write_byte(&EDBG_COM.device, CAMERA_OV7670_frame_buf.byte[Index]);			
    5956:	4b1f      	ldr	r3, [pc, #124]	; (59d4 <main+0x12c>)
    5958:	681b      	ldr	r3, [r3, #0]
    595a:	4a11      	ldr	r2, [pc, #68]	; (59a0 <main+0xf8>)
    595c:	5cd3      	ldrb	r3, [r2, r3]
    595e:	4619      	mov	r1, r3
    5960:	481d      	ldr	r0, [pc, #116]	; (59d8 <main+0x130>)
    5962:	4b1f      	ldr	r3, [pc, #124]	; (59e0 <main+0x138>)
    5964:	4798      	blx	r3
			delay_us(10);
    5966:	200a      	movs	r0, #10
    5968:	4b1e      	ldr	r3, [pc, #120]	; (59e4 <main+0x13c>)
    596a:	4798      	blx	r3
		for(Index = 0; Index < 153600; Index++)		
    596c:	4b19      	ldr	r3, [pc, #100]	; (59d4 <main+0x12c>)
    596e:	681b      	ldr	r3, [r3, #0]
    5970:	3301      	adds	r3, #1
    5972:	4a18      	ldr	r2, [pc, #96]	; (59d4 <main+0x12c>)
    5974:	6013      	str	r3, [r2, #0]
    5976:	4b17      	ldr	r3, [pc, #92]	; (59d4 <main+0x12c>)
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
    597e:	d3e0      	bcc.n	5942 <main+0x9a>
		}
		
		while (1);
    5980:	e7fe      	b.n	5980 <main+0xd8>
    5982:	bf00      	nop
    5984:	000002d1 	.word	0x000002d1
    5988:	00005559 	.word	0x00005559
    598c:	200262b0 	.word	0x200262b0
    5990:	000015e9 	.word	0x000015e9
    5994:	20026294 	.word	0x20026294
    5998:	00001499 	.word	0x00001499
    599c:	00001445 	.word	0x00001445
    59a0:	20000a90 	.word	0x20000a90
    59a4:	00005a55 	.word	0x00005a55
    59a8:	000056b1 	.word	0x000056b1
    59ac:	000056a1 	.word	0x000056a1
    59b0:	00000fa9 	.word	0x00000fa9
    59b4:	00001101 	.word	0x00001101
    59b8:	00005591 	.word	0x00005591
    59bc:	20026300 	.word	0x20026300
    59c0:	000055cd 	.word	0x000055cd
    59c4:	00005645 	.word	0x00005645
    59c8:	20026290 	.word	0x20026290
    59cc:	00005609 	.word	0x00005609
    59d0:	00001121 	.word	0x00001121
    59d4:	20026348 	.word	0x20026348
    59d8:	200262b8 	.word	0x200262b8
    59dc:	00003f35 	.word	0x00003f35
    59e0:	00003f0d 	.word	0x00003f0d
    59e4:	00000ee1 	.word	0x00000ee1

000059e8 <ffs>:
    59e8:	b140      	cbz	r0, 59fc <ffs+0x14>
    59ea:	2300      	movs	r3, #0
    59ec:	fa40 f103 	asr.w	r1, r0, r3
    59f0:	1c5a      	adds	r2, r3, #1
    59f2:	07c9      	lsls	r1, r1, #31
    59f4:	4613      	mov	r3, r2
    59f6:	d5f9      	bpl.n	59ec <ffs+0x4>
    59f8:	4610      	mov	r0, r2
    59fa:	4770      	bx	lr
    59fc:	4602      	mov	r2, r0
    59fe:	4610      	mov	r0, r2
    5a00:	4770      	bx	lr
    5a02:	bf00      	nop

00005a04 <__libc_init_array>:
    5a04:	b570      	push	{r4, r5, r6, lr}
    5a06:	4e0f      	ldr	r6, [pc, #60]	; (5a44 <__libc_init_array+0x40>)
    5a08:	4d0f      	ldr	r5, [pc, #60]	; (5a48 <__libc_init_array+0x44>)
    5a0a:	1b76      	subs	r6, r6, r5
    5a0c:	10b6      	asrs	r6, r6, #2
    5a0e:	bf18      	it	ne
    5a10:	2400      	movne	r4, #0
    5a12:	d005      	beq.n	5a20 <__libc_init_array+0x1c>
    5a14:	3401      	adds	r4, #1
    5a16:	f855 3b04 	ldr.w	r3, [r5], #4
    5a1a:	4798      	blx	r3
    5a1c:	42a6      	cmp	r6, r4
    5a1e:	d1f9      	bne.n	5a14 <__libc_init_array+0x10>
    5a20:	4e0a      	ldr	r6, [pc, #40]	; (5a4c <__libc_init_array+0x48>)
    5a22:	4d0b      	ldr	r5, [pc, #44]	; (5a50 <__libc_init_array+0x4c>)
    5a24:	1b76      	subs	r6, r6, r5
    5a26:	f000 faa9 	bl	5f7c <_init>
    5a2a:	10b6      	asrs	r6, r6, #2
    5a2c:	bf18      	it	ne
    5a2e:	2400      	movne	r4, #0
    5a30:	d006      	beq.n	5a40 <__libc_init_array+0x3c>
    5a32:	3401      	adds	r4, #1
    5a34:	f855 3b04 	ldr.w	r3, [r5], #4
    5a38:	4798      	blx	r3
    5a3a:	42a6      	cmp	r6, r4
    5a3c:	d1f9      	bne.n	5a32 <__libc_init_array+0x2e>
    5a3e:	bd70      	pop	{r4, r5, r6, pc}
    5a40:	bd70      	pop	{r4, r5, r6, pc}
    5a42:	bf00      	nop
    5a44:	00005f88 	.word	0x00005f88
    5a48:	00005f88 	.word	0x00005f88
    5a4c:	00005f90 	.word	0x00005f90
    5a50:	00005f88 	.word	0x00005f88

00005a54 <memset>:
    5a54:	b470      	push	{r4, r5, r6}
    5a56:	0786      	lsls	r6, r0, #30
    5a58:	d046      	beq.n	5ae8 <memset+0x94>
    5a5a:	1e54      	subs	r4, r2, #1
    5a5c:	2a00      	cmp	r2, #0
    5a5e:	d041      	beq.n	5ae4 <memset+0x90>
    5a60:	b2ca      	uxtb	r2, r1
    5a62:	4603      	mov	r3, r0
    5a64:	e002      	b.n	5a6c <memset+0x18>
    5a66:	f114 34ff 	adds.w	r4, r4, #4294967295
    5a6a:	d33b      	bcc.n	5ae4 <memset+0x90>
    5a6c:	f803 2b01 	strb.w	r2, [r3], #1
    5a70:	079d      	lsls	r5, r3, #30
    5a72:	d1f8      	bne.n	5a66 <memset+0x12>
    5a74:	2c03      	cmp	r4, #3
    5a76:	d92e      	bls.n	5ad6 <memset+0x82>
    5a78:	b2cd      	uxtb	r5, r1
    5a7a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    5a7e:	2c0f      	cmp	r4, #15
    5a80:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    5a84:	d919      	bls.n	5aba <memset+0x66>
    5a86:	f103 0210 	add.w	r2, r3, #16
    5a8a:	4626      	mov	r6, r4
    5a8c:	3e10      	subs	r6, #16
    5a8e:	2e0f      	cmp	r6, #15
    5a90:	f842 5c10 	str.w	r5, [r2, #-16]
    5a94:	f842 5c0c 	str.w	r5, [r2, #-12]
    5a98:	f842 5c08 	str.w	r5, [r2, #-8]
    5a9c:	f842 5c04 	str.w	r5, [r2, #-4]
    5aa0:	f102 0210 	add.w	r2, r2, #16
    5aa4:	d8f2      	bhi.n	5a8c <memset+0x38>
    5aa6:	f1a4 0210 	sub.w	r2, r4, #16
    5aaa:	f022 020f 	bic.w	r2, r2, #15
    5aae:	f004 040f 	and.w	r4, r4, #15
    5ab2:	3210      	adds	r2, #16
    5ab4:	2c03      	cmp	r4, #3
    5ab6:	4413      	add	r3, r2
    5ab8:	d90d      	bls.n	5ad6 <memset+0x82>
    5aba:	461e      	mov	r6, r3
    5abc:	4622      	mov	r2, r4
    5abe:	3a04      	subs	r2, #4
    5ac0:	2a03      	cmp	r2, #3
    5ac2:	f846 5b04 	str.w	r5, [r6], #4
    5ac6:	d8fa      	bhi.n	5abe <memset+0x6a>
    5ac8:	1f22      	subs	r2, r4, #4
    5aca:	f022 0203 	bic.w	r2, r2, #3
    5ace:	3204      	adds	r2, #4
    5ad0:	4413      	add	r3, r2
    5ad2:	f004 0403 	and.w	r4, r4, #3
    5ad6:	b12c      	cbz	r4, 5ae4 <memset+0x90>
    5ad8:	b2c9      	uxtb	r1, r1
    5ada:	441c      	add	r4, r3
    5adc:	f803 1b01 	strb.w	r1, [r3], #1
    5ae0:	429c      	cmp	r4, r3
    5ae2:	d1fb      	bne.n	5adc <memset+0x88>
    5ae4:	bc70      	pop	{r4, r5, r6}
    5ae6:	4770      	bx	lr
    5ae8:	4614      	mov	r4, r2
    5aea:	4603      	mov	r3, r0
    5aec:	e7c2      	b.n	5a74 <memset+0x20>
    5aee:	bf00      	nop

00005af0 <register_fini>:
    5af0:	4b02      	ldr	r3, [pc, #8]	; (5afc <register_fini+0xc>)
    5af2:	b113      	cbz	r3, 5afa <register_fini+0xa>
    5af4:	4802      	ldr	r0, [pc, #8]	; (5b00 <register_fini+0x10>)
    5af6:	f000 b805 	b.w	5b04 <atexit>
    5afa:	4770      	bx	lr
    5afc:	00000000 	.word	0x00000000
    5b00:	00005b11 	.word	0x00005b11

00005b04 <atexit>:
    5b04:	2300      	movs	r3, #0
    5b06:	4601      	mov	r1, r0
    5b08:	461a      	mov	r2, r3
    5b0a:	4618      	mov	r0, r3
    5b0c:	f000 b81e 	b.w	5b4c <__register_exitproc>

00005b10 <__libc_fini_array>:
    5b10:	b538      	push	{r3, r4, r5, lr}
    5b12:	4c0a      	ldr	r4, [pc, #40]	; (5b3c <__libc_fini_array+0x2c>)
    5b14:	4d0a      	ldr	r5, [pc, #40]	; (5b40 <__libc_fini_array+0x30>)
    5b16:	1b64      	subs	r4, r4, r5
    5b18:	10a4      	asrs	r4, r4, #2
    5b1a:	d00a      	beq.n	5b32 <__libc_fini_array+0x22>
    5b1c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    5b20:	3b01      	subs	r3, #1
    5b22:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5b26:	3c01      	subs	r4, #1
    5b28:	f855 3904 	ldr.w	r3, [r5], #-4
    5b2c:	4798      	blx	r3
    5b2e:	2c00      	cmp	r4, #0
    5b30:	d1f9      	bne.n	5b26 <__libc_fini_array+0x16>
    5b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b36:	f000 ba2b 	b.w	5f90 <_fini>
    5b3a:	bf00      	nop
    5b3c:	00005fa0 	.word	0x00005fa0
    5b40:	00005f9c 	.word	0x00005f9c

00005b44 <__retarget_lock_acquire_recursive>:
    5b44:	4770      	bx	lr
    5b46:	bf00      	nop

00005b48 <__retarget_lock_release_recursive>:
    5b48:	4770      	bx	lr
    5b4a:	bf00      	nop

00005b4c <__register_exitproc>:
    5b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5b50:	4d2c      	ldr	r5, [pc, #176]	; (5c04 <__register_exitproc+0xb8>)
    5b52:	4606      	mov	r6, r0
    5b54:	6828      	ldr	r0, [r5, #0]
    5b56:	4698      	mov	r8, r3
    5b58:	460f      	mov	r7, r1
    5b5a:	4691      	mov	r9, r2
    5b5c:	f7ff fff2 	bl	5b44 <__retarget_lock_acquire_recursive>
    5b60:	4b29      	ldr	r3, [pc, #164]	; (5c08 <__register_exitproc+0xbc>)
    5b62:	681c      	ldr	r4, [r3, #0]
    5b64:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d03e      	beq.n	5bea <__register_exitproc+0x9e>
    5b6c:	685a      	ldr	r2, [r3, #4]
    5b6e:	2a1f      	cmp	r2, #31
    5b70:	dc1c      	bgt.n	5bac <__register_exitproc+0x60>
    5b72:	f102 0e01 	add.w	lr, r2, #1
    5b76:	b176      	cbz	r6, 5b96 <__register_exitproc+0x4a>
    5b78:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    5b7c:	2401      	movs	r4, #1
    5b7e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    5b82:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    5b86:	4094      	lsls	r4, r2
    5b88:	4320      	orrs	r0, r4
    5b8a:	2e02      	cmp	r6, #2
    5b8c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    5b90:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    5b94:	d023      	beq.n	5bde <__register_exitproc+0x92>
    5b96:	3202      	adds	r2, #2
    5b98:	f8c3 e004 	str.w	lr, [r3, #4]
    5b9c:	6828      	ldr	r0, [r5, #0]
    5b9e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    5ba2:	f7ff ffd1 	bl	5b48 <__retarget_lock_release_recursive>
    5ba6:	2000      	movs	r0, #0
    5ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5bac:	4b17      	ldr	r3, [pc, #92]	; (5c0c <__register_exitproc+0xc0>)
    5bae:	b30b      	cbz	r3, 5bf4 <__register_exitproc+0xa8>
    5bb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    5bb4:	f3af 8000 	nop.w
    5bb8:	4603      	mov	r3, r0
    5bba:	b1d8      	cbz	r0, 5bf4 <__register_exitproc+0xa8>
    5bbc:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    5bc0:	6002      	str	r2, [r0, #0]
    5bc2:	2100      	movs	r1, #0
    5bc4:	6041      	str	r1, [r0, #4]
    5bc6:	460a      	mov	r2, r1
    5bc8:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    5bcc:	f04f 0e01 	mov.w	lr, #1
    5bd0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    5bd4:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    5bd8:	2e00      	cmp	r6, #0
    5bda:	d0dc      	beq.n	5b96 <__register_exitproc+0x4a>
    5bdc:	e7cc      	b.n	5b78 <__register_exitproc+0x2c>
    5bde:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    5be2:	430c      	orrs	r4, r1
    5be4:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    5be8:	e7d5      	b.n	5b96 <__register_exitproc+0x4a>
    5bea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    5bee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    5bf2:	e7bb      	b.n	5b6c <__register_exitproc+0x20>
    5bf4:	6828      	ldr	r0, [r5, #0]
    5bf6:	f7ff ffa7 	bl	5b48 <__retarget_lock_release_recursive>
    5bfa:	f04f 30ff 	mov.w	r0, #4294967295
    5bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5c02:	bf00      	nop
    5c04:	200004a0 	.word	0x200004a0
    5c08:	00005f78 	.word	0x00005f78
    5c0c:	00000000 	.word	0x00000000
    5c10:	682f2e2e 	.word	0x682f2e2e
    5c14:	702f6c70 	.word	0x702f6c70
    5c18:	2f74726f 	.word	0x2f74726f
    5c1c:	5f6c7068 	.word	0x5f6c7068
    5c20:	6f697067 	.word	0x6f697067
    5c24:	7361625f 	.word	0x7361625f
    5c28:	00682e65 	.word	0x00682e65
    5c2c:	682f2e2e 	.word	0x682f2e2e
    5c30:	732f6c61 	.word	0x732f6c61
    5c34:	682f6372 	.word	0x682f6372
    5c38:	635f6c61 	.word	0x635f6c61
    5c3c:	72656d61 	.word	0x72656d61
    5c40:	73615f61 	.word	0x73615f61
    5c44:	2e636e79 	.word	0x2e636e79
    5c48:	00000063 	.word	0x00000063
    5c4c:	682f2e2e 	.word	0x682f2e2e
    5c50:	732f6c61 	.word	0x732f6c61
    5c54:	682f6372 	.word	0x682f6372
    5c58:	695f6c61 	.word	0x695f6c61
    5c5c:	6d5f6332 	.word	0x6d5f6332
    5c60:	6e79735f 	.word	0x6e79735f
    5c64:	00632e63 	.word	0x00632e63
    5c68:	682f2e2e 	.word	0x682f2e2e
    5c6c:	732f6c61 	.word	0x732f6c61
    5c70:	682f6372 	.word	0x682f6372
    5c74:	695f6c61 	.word	0x695f6c61
    5c78:	00632e6f 	.word	0x00632e6f
    5c7c:	682f2e2e 	.word	0x682f2e2e
    5c80:	732f6c61 	.word	0x732f6c61
    5c84:	682f6372 	.word	0x682f6372
    5c88:	705f6c61 	.word	0x705f6c61
    5c8c:	632e6d77 	.word	0x632e6d77
    5c90:	00000000 	.word	0x00000000
    5c94:	682f2e2e 	.word	0x682f2e2e
    5c98:	732f6c61 	.word	0x732f6c61
    5c9c:	682f6372 	.word	0x682f6372
    5ca0:	755f6c61 	.word	0x755f6c61
    5ca4:	74726173 	.word	0x74726173
    5ca8:	7973615f 	.word	0x7973615f
    5cac:	632e636e 	.word	0x632e636e
    5cb0:	00000000 	.word	0x00000000
    5cb4:	682f2e2e 	.word	0x682f2e2e
    5cb8:	752f6c61 	.word	0x752f6c61
    5cbc:	736c6974 	.word	0x736c6974
    5cc0:	6372732f 	.word	0x6372732f
    5cc4:	6974752f 	.word	0x6974752f
    5cc8:	725f736c 	.word	0x725f736c
    5ccc:	62676e69 	.word	0x62676e69
    5cd0:	65666675 	.word	0x65666675
    5cd4:	00632e72 	.word	0x00632e72

00005cd8 <_cfgs>:
    5cd8:	00205000 0a1ec500 00000000 00000000     .P .............
	...

00005dd8 <_map>:
    5dd8:	0000000c 0000000c 0000000d 0000000d     ................
    5de8:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    5df8:	632e6369 00000000                       ic.c....

00005e00 <user_mux_confs>:
    5e00:	00000200 00000200 00000000 00000000     ................
	...

00005e44 <channel_confs>:
    5e44:	051e0000 00000000 00000000 00000000     ................
	...

00005e84 <interrupt_cfg>:
	...
    5f04:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    5f14:	65735f6c 6d6f6372 0000632e 40003000     l_sercom.c...0.@
    5f24:	40003400 41012000 41014000 43000000     .4.@. .A.@.A...C
    5f34:	43000400 43000800 43000c00              ...C...C...C

00005f40 <sercomspi_regs>:
	...
    5f54:	682f2e2e 692f6c61 756c636e 682f6564     ../hal/include/h
    5f64:	635f6c61 72656d61 73615f61 2e636e79     al_camera_async.
    5f74:	00000068                                h...

00005f78 <_global_impure_ptr>:
    5f78:	20000078                                x.. 

00005f7c <_init>:
    5f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f7e:	bf00      	nop
    5f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f82:	bc08      	pop	{r3}
    5f84:	469e      	mov	lr, r3
    5f86:	4770      	bx	lr

00005f88 <__init_array_start>:
    5f88:	00005af1 	.word	0x00005af1

00005f8c <__frame_dummy_init_array_entry>:
    5f8c:	00000289                                ....

00005f90 <_fini>:
    5f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f92:	bf00      	nop
    5f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5f96:	bc08      	pop	{r3}
    5f98:	469e      	mov	lr, r3
    5f9a:	4770      	bx	lr

00005f9c <__fini_array_start>:
    5f9c:	00000265 	.word	0x00000265
