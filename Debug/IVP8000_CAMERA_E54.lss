
IVP8000_CAMERA_E54.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b80  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00002b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002007c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002007c  2**0
                  CONTENTS
  4 .bss          00025e90  20000080  00002c00  0002007c  2**4
                  ALLOC
  5 .stack        00010000  20025f10  00028a90  0002007c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY
  8 .debug_info   0002af8c  00000000  00000000  00020103  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000419d  00000000  00000000  0004b08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ee84  00000000  00000000  0004f22c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d60  00000000  00000000  0005e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000dd0  00000000  00000000  0005ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003789e  00000000  00000000  0005fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000195ef  00000000  00000000  0009747e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00123f9f  00000000  00000000  000b0a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002140  00000000  00000000  001d4a0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	10 5f 03 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ._. ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      9c:	dd 02 00 00 b9 14 00 00 c5 14 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      bc:	89 12 00 00 95 12 00 00 a1 12 00 00 ad 12 00 00     ................
      cc:	b9 12 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	59 17 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     Y...............
     104:	dd 02 00 00 71 21 00 00 85 21 00 00 99 21 00 00     ....q!...!...!..
     114:	ad 21 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     .!..............
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     164:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     174:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     184:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     194:	c1 24 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     .$..............
     1a4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1e4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1f4:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     204:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     214:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     224:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     234:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     244:	2d 17 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     -...............
     254:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000080 	.word	0x20000080
     280:	00000000 	.word	0x00000000
     284:	00002b80 	.word	0x00002b80

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002b80 	.word	0x00002b80
     2c4:	20000084 	.word	0x20000084
     2c8:	00002b80 	.word	0x00002b80
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000769 	.word	0x00000769

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
     2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
     2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
     2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
     2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     2f0:	6811      	ldr	r1, [r2, #0]
     2f2:	6019      	str	r1, [r3, #0]
     2f4:	3304      	adds	r3, #4
     2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
     2fa:	428b      	cmp	r3, r1
     2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
     300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
     302:	2200      	movs	r2, #0
     304:	601a      	str	r2, [r3, #0]
     306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
     30a:	4293      	cmp	r3, r2
     30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
     310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
     312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
     32e:	4798      	blx	r3
        main();
     330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
     332:	4798      	blx	r3
     334:	e7fe      	b.n	334 <Reset_Handler+0x54>
     336:	bf00      	nop
     338:	20000000 	.word	0x20000000
     33c:	00002b80 	.word	0x00002b80
     340:	2000007c 	.word	0x2000007c
     344:	20000080 	.word	0x20000080
     348:	20025f10 	.word	0x20025f10
     34c:	e000ed00 	.word	0xe000ed00
     350:	00000000 	.word	0x00000000
     354:	0000277d 	.word	0x0000277d
     358:	0000267d 	.word	0x0000267d

0000035c <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc PCC_SCCB;

struct pwm_descriptor PWM_0;

void EXTERNAL_IRQ_0_init(void)
{
     35c:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     35e:	2240      	movs	r2, #64	; 0x40
     360:	4b21      	ldr	r3, [pc, #132]	; (3e8 <EXTERNAL_IRQ_0_init+0x8c>)
     362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     366:	4a21      	ldr	r2, [pc, #132]	; (3ec <EXTERNAL_IRQ_0_init+0x90>)
     368:	6953      	ldr	r3, [r2, #20]
     36a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     36e:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     370:	4b1f      	ldr	r3, [pc, #124]	; (3f0 <EXTERNAL_IRQ_0_init+0x94>)
     372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     376:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     378:	491e      	ldr	r1, [pc, #120]	; (3f4 <EXTERNAL_IRQ_0_init+0x98>)
     37a:	6299      	str	r1, [r3, #40]	; 0x28
     37c:	481e      	ldr	r0, [pc, #120]	; (3f8 <EXTERNAL_IRQ_0_init+0x9c>)
     37e:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     380:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     382:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
     386:	f041 0104 	orr.w	r1, r1, #4
     38a:	f883 104c 	strb.w	r1, [r3, #76]	; 0x4c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     38e:	619a      	str	r2, [r3, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     390:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
	tmp &= ~PORT_PINCFG_PMUXEN;
     394:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     398:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     39c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3a0:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3a8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     3b0:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3b2:	4a12      	ldr	r2, [pc, #72]	; (3fc <EXTERNAL_IRQ_0_init+0xa0>)
     3b4:	629a      	str	r2, [r3, #40]	; 0x28
     3b6:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3b8:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
     3bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3c4:	f893 204d 	ldrb.w	r2, [r3, #77]	; 0x4d
	tmp &= ~PORT_PINCFG_PMUXEN;
     3c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3cc:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3d4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3d8:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PCC_HSYNC, PINMUX_PA13A_EIC_EXTINT13);

	ext_irq_init();
     3e0:	4b07      	ldr	r3, [pc, #28]	; (400 <EXTERNAL_IRQ_0_init+0xa4>)
     3e2:	4798      	blx	r3
     3e4:	bd08      	pop	{r3, pc}
     3e6:	bf00      	nop
     3e8:	40001c00 	.word	0x40001c00
     3ec:	40000800 	.word	0x40000800
     3f0:	41008000 	.word	0x41008000
     3f4:	40021000 	.word	0x40021000
     3f8:	c0020000 	.word	0xc0020000
     3fc:	40022000 	.word	0x40022000
     400:	00000935 	.word	0x00000935

00000404 <EVENT_SYSTEM_0_init>:
}

void EVENT_SYSTEM_0_init(void)
{
     404:	b508      	push	{r3, lr}
     406:	2240      	movs	r2, #64	; 0x40
     408:	4b05      	ldr	r3, [pc, #20]	; (420 <EVENT_SYSTEM_0_init+0x1c>)
     40a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}

static inline void hri_mclk_set_APBBMASK_EVSYS_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_EVSYS;
     40e:	4a05      	ldr	r2, [pc, #20]	; (424 <EVENT_SYSTEM_0_init+0x20>)
     410:	6993      	ldr	r3, [r2, #24]
     412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     416:	6193      	str	r3, [r2, #24]
	hri_gclk_write_PCHCTRL_reg(GCLK, EVSYS_GCLK_ID_1, CONF_GCLK_EVSYS_CHANNEL_1_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));

	hri_mclk_set_APBBMASK_EVSYS_bit(MCLK);

	event_system_init();
     418:	4b03      	ldr	r3, [pc, #12]	; (428 <EVENT_SYSTEM_0_init+0x24>)
     41a:	4798      	blx	r3
     41c:	bd08      	pop	{r3, pc}
     41e:	bf00      	nop
     420:	40001c00 	.word	0x40001c00
     424:	40000800 	.word	0x40000800
     428:	000008e5 	.word	0x000008e5

0000042c <CAMERA_OV7670_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     42c:	4b48      	ldr	r3, [pc, #288]	; (550 <CAMERA_OV7670_PORT_init+0x124>)
     42e:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
	tmp &= ~PORT_PINCFG_PMUXEN;
     432:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     436:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     43a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     43e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     442:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     446:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     44a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     44e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     452:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     456:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     45a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     45e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     462:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     466:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     46a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     46e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     472:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     476:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     47a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     47e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     482:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     486:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     48a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     48e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
	tmp &= ~PORT_PINCFG_PMUXEN;
     492:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     496:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     49a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     49e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4a2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4a6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ae:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
	tmp &= ~PORT_PINCFG_PMUXEN;
     4b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4b6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4be:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4c2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4c6:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ce:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
	tmp &= ~PORT_PINCFG_PMUXEN;
     4d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4d6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4de:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4e2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4e6:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4ee:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
	tmp &= ~PORT_PINCFG_PMUXEN;
     4f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4f6:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4fa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4fe:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     502:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     506:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     50a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     50e:	f893 2056 	ldrb.w	r2, [r3, #86]	; 0x56
	tmp &= ~PORT_PINCFG_PMUXEN;
     512:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     516:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     51a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     51e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     522:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     526:	f042 020a 	orr.w	r2, r2, #10
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     52a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     52e:	f893 2057 	ldrb.w	r2, [r3, #87]	; 0x57
	tmp &= ~PORT_PINCFG_PMUXEN;
     532:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     536:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     53a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     53e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     542:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     546:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     54a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
     54e:	4770      	bx	lr
     550:	41008000 	.word	0x41008000

00000554 <CAMERA_OV7670_CLOCK_init>:
}

static inline void hri_mclk_set_APBDMASK_PCC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_PCC;
     554:	4a02      	ldr	r2, [pc, #8]	; (560 <CAMERA_OV7670_CLOCK_init+0xc>)
     556:	6a13      	ldr	r3, [r2, #32]
     558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     55c:	6213      	str	r3, [r2, #32]
     55e:	4770      	bx	lr
     560:	40000800 	.word	0x40000800

00000564 <CAMERA_OV7670_init>:
{
	hri_mclk_set_APBDMASK_PCC_bit(MCLK);
}

void CAMERA_OV7670_init(void)
{
     564:	b508      	push	{r3, lr}
	CAMERA_OV7670_CLOCK_init();
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <CAMERA_OV7670_init+0x14>)
     568:	4798      	blx	r3
	camera_async_init(&CAMERA_OV7670, PCC);
     56a:	4904      	ldr	r1, [pc, #16]	; (57c <CAMERA_OV7670_init+0x18>)
     56c:	4804      	ldr	r0, [pc, #16]	; (580 <CAMERA_OV7670_init+0x1c>)
     56e:	4b05      	ldr	r3, [pc, #20]	; (584 <CAMERA_OV7670_init+0x20>)
     570:	4798      	blx	r3
	CAMERA_OV7670_PORT_init();
     572:	4b05      	ldr	r3, [pc, #20]	; (588 <CAMERA_OV7670_init+0x24>)
     574:	4798      	blx	r3
     576:	bd08      	pop	{r3, pc}
     578:	00000555 	.word	0x00000555
     57c:	43002c00 	.word	0x43002c00
     580:	20025ec0 	.word	0x20025ec0
     584:	00000875 	.word	0x00000875
     588:	0000042d 	.word	0x0000042d

0000058c <EDBG_COM_CLOCK_init>:
     58c:	4b06      	ldr	r3, [pc, #24]	; (5a8 <EDBG_COM_CLOCK_init+0x1c>)
     58e:	2240      	movs	r2, #64	; 0x40
     590:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     594:	2242      	movs	r2, #66	; 0x42
     596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;
     59a:	4a04      	ldr	r2, [pc, #16]	; (5ac <EDBG_COM_CLOCK_init+0x20>)
     59c:	6953      	ldr	r3, [r2, #20]
     59e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
     5a2:	6153      	str	r3, [r2, #20]
     5a4:	4770      	bx	lr
     5a6:	bf00      	nop
     5a8:	40001c00 	.word	0x40001c00
     5ac:	40000800 	.word	0x40000800

000005b0 <EDBG_COM_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5b0:	4b10      	ldr	r3, [pc, #64]	; (5f4 <EDBG_COM_PORT_init+0x44>)
     5b2:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
	tmp &= ~PORT_PINCFG_PMUXEN;
     5b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5ba:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5be:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5c2:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5c6:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5ca:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ce:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5d2:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
	tmp &= ~PORT_PINCFG_PMUXEN;
     5d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5da:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5de:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5e2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5e6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5ea:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5ee:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
     5f2:	4770      	bx	lr
     5f4:	41008000 	.word	0x41008000

000005f8 <EDBG_COM_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void EDBG_COM_init(void)
{
     5f8:	b510      	push	{r4, lr}
     5fa:	b082      	sub	sp, #8
	EDBG_COM_CLOCK_init();
     5fc:	4b06      	ldr	r3, [pc, #24]	; (618 <EDBG_COM_init+0x20>)
     5fe:	4798      	blx	r3
	usart_async_init(&EDBG_COM, SERCOM1, EDBG_COM_buffer, EDBG_COM_BUFFER_SIZE, (void *)NULL);
     600:	2300      	movs	r3, #0
     602:	9300      	str	r3, [sp, #0]
     604:	2310      	movs	r3, #16
     606:	4a05      	ldr	r2, [pc, #20]	; (61c <EDBG_COM_init+0x24>)
     608:	4905      	ldr	r1, [pc, #20]	; (620 <EDBG_COM_init+0x28>)
     60a:	4806      	ldr	r0, [pc, #24]	; (624 <EDBG_COM_init+0x2c>)
     60c:	4c06      	ldr	r4, [pc, #24]	; (628 <EDBG_COM_init+0x30>)
     60e:	47a0      	blx	r4
	EDBG_COM_PORT_init();
     610:	4b06      	ldr	r3, [pc, #24]	; (62c <EDBG_COM_init+0x34>)
     612:	4798      	blx	r3
}
     614:	b002      	add	sp, #8
     616:	bd10      	pop	{r4, pc}
     618:	0000058d 	.word	0x0000058d
     61c:	2000009c 	.word	0x2000009c
     620:	40003400 	.word	0x40003400
     624:	20025e70 	.word	0x20025e70
     628:	00000d7d 	.word	0x00000d7d
     62c:	000005b1 	.word	0x000005b1

00000630 <PCC_SCCB_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     630:	4b16      	ldr	r3, [pc, #88]	; (68c <PCC_SCCB_PORT_init+0x5c>)
     632:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
     636:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     63a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     63e:	f893 21c8 	ldrb.w	r2, [r3, #456]	; 0x1c8
	tmp &= ~PORT_PINCFG_PMUXEN;
     642:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     646:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     64a:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     64e:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     652:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     656:	f042 0202 	orr.w	r2, r2, #2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     65a:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     65e:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
     662:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     666:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     66a:	f893 21c9 	ldrb.w	r2, [r3, #457]	; 0x1c9
	tmp &= ~PORT_PINCFG_PMUXEN;
     66e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     672:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     676:	f883 21c9 	strb.w	r2, [r3, #457]	; 0x1c9
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     67a:	f893 21b4 	ldrb.w	r2, [r3, #436]	; 0x1b4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     67e:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     682:	f042 0220 	orr.w	r2, r2, #32
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     686:	f883 21b4 	strb.w	r2, [r3, #436]	; 0x1b4
     68a:	4770      	bx	lr
     68c:	41008000 	.word	0x41008000

00000690 <PCC_SCCB_CLOCK_init>:
     690:	4b06      	ldr	r3, [pc, #24]	; (6ac <PCC_SCCB_CLOCK_init+0x1c>)
     692:	2243      	movs	r2, #67	; 0x43
     694:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
     698:	2242      	movs	r2, #66	; 0x42
     69a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBDMASK.reg |= MCLK_APBDMASK_SERCOM7;
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <PCC_SCCB_CLOCK_init+0x20>)
     6a0:	6a13      	ldr	r3, [r2, #32]
     6a2:	f043 0308 	orr.w	r3, r3, #8
     6a6:	6213      	str	r3, [r2, #32]
     6a8:	4770      	bx	lr
     6aa:	bf00      	nop
     6ac:	40001c00 	.word	0x40001c00
     6b0:	40000800 	.word	0x40000800

000006b4 <PCC_SCCB_init>:

	hri_mclk_set_APBDMASK_SERCOM7_bit(MCLK);
}

void PCC_SCCB_init(void)
{
     6b4:	b508      	push	{r3, lr}
	PCC_SCCB_CLOCK_init();
     6b6:	4b04      	ldr	r3, [pc, #16]	; (6c8 <PCC_SCCB_init+0x14>)
     6b8:	4798      	blx	r3
	i2c_m_sync_init(&PCC_SCCB, SERCOM7);
     6ba:	4904      	ldr	r1, [pc, #16]	; (6cc <PCC_SCCB_init+0x18>)
     6bc:	4804      	ldr	r0, [pc, #16]	; (6d0 <PCC_SCCB_init+0x1c>)
     6be:	4b05      	ldr	r3, [pc, #20]	; (6d4 <PCC_SCCB_init+0x20>)
     6c0:	4798      	blx	r3
	PCC_SCCB_PORT_init();
     6c2:	4b05      	ldr	r3, [pc, #20]	; (6d8 <PCC_SCCB_init+0x24>)
     6c4:	4798      	blx	r3
     6c6:	bd08      	pop	{r3, pc}
     6c8:	00000691 	.word	0x00000691
     6cc:	43000c00 	.word	0x43000c00
     6d0:	20025ed4 	.word	0x20025ed4
     6d4:	00000a99 	.word	0x00000a99
     6d8:	00000631 	.word	0x00000631

000006dc <delay_driver_init>:
}

void delay_driver_init(void)
{
     6dc:	b508      	push	{r3, lr}
	delay_init(SysTick);
     6de:	4802      	ldr	r0, [pc, #8]	; (6e8 <delay_driver_init+0xc>)
     6e0:	4b02      	ldr	r3, [pc, #8]	; (6ec <delay_driver_init+0x10>)
     6e2:	4798      	blx	r3
     6e4:	bd08      	pop	{r3, pc}
     6e6:	bf00      	nop
     6e8:	e000e010 	.word	0xe000e010
     6ec:	000008b1 	.word	0x000008b1

000006f0 <PWM_0_PORT_init>:
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     6f0:	4a08      	ldr	r2, [pc, #32]	; (714 <PWM_0_PORT_init+0x24>)
     6f2:	f892 31cb 	ldrb.w	r3, [r2, #459]	; 0x1cb
	tmp &= ~PORT_PINCFG_PMUXEN;
     6f6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     6fa:	f043 0301 	orr.w	r3, r3, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     6fe:	f882 31cb 	strb.w	r3, [r2, #459]	; 0x1cb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     702:	f892 31b5 	ldrb.w	r3, [r2, #437]	; 0x1b5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     706:	f003 030f 	and.w	r3, r3, #15
	tmp |= PORT_PMUX_PMUXO(data);
     70a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     70e:	f882 31b5 	strb.w	r3, [r2, #437]	; 0x1b5
     712:	4770      	bx	lr
     714:	41008000 	.word	0x41008000

00000718 <PWM_0_CLOCK_init>:
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_TCC0;
     718:	4a04      	ldr	r2, [pc, #16]	; (72c <PWM_0_CLOCK_init+0x14>)
     71a:	6993      	ldr	r3, [r2, #24]
     71c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     720:	6193      	str	r3, [r2, #24]
     722:	2240      	movs	r2, #64	; 0x40
     724:	4b02      	ldr	r3, [pc, #8]	; (730 <PWM_0_CLOCK_init+0x18>)
     726:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
     72a:	4770      	bx	lr
     72c:	40000800 	.word	0x40000800
     730:	40001c00 	.word	0x40001c00

00000734 <PWM_0_init>:
	hri_mclk_set_APBBMASK_TCC0_bit(MCLK);
	hri_gclk_write_PCHCTRL_reg(GCLK, TCC0_GCLK_ID, CONF_GCLK_TCC0_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
}

void PWM_0_init(void)
{
     734:	b508      	push	{r3, lr}
	PWM_0_CLOCK_init();
     736:	4b06      	ldr	r3, [pc, #24]	; (750 <PWM_0_init+0x1c>)
     738:	4798      	blx	r3
	PWM_0_PORT_init();
     73a:	4b06      	ldr	r3, [pc, #24]	; (754 <PWM_0_init+0x20>)
     73c:	4798      	blx	r3
	pwm_init(&PWM_0, TCC0, _tcc_get_pwm());
     73e:	4b06      	ldr	r3, [pc, #24]	; (758 <PWM_0_init+0x24>)
     740:	4798      	blx	r3
     742:	4602      	mov	r2, r0
     744:	4905      	ldr	r1, [pc, #20]	; (75c <PWM_0_init+0x28>)
     746:	4806      	ldr	r0, [pc, #24]	; (760 <PWM_0_init+0x2c>)
     748:	4b06      	ldr	r3, [pc, #24]	; (764 <PWM_0_init+0x30>)
     74a:	4798      	blx	r3
     74c:	bd08      	pop	{r3, pc}
     74e:	bf00      	nop
     750:	00000719 	.word	0x00000719
     754:	000006f1 	.word	0x000006f1
     758:	000024bb 	.word	0x000024bb
     75c:	41016000 	.word	0x41016000
     760:	20025e54 	.word	0x20025e54
     764:	00000b79 	.word	0x00000b79

00000768 <system_init>:
}

void system_init(void)
{
     768:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     76a:	4b2e      	ldr	r3, [pc, #184]	; (824 <system_init+0xbc>)
     76c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     76e:	4b2e      	ldr	r3, [pc, #184]	; (828 <system_init+0xc0>)
     770:	f44f 6200 	mov.w	r2, #2048	; 0x800
     774:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     778:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     77c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     780:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     784:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
     788:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     78c:	f893 214b 	ldrb.w	r2, [r3, #331]	; 0x14b
	tmp &= ~PORT_PINCFG_PMUXEN;
     790:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     794:	f883 214b 	strb.w	r2, [r3, #331]	; 0x14b
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     798:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     79c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7a0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     7a8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
     7ac:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7b0:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
	tmp &= ~PORT_PINCFG_PMUXEN;
     7b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7b8:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     7bc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
     7c0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7c4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
     7cc:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     7d0:	4a16      	ldr	r2, [pc, #88]	; (82c <system_init+0xc4>)
     7d2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7d6:	f893 2156 	ldrb.w	r2, [r3, #342]	; 0x156
	tmp &= ~PORT_PINCFG_PMUXEN;
     7da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     7de:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     7e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
     7e6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     7ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     7ee:	f8c3 1128 	str.w	r1, [r3, #296]	; 0x128
     7f2:	4a0f      	ldr	r2, [pc, #60]	; (830 <system_init+0xc8>)
     7f4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     7f8:	f893 2157 	ldrb.w	r2, [r3, #343]	; 0x157
	tmp &= ~PORT_PINCFG_PMUXEN;
     7fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     800:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
	// Set pin direction to output
	gpio_set_pin_direction(PCC_RESET, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(PCC_RESET, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     804:	4b0b      	ldr	r3, [pc, #44]	; (834 <system_init+0xcc>)
     806:	4798      	blx	r3

	EVENT_SYSTEM_0_init();
     808:	4b0b      	ldr	r3, [pc, #44]	; (838 <system_init+0xd0>)
     80a:	4798      	blx	r3

	CAMERA_OV7670_init();
     80c:	4b0b      	ldr	r3, [pc, #44]	; (83c <system_init+0xd4>)
     80e:	4798      	blx	r3

	EDBG_COM_init();
     810:	4b0b      	ldr	r3, [pc, #44]	; (840 <system_init+0xd8>)
     812:	4798      	blx	r3

	PCC_SCCB_init();
     814:	4b0b      	ldr	r3, [pc, #44]	; (844 <system_init+0xdc>)
     816:	4798      	blx	r3

	delay_driver_init();
     818:	4b0b      	ldr	r3, [pc, #44]	; (848 <system_init+0xe0>)
     81a:	4798      	blx	r3

	PWM_0_init();
     81c:	4b0b      	ldr	r3, [pc, #44]	; (84c <system_init+0xe4>)
     81e:	4798      	blx	r3
     820:	bd08      	pop	{r3, pc}
     822:	bf00      	nop
     824:	00000f45 	.word	0x00000f45
     828:	41008000 	.word	0x41008000
     82c:	c0000040 	.word	0xc0000040
     830:	c0000080 	.word	0xc0000080
     834:	0000035d 	.word	0x0000035d
     838:	00000405 	.word	0x00000405
     83c:	00000565 	.word	0x00000565
     840:	000005f9 	.word	0x000005f9
     844:	000006b5 	.word	0x000006b5
     848:	000006dd 	.word	0x000006dd
     84c:	00000735 	.word	0x00000735

00000850 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     850:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     854:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     856:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     858:	f3bf 8f5f 	dmb	sy
     85c:	4770      	bx	lr

0000085e <atomic_leave_critical>:
     85e:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     862:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     864:	f383 8810 	msr	PRIMASK, r3
     868:	4770      	bx	lr

0000086a <camera_async_capture_done>:
 */

#include "hal_camera_async.h"

static void camera_async_capture_done(struct _camera_async_device *device, uint32_t ch)
{
     86a:	b508      	push	{r3, lr}
	struct camera_async_descriptor *const descr = CONTAINER_OF(device, struct camera_async_descriptor, device);

	if (descr->capture_done) {
     86c:	6903      	ldr	r3, [r0, #16]
     86e:	b103      	cbz	r3, 872 <camera_async_capture_done+0x8>
		descr->capture_done(descr, ch);
     870:	4798      	blx	r3
     872:	bd08      	pop	{r3, pc}

00000874 <camera_async_init>:

/**
 * \brief Initialize the camera sensor HAL instance and hardware.
 */
int32_t camera_async_init(struct camera_async_descriptor *const descr, void *const hw)
{
     874:	b538      	push	{r3, r4, r5, lr}
     876:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     878:	4604      	mov	r4, r0
     87a:	b178      	cbz	r0, 89c <camera_async_init+0x28>
     87c:	b161      	cbz	r1, 898 <camera_async_init+0x24>
     87e:	2001      	movs	r0, #1
     880:	2232      	movs	r2, #50	; 0x32
     882:	4907      	ldr	r1, [pc, #28]	; (8a0 <camera_async_init+0x2c>)
     884:	4b07      	ldr	r3, [pc, #28]	; (8a4 <camera_async_init+0x30>)
     886:	4798      	blx	r3

	_camera_async_init(&descr->device, hw);
     888:	4629      	mov	r1, r5
     88a:	4620      	mov	r0, r4
     88c:	4b06      	ldr	r3, [pc, #24]	; (8a8 <camera_async_init+0x34>)
     88e:	4798      	blx	r3

	descr->device.capture_done = camera_async_capture_done;
     890:	4b06      	ldr	r3, [pc, #24]	; (8ac <camera_async_init+0x38>)
     892:	6023      	str	r3, [r4, #0]

	return ERR_NONE;
}
     894:	2000      	movs	r0, #0
     896:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     898:	2000      	movs	r0, #0
     89a:	e7f1      	b.n	880 <camera_async_init+0xc>
     89c:	2000      	movs	r0, #0
     89e:	e7ef      	b.n	880 <camera_async_init+0xc>
     8a0:	000027d4 	.word	0x000027d4
     8a4:	00000e3d 	.word	0x00000e3d
     8a8:	0000168d 	.word	0x0000168d
     8ac:	0000086b 	.word	0x0000086b

000008b0 <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     8b0:	b508      	push	{r3, lr}
	_delay_init(hardware = hw);
     8b2:	4b02      	ldr	r3, [pc, #8]	; (8bc <delay_init+0xc>)
     8b4:	6018      	str	r0, [r3, #0]
     8b6:	4b02      	ldr	r3, [pc, #8]	; (8c0 <delay_init+0x10>)
     8b8:	4798      	blx	r3
     8ba:	bd08      	pop	{r3, pc}
     8bc:	200000ac 	.word	0x200000ac
     8c0:	000021d5 	.word	0x000021d5

000008c4 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     8c4:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     8c6:	4b04      	ldr	r3, [pc, #16]	; (8d8 <delay_ms+0x14>)
     8c8:	681c      	ldr	r4, [r3, #0]
     8ca:	4b04      	ldr	r3, [pc, #16]	; (8dc <delay_ms+0x18>)
     8cc:	4798      	blx	r3
     8ce:	4601      	mov	r1, r0
     8d0:	4620      	mov	r0, r4
     8d2:	4b03      	ldr	r3, [pc, #12]	; (8e0 <delay_ms+0x1c>)
     8d4:	4798      	blx	r3
     8d6:	bd10      	pop	{r4, pc}
     8d8:	200000ac 	.word	0x200000ac
     8dc:	00000f35 	.word	0x00000f35
     8e0:	000021e1 	.word	0x000021e1

000008e4 <event_system_init>:

/**
 * \brief Initialize event system.
 */
int32_t event_system_init(void)
{
     8e4:	b508      	push	{r3, lr}
	return _event_system_init();
     8e6:	4b01      	ldr	r3, [pc, #4]	; (8ec <event_system_init+0x8>)
     8e8:	4798      	blx	r3
}
     8ea:	bd08      	pop	{r3, pc}
     8ec:	000014d1 	.word	0x000014d1

000008f0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     8f0:	b538      	push	{r3, r4, r5, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     8f2:	2502      	movs	r5, #2
     8f4:	2400      	movs	r4, #0

	while (upper >= lower) {
     8f6:	e007      	b.n	908 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     8f8:	4a0d      	ldr	r2, [pc, #52]	; (930 <process_ext_irq+0x40>)
     8fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     8fe:	b1b3      	cbz	r3, 92e <process_ext_irq+0x3e>
				ext_irqs[middle].cb();
     900:	4798      	blx	r3
     902:	bd38      	pop	{r3, r4, r5, pc}
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     904:	3a01      	subs	r2, #1
     906:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     908:	42ac      	cmp	r4, r5
     90a:	d810      	bhi.n	92e <process_ext_irq+0x3e>
		middle = (upper + lower) >> 1;
     90c:	192b      	adds	r3, r5, r4
     90e:	105b      	asrs	r3, r3, #1
     910:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     912:	2a01      	cmp	r2, #1
     914:	d80b      	bhi.n	92e <process_ext_irq+0x3e>
     916:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     918:	4905      	ldr	r1, [pc, #20]	; (930 <process_ext_irq+0x40>)
     91a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     91e:	6849      	ldr	r1, [r1, #4]
     920:	4281      	cmp	r1, r0
     922:	d0e9      	beq.n	8f8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     924:	4281      	cmp	r1, r0
     926:	d2ed      	bcs.n	904 <process_ext_irq+0x14>
			lower = middle + 1;
     928:	3201      	adds	r2, #1
     92a:	b2d4      	uxtb	r4, r2
     92c:	e7ec      	b.n	908 <process_ext_irq+0x18>
     92e:	bd38      	pop	{r3, r4, r5, pc}
     930:	200000b0 	.word	0x200000b0

00000934 <ext_irq_init>:
{
     934:	b508      	push	{r3, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     936:	2300      	movs	r3, #0
     938:	e00a      	b.n	950 <ext_irq_init+0x1c>
		ext_irqs[i].pin = 0xFFFFFFFF;
     93a:	4a08      	ldr	r2, [pc, #32]	; (95c <ext_irq_init+0x28>)
     93c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
     940:	f04f 30ff 	mov.w	r0, #4294967295
     944:	6048      	str	r0, [r1, #4]
		ext_irqs[i].cb  = NULL;
     946:	2100      	movs	r1, #0
     948:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     94c:	3301      	adds	r3, #1
     94e:	b29b      	uxth	r3, r3
     950:	2b01      	cmp	r3, #1
     952:	d9f2      	bls.n	93a <ext_irq_init+0x6>
	return _ext_irq_init(process_ext_irq);
     954:	4802      	ldr	r0, [pc, #8]	; (960 <ext_irq_init+0x2c>)
     956:	4b03      	ldr	r3, [pc, #12]	; (964 <ext_irq_init+0x30>)
     958:	4798      	blx	r3
}
     95a:	bd08      	pop	{r3, pc}
     95c:	200000b0 	.word	0x200000b0
     960:	000008f1 	.word	0x000008f1
     964:	00001389 	.word	0x00001389

00000968 <ext_irq_register>:
{
     968:	b5f0      	push	{r4, r5, r6, r7, lr}
     96a:	b083      	sub	sp, #12
     96c:	4604      	mov	r4, r0
	uint8_t i = 0, j = 0;
     96e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     970:	2b01      	cmp	r3, #1
     972:	d80e      	bhi.n	992 <ext_irq_register+0x2a>
		if (ext_irqs[i].pin == pin) {
     974:	4618      	mov	r0, r3
     976:	4a2e      	ldr	r2, [pc, #184]	; (a30 <ext_irq_register+0xc8>)
     978:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     97c:	6852      	ldr	r2, [r2, #4]
     97e:	42a2      	cmp	r2, r4
     980:	d002      	beq.n	988 <ext_irq_register+0x20>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     982:	3301      	adds	r3, #1
     984:	b2db      	uxtb	r3, r3
     986:	e7f3      	b.n	970 <ext_irq_register+0x8>
			ext_irqs[i].cb = cb;
     988:	4b29      	ldr	r3, [pc, #164]	; (a30 <ext_irq_register+0xc8>)
     98a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
			found          = true;
     98e:	2501      	movs	r5, #1
			break;
     990:	e000      	b.n	994 <ext_irq_register+0x2c>
	bool    found = false;
     992:	2500      	movs	r5, #0
	if (NULL == cb) {
     994:	b159      	cbz	r1, 9ae <ext_irq_register+0x46>
	if (!found) {
     996:	2d00      	cmp	r5, #0
     998:	d13d      	bne.n	a16 <ext_irq_register+0xae>
     99a:	2300      	movs	r3, #0
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     99c:	2b01      	cmp	r3, #1
     99e:	d813      	bhi.n	9c8 <ext_irq_register+0x60>
			if (NULL == ext_irqs[i].cb) {
     9a0:	4a23      	ldr	r2, [pc, #140]	; (a30 <ext_irq_register+0xc8>)
     9a2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
     9a6:	b142      	cbz	r2, 9ba <ext_irq_register+0x52>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     9a8:	3301      	adds	r3, #1
     9aa:	b2db      	uxtb	r3, r3
     9ac:	e7f6      	b.n	99c <ext_irq_register+0x34>
		if (!found) {
     9ae:	2d00      	cmp	r5, #0
     9b0:	d038      	beq.n	a24 <ext_irq_register+0xbc>
		return _ext_irq_enable(pin, false);
     9b2:	4620      	mov	r0, r4
     9b4:	4b1f      	ldr	r3, [pc, #124]	; (a34 <ext_irq_register+0xcc>)
     9b6:	4798      	blx	r3
     9b8:	e032      	b.n	a20 <ext_irq_register+0xb8>
				ext_irqs[i].cb  = cb;
     9ba:	4a1d      	ldr	r2, [pc, #116]	; (a30 <ext_irq_register+0xc8>)
     9bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				ext_irqs[i].pin = pin;
     9c0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
     9c4:	6054      	str	r4, [r2, #4]
				found           = true;
     9c6:	2501      	movs	r5, #1
     9c8:	2200      	movs	r2, #0
     9ca:	e001      	b.n	9d0 <ext_irq_register+0x68>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     9cc:	3201      	adds	r2, #1
     9ce:	b2d2      	uxtb	r2, r2
     9d0:	2a01      	cmp	r2, #1
     9d2:	d820      	bhi.n	a16 <ext_irq_register+0xae>
     9d4:	2b01      	cmp	r3, #1
     9d6:	d81e      	bhi.n	a16 <ext_irq_register+0xae>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     9d8:	469e      	mov	lr, r3
     9da:	4915      	ldr	r1, [pc, #84]	; (a30 <ext_irq_register+0xc8>)
     9dc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
     9e0:	6840      	ldr	r0, [r0, #4]
     9e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
     9e6:	6849      	ldr	r1, [r1, #4]
     9e8:	4288      	cmp	r0, r1
     9ea:	d2ef      	bcs.n	9cc <ext_irq_register+0x64>
     9ec:	f1b1 3fff 	cmp.w	r1, #4294967295
     9f0:	d0ec      	beq.n	9cc <ext_irq_register+0x64>
				struct ext_irq tmp = ext_irqs[j];
     9f2:	4f0f      	ldr	r7, [pc, #60]	; (a30 <ext_irq_register+0xc8>)
     9f4:	eb07 06c2 	add.w	r6, r7, r2, lsl #3
     9f8:	e896 0003 	ldmia.w	r6, {r0, r1}
     9fc:	e88d 0003 	stmia.w	sp, {r0, r1}
				ext_irqs[j] = ext_irqs[i];
     a00:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
     a04:	e897 0003 	ldmia.w	r7, {r0, r1}
     a08:	e886 0003 	stmia.w	r6, {r0, r1}
				ext_irqs[i] = tmp;
     a0c:	e89d 0003 	ldmia.w	sp, {r0, r1}
     a10:	e887 0003 	stmia.w	r7, {r0, r1}
     a14:	e7da      	b.n	9cc <ext_irq_register+0x64>
	if (!found) {
     a16:	b145      	cbz	r5, a2a <ext_irq_register+0xc2>
	return _ext_irq_enable(pin, true);
     a18:	2101      	movs	r1, #1
     a1a:	4620      	mov	r0, r4
     a1c:	4b05      	ldr	r3, [pc, #20]	; (a34 <ext_irq_register+0xcc>)
     a1e:	4798      	blx	r3
}
     a20:	b003      	add	sp, #12
     a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     a24:	f06f 000c 	mvn.w	r0, #12
     a28:	e7fa      	b.n	a20 <ext_irq_register+0xb8>
		return ERR_INVALID_ARG;
     a2a:	f06f 000c 	mvn.w	r0, #12
     a2e:	e7f7      	b.n	a20 <ext_irq_register+0xb8>
     a30:	200000b0 	.word	0x200000b0
     a34:	00001461 	.word	0x00001461

00000a38 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     a38:	b510      	push	{r4, lr}
     a3a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     a3c:	8903      	ldrh	r3, [r0, #8]
     a3e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a42:	4614      	mov	r4, r2
     a44:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
     a4a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = (uint8_t *)buf;
     a4e:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a50:	a901      	add	r1, sp, #4
     a52:	3814      	subs	r0, #20
     a54:	4b03      	ldr	r3, [pc, #12]	; (a64 <i2c_m_sync_write+0x2c>)
     a56:	4798      	blx	r3

	if (ret) {
     a58:	b910      	cbnz	r0, a60 <i2c_m_sync_write+0x28>
		return ret;
	}

	return n;
}
     a5a:	4620      	mov	r0, r4
     a5c:	b004      	add	sp, #16
     a5e:	bd10      	pop	{r4, pc}
		return ret;
     a60:	4604      	mov	r4, r0
     a62:	e7fa      	b.n	a5a <i2c_m_sync_write+0x22>
     a64:	00001ec1 	.word	0x00001ec1

00000a68 <i2c_m_sync_read>:
{
     a68:	b510      	push	{r4, lr}
     a6a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     a6c:	8903      	ldrh	r3, [r0, #8]
     a6e:	f8ad 3004 	strh.w	r3, [sp, #4]
	msg.len    = n;
     a72:	4614      	mov	r4, r2
     a74:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     a76:	f248 0301 	movw	r3, #32769	; 0x8001
     a7a:	f8ad 3006 	strh.w	r3, [sp, #6]
	msg.buffer = buf;
     a7e:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     a80:	a901      	add	r1, sp, #4
     a82:	3814      	subs	r0, #20
     a84:	4b03      	ldr	r3, [pc, #12]	; (a94 <i2c_m_sync_read+0x2c>)
     a86:	4798      	blx	r3
	if (ret) {
     a88:	b910      	cbnz	r0, a90 <i2c_m_sync_read+0x28>
}
     a8a:	4620      	mov	r0, r4
     a8c:	b004      	add	sp, #16
     a8e:	bd10      	pop	{r4, pc}
		return ret;
     a90:	4604      	mov	r4, r0
     a92:	e7fa      	b.n	a8a <i2c_m_sync_read+0x22>
     a94:	00001ec1 	.word	0x00001ec1

00000a98 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     a98:	b538      	push	{r3, r4, r5, lr}
     a9a:	460d      	mov	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     a9c:	4604      	mov	r4, r0
     a9e:	225e      	movs	r2, #94	; 0x5e
     aa0:	4908      	ldr	r1, [pc, #32]	; (ac4 <i2c_m_sync_init+0x2c>)
     aa2:	3000      	adds	r0, #0
     aa4:	bf18      	it	ne
     aa6:	2001      	movne	r0, #1
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <i2c_m_sync_init+0x30>)
     aaa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     aac:	4629      	mov	r1, r5
     aae:	4620      	mov	r0, r4
     ab0:	4b06      	ldr	r3, [pc, #24]	; (acc <i2c_m_sync_init+0x34>)
     ab2:	4798      	blx	r3
	if (init_status) {
     ab4:	4603      	mov	r3, r0
     ab6:	b918      	cbnz	r0, ac0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     ab8:	4a05      	ldr	r2, [pc, #20]	; (ad0 <i2c_m_sync_init+0x38>)
     aba:	61a2      	str	r2, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     abc:	4a05      	ldr	r2, [pc, #20]	; (ad4 <i2c_m_sync_init+0x3c>)
     abe:	6162      	str	r2, [r4, #20]

	return ERR_NONE;
}
     ac0:	4618      	mov	r0, r3
     ac2:	bd38      	pop	{r3, r4, r5, pc}
     ac4:	000027f4 	.word	0x000027f4
     ac8:	00000e3d 	.word	0x00000e3d
     acc:	00001e19 	.word	0x00001e19
     ad0:	00000a69 	.word	0x00000a69
     ad4:	00000a39 	.word	0x00000a39

00000ad8 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     ad8:	b508      	push	{r3, lr}
	return _i2c_m_sync_enable(&i2c->device);
     ada:	4b01      	ldr	r3, [pc, #4]	; (ae0 <i2c_m_sync_enable+0x8>)
     adc:	4798      	blx	r3
}
     ade:	bd08      	pop	{r3, pc}
     ae0:	00001e49 	.word	0x00001e49

00000ae4 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     ae4:	f3c1 0109 	ubfx	r1, r1, #0, #10
     ae8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
     aec:	430a      	orrs	r2, r1
     aee:	8382      	strh	r2, [r0, #28]
}
     af0:	4610      	mov	r0, r2
     af2:	4770      	bx	lr

00000af4 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     af4:	3014      	adds	r0, #20
     af6:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     af8:	2000      	movs	r0, #0
     afa:	4770      	bx	lr

00000afc <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     afc:	b570      	push	{r4, r5, r6, lr}
     afe:	460d      	mov	r5, r1
     b00:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b02:	4604      	mov	r4, r0
     b04:	b168      	cbz	r0, b22 <io_write+0x26>
     b06:	b151      	cbz	r1, b1e <io_write+0x22>
     b08:	2001      	movs	r0, #1
     b0a:	2234      	movs	r2, #52	; 0x34
     b0c:	4906      	ldr	r1, [pc, #24]	; (b28 <io_write+0x2c>)
     b0e:	4b07      	ldr	r3, [pc, #28]	; (b2c <io_write+0x30>)
     b10:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     b12:	6823      	ldr	r3, [r4, #0]
     b14:	4632      	mov	r2, r6
     b16:	4629      	mov	r1, r5
     b18:	4620      	mov	r0, r4
     b1a:	4798      	blx	r3
}
     b1c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b1e:	2000      	movs	r0, #0
     b20:	e7f3      	b.n	b0a <io_write+0xe>
     b22:	2000      	movs	r0, #0
     b24:	e7f1      	b.n	b0a <io_write+0xe>
     b26:	bf00      	nop
     b28:	00002810 	.word	0x00002810
     b2c:	00000e3d 	.word	0x00000e3d

00000b30 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     b30:	b570      	push	{r4, r5, r6, lr}
     b32:	460d      	mov	r5, r1
     b34:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     b36:	4604      	mov	r4, r0
     b38:	b168      	cbz	r0, b56 <io_read+0x26>
     b3a:	b151      	cbz	r1, b52 <io_read+0x22>
     b3c:	2001      	movs	r0, #1
     b3e:	223d      	movs	r2, #61	; 0x3d
     b40:	4906      	ldr	r1, [pc, #24]	; (b5c <io_read+0x2c>)
     b42:	4b07      	ldr	r3, [pc, #28]	; (b60 <io_read+0x30>)
     b44:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     b46:	6863      	ldr	r3, [r4, #4]
     b48:	4632      	mov	r2, r6
     b4a:	4629      	mov	r1, r5
     b4c:	4620      	mov	r0, r4
     b4e:	4798      	blx	r3
}
     b50:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     b52:	2000      	movs	r0, #0
     b54:	e7f3      	b.n	b3e <io_read+0xe>
     b56:	2000      	movs	r0, #0
     b58:	e7f1      	b.n	b3e <io_read+0xe>
     b5a:	bf00      	nop
     b5c:	00002810 	.word	0x00002810
     b60:	00000e3d 	.word	0x00000e3d

00000b64 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     b64:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     b66:	6943      	ldr	r3, [r0, #20]
     b68:	b103      	cbz	r3, b6c <pwm_period_expired+0x8>
		descr->pwm_cb.period(descr);
     b6a:	4798      	blx	r3
     b6c:	bd08      	pop	{r3, pc}

00000b6e <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     b6e:	b508      	push	{r3, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     b70:	6983      	ldr	r3, [r0, #24]
     b72:	b103      	cbz	r3, b76 <pwm_detect_fault+0x8>
		descr->pwm_cb.error(descr);
     b74:	4798      	blx	r3
     b76:	bd08      	pop	{r3, pc}

00000b78 <pwm_init>:
{
     b78:	b538      	push	{r3, r4, r5, lr}
     b7a:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     b7c:	4604      	mov	r4, r0
     b7e:	b188      	cbz	r0, ba4 <pwm_init+0x2c>
     b80:	b171      	cbz	r1, ba0 <pwm_init+0x28>
     b82:	2001      	movs	r0, #1
     b84:	2233      	movs	r2, #51	; 0x33
     b86:	4908      	ldr	r1, [pc, #32]	; (ba8 <pwm_init+0x30>)
     b88:	4b08      	ldr	r3, [pc, #32]	; (bac <pwm_init+0x34>)
     b8a:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     b8c:	4629      	mov	r1, r5
     b8e:	4620      	mov	r0, r4
     b90:	4b07      	ldr	r3, [pc, #28]	; (bb0 <pwm_init+0x38>)
     b92:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     b94:	4b07      	ldr	r3, [pc, #28]	; (bb4 <pwm_init+0x3c>)
     b96:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     b98:	4b07      	ldr	r3, [pc, #28]	; (bb8 <pwm_init+0x40>)
     b9a:	6063      	str	r3, [r4, #4]
}
     b9c:	2000      	movs	r0, #0
     b9e:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(descr && hw);
     ba0:	2000      	movs	r0, #0
     ba2:	e7ef      	b.n	b84 <pwm_init+0xc>
     ba4:	2000      	movs	r0, #0
     ba6:	e7ed      	b.n	b84 <pwm_init+0xc>
     ba8:	00002824 	.word	0x00002824
     bac:	00000e3d 	.word	0x00000e3d
     bb0:	000022d9 	.word	0x000022d9
     bb4:	00000b65 	.word	0x00000b65
     bb8:	00000b6f 	.word	0x00000b6f

00000bbc <pwm_enable>:
{
     bbc:	b510      	push	{r4, lr}
	ASSERT(descr);
     bbe:	4604      	mov	r4, r0
     bc0:	224a      	movs	r2, #74	; 0x4a
     bc2:	4909      	ldr	r1, [pc, #36]	; (be8 <pwm_enable+0x2c>)
     bc4:	3000      	adds	r0, #0
     bc6:	bf18      	it	ne
     bc8:	2001      	movne	r0, #1
     bca:	4b08      	ldr	r3, [pc, #32]	; (bec <pwm_enable+0x30>)
     bcc:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     bce:	4620      	mov	r0, r4
     bd0:	4b07      	ldr	r3, [pc, #28]	; (bf0 <pwm_enable+0x34>)
     bd2:	4798      	blx	r3
     bd4:	b920      	cbnz	r0, be0 <pwm_enable+0x24>
	_pwm_enable(&descr->device);
     bd6:	4620      	mov	r0, r4
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <pwm_enable+0x38>)
     bda:	4798      	blx	r3
	return ERR_NONE;
     bdc:	2000      	movs	r0, #0
     bde:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     be0:	f06f 0010 	mvn.w	r0, #16
}
     be4:	bd10      	pop	{r4, pc}
     be6:	bf00      	nop
     be8:	00002824 	.word	0x00002824
     bec:	00000e3d 	.word	0x00000e3d
     bf0:	000024a9 	.word	0x000024a9
     bf4:	00002475 	.word	0x00002475

00000bf8 <pwm_set_parameters>:
{
     bf8:	b570      	push	{r4, r5, r6, lr}
     bfa:	460d      	mov	r5, r1
     bfc:	4616      	mov	r6, r2
	ASSERT(descr);
     bfe:	4604      	mov	r4, r0
     c00:	227c      	movs	r2, #124	; 0x7c
     c02:	4906      	ldr	r1, [pc, #24]	; (c1c <pwm_set_parameters+0x24>)
     c04:	3000      	adds	r0, #0
     c06:	bf18      	it	ne
     c08:	2001      	movne	r0, #1
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <pwm_set_parameters+0x28>)
     c0c:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     c0e:	4632      	mov	r2, r6
     c10:	4629      	mov	r1, r5
     c12:	4620      	mov	r0, r4
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <pwm_set_parameters+0x2c>)
     c16:	4798      	blx	r3
}
     c18:	2000      	movs	r0, #0
     c1a:	bd70      	pop	{r4, r5, r6, pc}
     c1c:	00002824 	.word	0x00002824
     c20:	00000e3d 	.word	0x00000e3d
     c24:	00002489 	.word	0x00002489

00000c28 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     c28:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     c2a:	2300      	movs	r3, #0
     c2c:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.tx_done) {
     c2e:	69c3      	ldr	r3, [r0, #28]
     c30:	b11b      	cbz	r3, c3a <usart_transmission_complete+0x12>
     c32:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.tx_done(descr);
     c36:	4610      	mov	r0, r2
     c38:	4798      	blx	r3
     c3a:	bd08      	pop	{r3, pc}

00000c3c <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     c3c:	b508      	push	{r3, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     c3e:	2300      	movs	r3, #0
     c40:	6283      	str	r3, [r0, #40]	; 0x28
	if (descr->usart_cb.error) {
     c42:	6a43      	ldr	r3, [r0, #36]	; 0x24
     c44:	b11b      	cbz	r3, c4e <usart_error+0x12>
     c46:	f1a0 0208 	sub.w	r2, r0, #8
		descr->usart_cb.error(descr);
     c4a:	4610      	mov	r0, r2
     c4c:	4798      	blx	r3
     c4e:	bd08      	pop	{r3, pc}

00000c50 <usart_fill_rx_buffer>:
{
     c50:	b538      	push	{r3, r4, r5, lr}
     c52:	4604      	mov	r4, r0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     c54:	f1a0 0508 	sub.w	r5, r0, #8
	ringbuffer_put(&descr->rx, data);
     c58:	302c      	adds	r0, #44	; 0x2c
     c5a:	4b03      	ldr	r3, [pc, #12]	; (c68 <usart_fill_rx_buffer+0x18>)
     c5c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     c5e:	6a23      	ldr	r3, [r4, #32]
     c60:	b10b      	cbz	r3, c66 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     c62:	4628      	mov	r0, r5
     c64:	4798      	blx	r3
     c66:	bd38      	pop	{r3, r4, r5, pc}
     c68:	00000ed1 	.word	0x00000ed1

00000c6c <usart_async_write>:
{
     c6c:	b570      	push	{r4, r5, r6, lr}
     c6e:	460e      	mov	r6, r1
     c70:	4615      	mov	r5, r2
	ASSERT(descr && buf && length);
     c72:	4604      	mov	r4, r0
     c74:	b1d8      	cbz	r0, cae <usart_async_write+0x42>
     c76:	b1e1      	cbz	r1, cb2 <usart_async_write+0x46>
     c78:	b9ea      	cbnz	r2, cb6 <usart_async_write+0x4a>
     c7a:	2000      	movs	r0, #0
     c7c:	f240 123b 	movw	r2, #315	; 0x13b
     c80:	490f      	ldr	r1, [pc, #60]	; (cc0 <usart_async_write+0x54>)
     c82:	4b10      	ldr	r3, [pc, #64]	; (cc4 <usart_async_write+0x58>)
     c84:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     c86:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
     c8a:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
     c8e:	429a      	cmp	r2, r3
     c90:	d113      	bne.n	cba <usart_async_write+0x4e>
	descr->tx_buffer        = (uint8_t *)buf;
     c92:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     c94:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
	descr->tx_por           = 0;
     c98:	2300      	movs	r3, #0
     c9a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     c9e:	2301      	movs	r3, #1
     ca0:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     ca2:	f104 0008 	add.w	r0, r4, #8
     ca6:	4b08      	ldr	r3, [pc, #32]	; (cc8 <usart_async_write+0x5c>)
     ca8:	4798      	blx	r3
	return (int32_t)length;
     caa:	4628      	mov	r0, r5
     cac:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     cae:	2000      	movs	r0, #0
     cb0:	e7e4      	b.n	c7c <usart_async_write+0x10>
     cb2:	2000      	movs	r0, #0
     cb4:	e7e2      	b.n	c7c <usart_async_write+0x10>
     cb6:	2001      	movs	r0, #1
     cb8:	e7e0      	b.n	c7c <usart_async_write+0x10>
		return ERR_NO_RESOURCE;
     cba:	f06f 001b 	mvn.w	r0, #27
}
     cbe:	bd70      	pop	{r4, r5, r6, pc}
     cc0:	0000283c 	.word	0x0000283c
     cc4:	00000e3d 	.word	0x00000e3d
     cc8:	00001e07 	.word	0x00001e07

00000ccc <usart_process_byte_sent>:
{
     ccc:	b510      	push	{r4, lr}
     cce:	4604      	mov	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     cd0:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
     cd2:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
     cd6:	4293      	cmp	r3, r2
     cd8:	d009      	beq.n	cee <usart_process_byte_sent+0x22>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     cda:	6c02      	ldr	r2, [r0, #64]	; 0x40
     cdc:	1c59      	adds	r1, r3, #1
     cde:	8781      	strh	r1, [r0, #60]	; 0x3c
     ce0:	5cd1      	ldrb	r1, [r2, r3]
     ce2:	4b04      	ldr	r3, [pc, #16]	; (cf4 <usart_process_byte_sent+0x28>)
     ce4:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     ce6:	4620      	mov	r0, r4
     ce8:	4b03      	ldr	r3, [pc, #12]	; (cf8 <usart_process_byte_sent+0x2c>)
     cea:	4798      	blx	r3
     cec:	bd10      	pop	{r4, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     cee:	4b03      	ldr	r3, [pc, #12]	; (cfc <usart_process_byte_sent+0x30>)
     cf0:	4798      	blx	r3
     cf2:	bd10      	pop	{r4, pc}
     cf4:	00001e01 	.word	0x00001e01
     cf8:	00001e07 	.word	0x00001e07
     cfc:	00001e0f 	.word	0x00001e0f

00000d00 <usart_async_read>:
{
     d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d04:	b082      	sub	sp, #8
     d06:	4688      	mov	r8, r1
     d08:	4616      	mov	r6, r2
	ASSERT(descr && buf && length);
     d0a:	4605      	mov	r5, r0
     d0c:	b1a0      	cbz	r0, d38 <usart_async_read+0x38>
     d0e:	b1a9      	cbz	r1, d3c <usart_async_read+0x3c>
     d10:	b9b2      	cbnz	r2, d40 <usart_async_read+0x40>
     d12:	2000      	movs	r0, #0
     d14:	f44f 72ac 	mov.w	r2, #344	; 0x158
     d18:	4912      	ldr	r1, [pc, #72]	; (d64 <usart_async_read+0x64>)
     d1a:	4b13      	ldr	r3, [pc, #76]	; (d68 <usart_async_read+0x68>)
     d1c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     d1e:	a801      	add	r0, sp, #4
     d20:	4b12      	ldr	r3, [pc, #72]	; (d6c <usart_async_read+0x6c>)
     d22:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     d24:	3534      	adds	r5, #52	; 0x34
     d26:	4628      	mov	r0, r5
     d28:	4b11      	ldr	r3, [pc, #68]	; (d70 <usart_async_read+0x70>)
     d2a:	4798      	blx	r3
     d2c:	4607      	mov	r7, r0
	CRITICAL_SECTION_LEAVE()
     d2e:	a801      	add	r0, sp, #4
     d30:	4b10      	ldr	r3, [pc, #64]	; (d74 <usart_async_read+0x74>)
     d32:	4798      	blx	r3
	uint16_t                       was_read = 0;
     d34:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     d36:	e00b      	b.n	d50 <usart_async_read+0x50>
	ASSERT(descr && buf && length);
     d38:	2000      	movs	r0, #0
     d3a:	e7eb      	b.n	d14 <usart_async_read+0x14>
     d3c:	2000      	movs	r0, #0
     d3e:	e7e9      	b.n	d14 <usart_async_read+0x14>
     d40:	2001      	movs	r0, #1
     d42:	e7e7      	b.n	d14 <usart_async_read+0x14>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     d44:	3401      	adds	r4, #1
     d46:	b2a4      	uxth	r4, r4
     d48:	4441      	add	r1, r8
     d4a:	4628      	mov	r0, r5
     d4c:	4b0a      	ldr	r3, [pc, #40]	; (d78 <usart_async_read+0x78>)
     d4e:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     d50:	4621      	mov	r1, r4
     d52:	42a7      	cmp	r7, r4
     d54:	d901      	bls.n	d5a <usart_async_read+0x5a>
     d56:	42b4      	cmp	r4, r6
     d58:	d3f4      	bcc.n	d44 <usart_async_read+0x44>
}
     d5a:	4620      	mov	r0, r4
     d5c:	b002      	add	sp, #8
     d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     d62:	bf00      	nop
     d64:	0000283c 	.word	0x0000283c
     d68:	00000e3d 	.word	0x00000e3d
     d6c:	00000851 	.word	0x00000851
     d70:	00000f11 	.word	0x00000f11
     d74:	0000085f 	.word	0x0000085f
     d78:	00000e89 	.word	0x00000e89

00000d7c <usart_async_init>:
{
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d7e:	460d      	mov	r5, r1
     d80:	4616      	mov	r6, r2
     d82:	461f      	mov	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     d84:	4604      	mov	r4, r0
     d86:	b318      	cbz	r0, dd0 <usart_async_init+0x54>
     d88:	b321      	cbz	r1, dd4 <usart_async_init+0x58>
     d8a:	b32a      	cbz	r2, dd8 <usart_async_init+0x5c>
     d8c:	bb33      	cbnz	r3, ddc <usart_async_init+0x60>
     d8e:	2000      	movs	r0, #0
     d90:	223a      	movs	r2, #58	; 0x3a
     d92:	4915      	ldr	r1, [pc, #84]	; (de8 <usart_async_init+0x6c>)
     d94:	4b15      	ldr	r3, [pc, #84]	; (dec <usart_async_init+0x70>)
     d96:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     d98:	463a      	mov	r2, r7
     d9a:	4631      	mov	r1, r6
     d9c:	f104 0034 	add.w	r0, r4, #52	; 0x34
     da0:	4b13      	ldr	r3, [pc, #76]	; (df0 <usart_async_init+0x74>)
     da2:	4798      	blx	r3
     da4:	b9e0      	cbnz	r0, de0 <usart_async_init+0x64>
	init_status = _usart_async_init(&descr->device, hw);
     da6:	4629      	mov	r1, r5
     da8:	f104 0008 	add.w	r0, r4, #8
     dac:	4b11      	ldr	r3, [pc, #68]	; (df4 <usart_async_init+0x78>)
     dae:	4798      	blx	r3
	if (init_status) {
     db0:	4603      	mov	r3, r0
     db2:	b958      	cbnz	r0, dcc <usart_async_init+0x50>
	descr->io.read  = usart_async_read;
     db4:	4a10      	ldr	r2, [pc, #64]	; (df8 <usart_async_init+0x7c>)
     db6:	6062      	str	r2, [r4, #4]
	descr->io.write = usart_async_write;
     db8:	4a10      	ldr	r2, [pc, #64]	; (dfc <usart_async_init+0x80>)
     dba:	6022      	str	r2, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     dbc:	4a10      	ldr	r2, [pc, #64]	; (e00 <usart_async_init+0x84>)
     dbe:	60a2      	str	r2, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     dc0:	4a10      	ldr	r2, [pc, #64]	; (e04 <usart_async_init+0x88>)
     dc2:	60e2      	str	r2, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     dc4:	4a10      	ldr	r2, [pc, #64]	; (e08 <usart_async_init+0x8c>)
     dc6:	6122      	str	r2, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     dc8:	4a10      	ldr	r2, [pc, #64]	; (e0c <usart_async_init+0x90>)
     dca:	6162      	str	r2, [r4, #20]
}
     dcc:	4618      	mov	r0, r3
     dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     dd0:	2000      	movs	r0, #0
     dd2:	e7dd      	b.n	d90 <usart_async_init+0x14>
     dd4:	2000      	movs	r0, #0
     dd6:	e7db      	b.n	d90 <usart_async_init+0x14>
     dd8:	2000      	movs	r0, #0
     dda:	e7d9      	b.n	d90 <usart_async_init+0x14>
     ddc:	2001      	movs	r0, #1
     dde:	e7d7      	b.n	d90 <usart_async_init+0x14>
		return ERR_INVALID_ARG;
     de0:	f06f 030c 	mvn.w	r3, #12
     de4:	e7f2      	b.n	dcc <usart_async_init+0x50>
     de6:	bf00      	nop
     de8:	0000283c 	.word	0x0000283c
     dec:	00000e3d 	.word	0x00000e3d
     df0:	00000e45 	.word	0x00000e45
     df4:	00001d69 	.word	0x00001d69
     df8:	00000d01 	.word	0x00000d01
     dfc:	00000c6d 	.word	0x00000c6d
     e00:	00000ccd 	.word	0x00000ccd
     e04:	00000c51 	.word	0x00000c51
     e08:	00000c29 	.word	0x00000c29
     e0c:	00000c3d 	.word	0x00000c3d

00000e10 <usart_async_enable>:
{
     e10:	b510      	push	{r4, lr}
	ASSERT(descr);
     e12:	4604      	mov	r4, r0
     e14:	2261      	movs	r2, #97	; 0x61
     e16:	4906      	ldr	r1, [pc, #24]	; (e30 <usart_async_enable+0x20>)
     e18:	3000      	adds	r0, #0
     e1a:	bf18      	it	ne
     e1c:	2001      	movne	r0, #1
     e1e:	4b05      	ldr	r3, [pc, #20]	; (e34 <usart_async_enable+0x24>)
     e20:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     e22:	f104 0008 	add.w	r0, r4, #8
     e26:	4b04      	ldr	r3, [pc, #16]	; (e38 <usart_async_enable+0x28>)
     e28:	4798      	blx	r3
}
     e2a:	2000      	movs	r0, #0
     e2c:	bd10      	pop	{r4, pc}
     e2e:	bf00      	nop
     e30:	0000283c 	.word	0x0000283c
     e34:	00000e3d 	.word	0x00000e3d
     e38:	00001ded 	.word	0x00001ded

00000e3c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     e3c:	b900      	cbnz	r0, e40 <assert+0x4>
		__asm("BKPT #0");
     e3e:	be00      	bkpt	0x0000
     e40:	4770      	bx	lr
	...

00000e44 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     e44:	b570      	push	{r4, r5, r6, lr}
     e46:	460e      	mov	r6, r1
     e48:	4615      	mov	r5, r2
	ASSERT(rb && buf && size);
     e4a:	4604      	mov	r4, r0
     e4c:	b178      	cbz	r0, e6e <ringbuffer_init+0x2a>
     e4e:	b181      	cbz	r1, e72 <ringbuffer_init+0x2e>
     e50:	b98a      	cbnz	r2, e76 <ringbuffer_init+0x32>
     e52:	2000      	movs	r0, #0
     e54:	2228      	movs	r2, #40	; 0x28
     e56:	490a      	ldr	r1, [pc, #40]	; (e80 <ringbuffer_init+0x3c>)
     e58:	4b0a      	ldr	r3, [pc, #40]	; (e84 <ringbuffer_init+0x40>)
     e5a:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     e5c:	1e6b      	subs	r3, r5, #1
     e5e:	421d      	tst	r5, r3
     e60:	d10b      	bne.n	e7a <ringbuffer_init+0x36>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     e62:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     e64:	2000      	movs	r0, #0
     e66:	60a0      	str	r0, [r4, #8]
	rb->write_index = rb->read_index;
     e68:	60e0      	str	r0, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     e6a:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     e6c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     e6e:	2000      	movs	r0, #0
     e70:	e7f0      	b.n	e54 <ringbuffer_init+0x10>
     e72:	2000      	movs	r0, #0
     e74:	e7ee      	b.n	e54 <ringbuffer_init+0x10>
     e76:	2001      	movs	r0, #1
     e78:	e7ec      	b.n	e54 <ringbuffer_init+0x10>
		return ERR_INVALID_ARG;
     e7a:	f06f 000c 	mvn.w	r0, #12
}
     e7e:	bd70      	pop	{r4, r5, r6, pc}
     e80:	0000285c 	.word	0x0000285c
     e84:	00000e3d 	.word	0x00000e3d

00000e88 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     e88:	b538      	push	{r3, r4, r5, lr}
     e8a:	460d      	mov	r5, r1
	ASSERT(rb && data);
     e8c:	4604      	mov	r4, r0
     e8e:	b1a8      	cbz	r0, ebc <ringbuffer_get+0x34>
     e90:	b191      	cbz	r1, eb8 <ringbuffer_get+0x30>
     e92:	2001      	movs	r0, #1
     e94:	2240      	movs	r2, #64	; 0x40
     e96:	490c      	ldr	r1, [pc, #48]	; (ec8 <ringbuffer_get+0x40>)
     e98:	4b0c      	ldr	r3, [pc, #48]	; (ecc <ringbuffer_get+0x44>)
     e9a:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     e9c:	68e2      	ldr	r2, [r4, #12]
     e9e:	68a3      	ldr	r3, [r4, #8]
     ea0:	429a      	cmp	r2, r3
     ea2:	d00d      	beq.n	ec0 <ringbuffer_get+0x38>
		*data = rb->buf[rb->read_index & rb->size];
     ea4:	6822      	ldr	r2, [r4, #0]
     ea6:	6861      	ldr	r1, [r4, #4]
     ea8:	400b      	ands	r3, r1
     eaa:	5cd3      	ldrb	r3, [r2, r3]
     eac:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     eae:	68a3      	ldr	r3, [r4, #8]
     eb0:	3301      	adds	r3, #1
     eb2:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     eb4:	2000      	movs	r0, #0
     eb6:	bd38      	pop	{r3, r4, r5, pc}
	ASSERT(rb && data);
     eb8:	2000      	movs	r0, #0
     eba:	e7eb      	b.n	e94 <ringbuffer_get+0xc>
     ebc:	2000      	movs	r0, #0
     ebe:	e7e9      	b.n	e94 <ringbuffer_get+0xc>
	}

	return ERR_NOT_FOUND;
     ec0:	f06f 0009 	mvn.w	r0, #9
}
     ec4:	bd38      	pop	{r3, r4, r5, pc}
     ec6:	bf00      	nop
     ec8:	0000285c 	.word	0x0000285c
     ecc:	00000e3d 	.word	0x00000e3d

00000ed0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     ed0:	b538      	push	{r3, r4, r5, lr}
     ed2:	460d      	mov	r5, r1
	ASSERT(rb);
     ed4:	4604      	mov	r4, r0
     ed6:	2251      	movs	r2, #81	; 0x51
     ed8:	490b      	ldr	r1, [pc, #44]	; (f08 <ringbuffer_put+0x38>)
     eda:	3000      	adds	r0, #0
     edc:	bf18      	it	ne
     ede:	2001      	movne	r0, #1
     ee0:	4b0a      	ldr	r3, [pc, #40]	; (f0c <ringbuffer_put+0x3c>)
     ee2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     ee4:	6822      	ldr	r2, [r4, #0]
     ee6:	68e3      	ldr	r3, [r4, #12]
     ee8:	6861      	ldr	r1, [r4, #4]
     eea:	400b      	ands	r3, r1
     eec:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     eee:	68e3      	ldr	r3, [r4, #12]
     ef0:	68a2      	ldr	r2, [r4, #8]
     ef2:	1a9a      	subs	r2, r3, r2
     ef4:	6861      	ldr	r1, [r4, #4]
     ef6:	428a      	cmp	r2, r1
     ef8:	d901      	bls.n	efe <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     efa:	1a59      	subs	r1, r3, r1
     efc:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     efe:	3301      	adds	r3, #1
     f00:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     f02:	2000      	movs	r0, #0
     f04:	bd38      	pop	{r3, r4, r5, pc}
     f06:	bf00      	nop
     f08:	0000285c 	.word	0x0000285c
     f0c:	00000e3d 	.word	0x00000e3d

00000f10 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     f10:	b510      	push	{r4, lr}
	ASSERT(rb);
     f12:	4604      	mov	r4, r0
     f14:	2267      	movs	r2, #103	; 0x67
     f16:	4905      	ldr	r1, [pc, #20]	; (f2c <ringbuffer_num+0x1c>)
     f18:	3000      	adds	r0, #0
     f1a:	bf18      	it	ne
     f1c:	2001      	movne	r0, #1
     f1e:	4b04      	ldr	r3, [pc, #16]	; (f30 <ringbuffer_num+0x20>)
     f20:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     f22:	68e0      	ldr	r0, [r4, #12]
     f24:	68a3      	ldr	r3, [r4, #8]
}
     f26:	1ac0      	subs	r0, r0, r3
     f28:	bd10      	pop	{r4, pc}
     f2a:	bf00      	nop
     f2c:	0000285c 	.word	0x0000285c
     f30:	00000e3d 	.word	0x00000e3d

00000f34 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 9:
		return (ms * (freq / 1000000)) * 1000;
     f34:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
     f38:	00c3      	lsls	r3, r0, #3
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     f3e:	fb00 f003 	mul.w	r0, r0, r3
     f42:	4770      	bx	lr

00000f44 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     f44:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     f46:	4a0d      	ldr	r2, [pc, #52]	; (f7c <_init_chip+0x38>)
     f48:	8813      	ldrh	r3, [r2, #0]
     f4a:	b29b      	uxth	r3, r3
     f4c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     f4e:	4b0c      	ldr	r3, [pc, #48]	; (f80 <_init_chip+0x3c>)
     f50:	4798      	blx	r3
	_oscctrl_init_sources();
     f52:	4b0c      	ldr	r3, [pc, #48]	; (f84 <_init_chip+0x40>)
     f54:	4798      	blx	r3
	_mclk_init();
     f56:	4b0c      	ldr	r3, [pc, #48]	; (f88 <_init_chip+0x44>)
     f58:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     f5a:	2004      	movs	r0, #4
     f5c:	4c0b      	ldr	r4, [pc, #44]	; (f8c <_init_chip+0x48>)
     f5e:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
     f60:	4b0b      	ldr	r3, [pc, #44]	; (f90 <_init_chip+0x4c>)
     f62:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     f64:	f640 70fb 	movw	r0, #4091	; 0xffb
     f68:	47a0      	blx	r4
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_DMAC;
     f6a:	4a0a      	ldr	r2, [pc, #40]	; (f94 <_init_chip+0x50>)
     f6c:	6913      	ldr	r3, [r2, #16]
     f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     f72:	6113      	str	r3, [r2, #16]

#if CONF_DMAC_ENABLE
	hri_mclk_set_AHBMASK_DMAC_bit(MCLK);
	_dma_init();
     f74:	4b08      	ldr	r3, [pc, #32]	; (f98 <_init_chip+0x54>)
     f76:	4798      	blx	r3
     f78:	bd10      	pop	{r4, pc}
     f7a:	bf00      	nop
     f7c:	41004000 	.word	0x41004000
     f80:	000015b9 	.word	0x000015b9
     f84:	000015cd 	.word	0x000015cd
     f88:	000015ad 	.word	0x000015ad
     f8c:	00001535 	.word	0x00001535
     f90:	000015e9 	.word	0x000015e9
     f94:	40000800 	.word	0x40000800
     f98:	0000101d 	.word	0x0000101d

00000f9c <_dmac_handler>:

/**
 * \internal DMAC interrupt handler
 */
static void _dmac_handler(void)
{
     f9c:	b508      	push	{r3, lr}
}

static inline hri_dmac_intpend_reg_t hri_dmac_get_INTPEND_reg(const void *const hw, hri_dmac_intpend_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Dmac *)hw)->INTPEND.reg;
     f9e:	4a1c      	ldr	r2, [pc, #112]	; (1010 <_dmac_handler+0x74>)
     fa0:	8c13      	ldrh	r3, [r2, #32]
	uint8_t               channel      = hri_dmac_get_INTPEND_reg(DMAC, DMAC_INTPEND_ID_Msk);
     fa2:	f003 031f 	and.w	r3, r3, #31
	struct _dma_resource *tmp_resource = &_resources[channel];
     fa6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
     faa:	0088      	lsls	r0, r1, #2
     fac:	4919      	ldr	r1, [pc, #100]	; (1014 <_dmac_handler+0x78>)
     fae:	4408      	add	r0, r1
	return ((DmacChannel *)hw)->CHSTATUS.reg;
}

static inline bool hri_dmac_get_CHINTFLAG_TERR_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TERR) >> DMAC_CHINTFLAG_TERR_Pos;
     fb0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
     fb4:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e

	if (hri_dmac_get_CHINTFLAG_TERR_bit(DMAC, channel)) {
     fb8:	f012 0f01 	tst.w	r2, #1
     fbc:	d10a      	bne.n	fd4 <_dmac_handler+0x38>
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
}

static inline bool hri_dmac_get_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	return (((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg & DMAC_CHINTFLAG_TCMPL) >> DMAC_CHINTFLAG_TCMPL_Pos;
     fbe:	011a      	lsls	r2, r3, #4
     fc0:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     fc4:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fc8:	f892 204e 	ldrb.w	r2, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TERR_bit(DMAC, channel);
		tmp_resource->dma_cb.error(tmp_resource);
	} else if (hri_dmac_get_CHINTFLAG_TCMPL_bit(DMAC, channel)) {
     fcc:	f012 0f02 	tst.w	r2, #2
     fd0:	d10b      	bne.n	fea <_dmac_handler+0x4e>
     fd2:	bd08      	pop	{r3, pc}
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TERR;
     fd4:	011a      	lsls	r2, r3, #4
     fd6:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     fda:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     fde:	2101      	movs	r1, #1
     fe0:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		tmp_resource->dma_cb.error(tmp_resource);
     fe4:	6843      	ldr	r3, [r0, #4]
     fe6:	4798      	blx	r3
     fe8:	bd08      	pop	{r3, pc}
}

static inline void hri_dmac_clear_CHINTFLAG_TCMPL_bit(const void *const hw, uint8_t submodule_index)
{
	((Dmac *)hw)->Channel[submodule_index].CHINTFLAG.reg = DMAC_CHINTFLAG_TCMPL;
     fea:	011a      	lsls	r2, r3, #4
     fec:	f102 4282 	add.w	r2, r2, #1090519040	; 0x41000000
     ff0:	f502 4220 	add.w	r2, r2, #40960	; 0xa000
     ff4:	2102      	movs	r1, #2
     ff6:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
		hri_dmac_clear_CHINTFLAG_TCMPL_bit(DMAC, channel);
		flag_frame_captured = 1;
     ffa:	2101      	movs	r1, #1
     ffc:	4a06      	ldr	r2, [pc, #24]	; (1018 <_dmac_handler+0x7c>)
     ffe:	6011      	str	r1, [r2, #0]
		tmp_resource->dma_cb.transfer_done(tmp_resource);
    1000:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    1004:	009a      	lsls	r2, r3, #2
    1006:	4b03      	ldr	r3, [pc, #12]	; (1014 <_dmac_handler+0x78>)
    1008:	589b      	ldr	r3, [r3, r2]
    100a:	4798      	blx	r3
	}
}
    100c:	e7e1      	b.n	fd2 <_dmac_handler+0x36>
    100e:	bf00      	nop
    1010:	4100a000 	.word	0x4100a000
    1014:	200000c0 	.word	0x200000c0
    1018:	20025e50 	.word	0x20025e50

0000101c <_dma_init>:
{
    101c:	b430      	push	{r4, r5}
	((Dmac *)hw)->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    101e:	4a3e      	ldr	r2, [pc, #248]	; (1118 <_dma_init+0xfc>)
    1020:	8813      	ldrh	r3, [r2, #0]
    1022:	b29b      	uxth	r3, r3
    1024:	f023 0302 	bic.w	r3, r3, #2
    1028:	b29b      	uxth	r3, r3
    102a:	8013      	strh	r3, [r2, #0]
	((Dmac *)hw)->CRCCTRL.reg &= ~mask;
    102c:	8853      	ldrh	r3, [r2, #2]
    102e:	b29b      	uxth	r3, r3
    1030:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
    1034:	b29b      	uxth	r3, r3
    1036:	8053      	strh	r3, [r2, #2]
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_SWRST;
    1038:	8813      	ldrh	r3, [r2, #0]
    103a:	b29b      	uxth	r3, r3
    103c:	f043 0301 	orr.w	r3, r3, #1
    1040:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->CTRL.reg;
    1042:	4b35      	ldr	r3, [pc, #212]	; (1118 <_dma_init+0xfc>)
    1044:	881b      	ldrh	r3, [r3, #0]
	while (hri_dmac_get_CTRL_SWRST_bit(DMAC))
    1046:	f013 0f01 	tst.w	r3, #1
    104a:	d1fa      	bne.n	1042 <_dma_init+0x26>
	((Dmac *)hw)->CTRL.reg = data;
    104c:	4a32      	ldr	r2, [pc, #200]	; (1118 <_dma_init+0xfc>)
    104e:	f44f 7380 	mov.w	r3, #256	; 0x100
    1052:	8013      	strh	r3, [r2, #0]
	tmp = ((Dmac *)hw)->DBGCTRL.reg;
    1054:	7b53      	ldrb	r3, [r2, #13]
	tmp &= ~DMAC_DBGCTRL_DBGRUN;
    1056:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	tmp |= value << DMAC_DBGCTRL_DBGRUN_Pos;
    105a:	f043 0301 	orr.w	r3, r3, #1
	((Dmac *)hw)->DBGCTRL.reg = tmp;
    105e:	7353      	strb	r3, [r2, #13]
	((Dmac *)hw)->PRICTRL0.reg = data;
    1060:	2300      	movs	r3, #0
    1062:	6153      	str	r3, [r2, #20]
	hri_dmac_write_BASEADDR_reg(DMAC, (uint32_t)_descriptor_section);
    1064:	492d      	ldr	r1, [pc, #180]	; (111c <_dma_init+0x100>)
    1066:	f501 70c0 	add.w	r0, r1, #384	; 0x180
	((Dmac *)hw)->BASEADDR.reg = data;
    106a:	6350      	str	r0, [r2, #52]	; 0x34
	hri_dmac_write_WRBADDR_reg(DMAC, (uint32_t)_write_back_section);
    106c:	f501 7160 	add.w	r1, r1, #896	; 0x380
	((Dmac *)hw)->WRBADDR.reg = data;
    1070:	6391      	str	r1, [r2, #56]	; 0x38
	for (i = 0; i < DMAC_CH_NUM; i++) {
    1072:	e015      	b.n	10a0 <_dma_init+0x84>
		hri_dmac_write_CHCTRLA_reg(DMAC, i, _cfgs[i].ctrla);
    1074:	4a2a      	ldr	r2, [pc, #168]	; (1120 <_dma_init+0x104>)
    1076:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]

static inline void hri_dmac_write_CHCTRLA_reg(const void *const hw, uint8_t submodule_index,
                                              hri_dmac_chctrla_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg = data;
    107a:	4c27      	ldr	r4, [pc, #156]	; (1118 <_dma_init+0xfc>)
    107c:	1d19      	adds	r1, r3, #4
    107e:	0109      	lsls	r1, r1, #4
    1080:	1860      	adds	r0, r4, r1
    1082:	5065      	str	r5, [r4, r1]
		hri_dmac_write_CHPRILVL_reg(DMAC, i, _cfgs[i].prilvl);
    1084:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1088:	7911      	ldrb	r1, [r2, #4]

static inline void hri_dmac_write_CHPRILVL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chprilvl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHPRILVL.reg = data;
    108a:	7141      	strb	r1, [r0, #5]
		hri_dmac_write_CHEVCTRL_reg(DMAC, i, _cfgs[i].evctrl);
    108c:	7951      	ldrb	r1, [r2, #5]

static inline void hri_dmac_write_CHEVCTRL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_dmac_chevctrl_reg_t data)
{
	DMAC_CRITICAL_SECTION_ENTER();
	((Dmac *)hw)->Channel[submodule_index].CHEVCTRL.reg = data;
    108e:	7181      	strb	r1, [r0, #6]
		hri_dmacdescriptor_write_BTCTRL_reg(&_descriptor_section[i], _cfgs[i].btctrl);
    1090:	88d1      	ldrh	r1, [r2, #6]
	((DmacDescriptor *)hw)->BTCTRL.reg = data;
    1092:	4a22      	ldr	r2, [pc, #136]	; (111c <_dma_init+0x100>)
    1094:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    1098:	f8a2 1180 	strh.w	r1, [r2, #384]	; 0x180
	for (i = 0; i < DMAC_CH_NUM; i++) {
    109c:	3301      	adds	r3, #1
    109e:	b2db      	uxtb	r3, r3
    10a0:	2b1f      	cmp	r3, #31
    10a2:	d9e7      	bls.n	1074 <_dma_init+0x58>
    10a4:	2300      	movs	r3, #0
    10a6:	e00a      	b.n	10be <_dma_init+0xa2>
		NVIC_DisableIRQ(DMAC_0_IRQn + i);
    10a8:	f103 011f 	add.w	r1, r3, #31
    10ac:	b20a      	sxth	r2, r1
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    10ae:	2a00      	cmp	r2, #0
    10b0:	da10      	bge.n	10d4 <_dma_init+0xb8>
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    10b2:	2a00      	cmp	r2, #0
    10b4:	da1c      	bge.n	10f0 <_dma_init+0xd4>
  if ((int32_t)(IRQn) >= 0)
    10b6:	2a00      	cmp	r2, #0
    10b8:	da24      	bge.n	1104 <_dma_init+0xe8>
	for (i = 0; i < 5; i++) {
    10ba:	3301      	adds	r3, #1
    10bc:	b2db      	uxtb	r3, r3
    10be:	2b04      	cmp	r3, #4
    10c0:	d9f2      	bls.n	10a8 <_dma_init+0x8c>
	((Dmac *)hw)->CTRL.reg |= DMAC_CTRL_DMAENABLE;
    10c2:	4a15      	ldr	r2, [pc, #84]	; (1118 <_dma_init+0xfc>)
    10c4:	8813      	ldrh	r3, [r2, #0]
    10c6:	b29b      	uxth	r3, r3
    10c8:	f043 0302 	orr.w	r3, r3, #2
    10cc:	8013      	strh	r3, [r2, #0]
}
    10ce:	2000      	movs	r0, #0
    10d0:	bc30      	pop	{r4, r5}
    10d2:	4770      	bx	lr
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10d4:	0950      	lsrs	r0, r2, #5
    10d6:	f001 051f 	and.w	r5, r1, #31
    10da:	2401      	movs	r4, #1
    10dc:	40ac      	lsls	r4, r5
    10de:	3020      	adds	r0, #32
    10e0:	4d10      	ldr	r5, [pc, #64]	; (1124 <_dma_init+0x108>)
    10e2:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    10e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    10ea:	f3bf 8f6f 	isb	sy
    10ee:	e7e0      	b.n	10b2 <_dma_init+0x96>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    10f0:	0950      	lsrs	r0, r2, #5
    10f2:	f001 051f 	and.w	r5, r1, #31
    10f6:	2401      	movs	r4, #1
    10f8:	40ac      	lsls	r4, r5
    10fa:	3060      	adds	r0, #96	; 0x60
    10fc:	4d09      	ldr	r5, [pc, #36]	; (1124 <_dma_init+0x108>)
    10fe:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
    1102:	e7d8      	b.n	10b6 <_dma_init+0x9a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1104:	0952      	lsrs	r2, r2, #5
    1106:	f001 011f 	and.w	r1, r1, #31
    110a:	2001      	movs	r0, #1
    110c:	fa00 f101 	lsl.w	r1, r0, r1
    1110:	4804      	ldr	r0, [pc, #16]	; (1124 <_dma_init+0x108>)
    1112:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    1116:	e7d0      	b.n	10ba <_dma_init+0x9e>
    1118:	4100a000 	.word	0x4100a000
    111c:	200000c0 	.word	0x200000c0
    1120:	00002880 	.word	0x00002880
    1124:	e000e100 	.word	0xe000e100

00001128 <_dma_set_irq_state>:
	if (DMA_TRANSFER_COMPLETE_CB == type) {
    1128:	b991      	cbnz	r1, 1150 <_dma_set_irq_state+0x28>
	if (value == 0x0) {
    112a:	b942      	cbnz	r2, 113e <_dma_set_irq_state+0x16>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TCMPL;
    112c:	0100      	lsls	r0, r0, #4
    112e:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1132:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1136:	2302      	movs	r3, #2
    1138:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
    113c:	4770      	bx	lr
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TCMPL;
    113e:	0100      	lsls	r0, r0, #4
    1140:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1144:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1148:	2302      	movs	r3, #2
    114a:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    114e:	4770      	bx	lr
	} else if (DMA_TRANSFER_ERROR_CB == type) {
    1150:	2901      	cmp	r1, #1
    1152:	d000      	beq.n	1156 <_dma_set_irq_state+0x2e>
    1154:	4770      	bx	lr
	if (value == 0x0) {
    1156:	b142      	cbz	r2, 116a <_dma_set_irq_state+0x42>
		((Dmac *)hw)->Channel[submodule_index].CHINTENSET.reg = DMAC_CHINTENSET_TERR;
    1158:	0100      	lsls	r0, r0, #4
    115a:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    115e:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1162:	2301      	movs	r3, #1
    1164:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
}
    1168:	e7f4      	b.n	1154 <_dma_set_irq_state+0x2c>
		((Dmac *)hw)->Channel[submodule_index].CHINTENCLR.reg = DMAC_CHINTENSET_TERR;
    116a:	0100      	lsls	r0, r0, #4
    116c:	f100 4082 	add.w	r0, r0, #1090519040	; 0x41000000
    1170:	f500 4020 	add.w	r0, r0, #40960	; 0xa000
    1174:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
    1178:	4770      	bx	lr
	...

0000117c <_dma_set_destination_address>:
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    117c:	4b03      	ldr	r3, [pc, #12]	; (118c <_dma_set_destination_address+0x10>)
    117e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1182:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
}
    1186:	2000      	movs	r0, #0
    1188:	4770      	bx	lr
    118a:	bf00      	nop
    118c:	200000c0 	.word	0x200000c0

00001190 <_dma_set_source_address>:
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1190:	4b03      	ldr	r3, [pc, #12]	; (11a0 <_dma_set_source_address+0x10>)
    1192:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1196:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
}
    119a:	2000      	movs	r0, #0
    119c:	4770      	bx	lr
    119e:	bf00      	nop
    11a0:	200000c0 	.word	0x200000c0

000011a4 <_dma_srcinc_enable>:
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <_dma_srcinc_enable+0x20>)
    11a6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    11aa:	f8b0 3180 	ldrh.w	r3, [r0, #384]	; 0x180
    11ae:	b29b      	uxth	r3, r3
	tmp &= ~DMAC_BTCTRL_SRCINC;
    11b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
	tmp |= value << DMAC_BTCTRL_SRCINC_Pos;
    11b4:	ea43 2181 	orr.w	r1, r3, r1, lsl #10
    11b8:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCTRL.reg = tmp;
    11ba:	f8a0 1180 	strh.w	r1, [r0, #384]	; 0x180
}
    11be:	2000      	movs	r0, #0
    11c0:	4770      	bx	lr
    11c2:	bf00      	nop
    11c4:	200000c0 	.word	0x200000c0

000011c8 <_dma_set_data_amount>:
{
    11c8:	b430      	push	{r4, r5}
	return ((DmacDescriptor *)hw)->DSTADDR.reg;
    11ca:	4a18      	ldr	r2, [pc, #96]	; (122c <_dma_set_data_amount+0x64>)
    11cc:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    11d0:	f8d2 5188 	ldr.w	r5, [r2, #392]	; 0x188
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11d4:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
	uint8_t  beat_size = hri_dmacdescriptor_read_BTCTRL_BEATSIZE_bf(&_descriptor_section[channel]);
    11d8:	f3c3 2301 	ubfx	r3, r3, #8, #2
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    11dc:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_DSTINC_bit(&_descriptor_section[channel])) {
    11e0:	f412 6f00 	tst.w	r2, #2048	; 0x800
    11e4:	d007      	beq.n	11f6 <_dma_set_data_amount+0x2e>
		hri_dmacdescriptor_write_DSTADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    11e6:	fa01 f403 	lsl.w	r4, r1, r3
    11ea:	442c      	add	r4, r5
	((DmacDescriptor *)hw)->DSTADDR.reg = data;
    11ec:	4a0f      	ldr	r2, [pc, #60]	; (122c <_dma_set_data_amount+0x64>)
    11ee:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    11f2:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
	return ((DmacDescriptor *)hw)->SRCADDR.reg;
    11f6:	4a0d      	ldr	r2, [pc, #52]	; (122c <_dma_set_data_amount+0x64>)
    11f8:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    11fc:	f8d2 4184 	ldr.w	r4, [r2, #388]	; 0x184
	tmp = ((DmacDescriptor *)hw)->BTCTRL.reg;
    1200:	f8b2 2180 	ldrh.w	r2, [r2, #384]	; 0x180
	if (hri_dmacdescriptor_get_BTCTRL_SRCINC_bit(&_descriptor_section[channel])) {
    1204:	f412 6f80 	tst.w	r2, #1024	; 0x400
    1208:	d007      	beq.n	121a <_dma_set_data_amount+0x52>
		hri_dmacdescriptor_write_SRCADDR_reg(&_descriptor_section[channel], address + amount * (1 << beat_size));
    120a:	fa01 f303 	lsl.w	r3, r1, r3
    120e:	4423      	add	r3, r4
	((DmacDescriptor *)hw)->SRCADDR.reg = data;
    1210:	4a06      	ldr	r2, [pc, #24]	; (122c <_dma_set_data_amount+0x64>)
    1212:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1216:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	hri_dmacdescriptor_write_BTCNT_reg(&_descriptor_section[channel], amount);
    121a:	b289      	uxth	r1, r1
	((DmacDescriptor *)hw)->BTCNT.reg = data;
    121c:	4b03      	ldr	r3, [pc, #12]	; (122c <_dma_set_data_amount+0x64>)
    121e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    1222:	f8a0 1182 	strh.w	r1, [r0, #386]	; 0x182
}
    1226:	2000      	movs	r0, #0
    1228:	bc30      	pop	{r4, r5}
    122a:	4770      	bx	lr
    122c:	200000c0 	.word	0x200000c0

00001230 <_dma_enable_transaction>:
{
    1230:	b410      	push	{r4}
	((DmacDescriptor *)hw)->BTCTRL.reg |= DMAC_BTCTRL_VALID;
    1232:	4a0e      	ldr	r2, [pc, #56]	; (126c <_dma_enable_transaction+0x3c>)
    1234:	eb02 1200 	add.w	r2, r2, r0, lsl #4
    1238:	f8b2 3180 	ldrh.w	r3, [r2, #384]	; 0x180
    123c:	b29b      	uxth	r3, r3
    123e:	f043 0301 	orr.w	r3, r3, #1
    1242:	f8a2 3180 	strh.w	r3, [r2, #384]	; 0x180
	((Dmac *)hw)->Channel[submodule_index].CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    1246:	4c0a      	ldr	r4, [pc, #40]	; (1270 <_dma_enable_transaction+0x40>)
    1248:	1d03      	adds	r3, r0, #4
    124a:	011b      	lsls	r3, r3, #4
    124c:	58e2      	ldr	r2, [r4, r3]
    124e:	f042 0202 	orr.w	r2, r2, #2
    1252:	50e2      	str	r2, [r4, r3]
	if (software_trigger) {
    1254:	b129      	cbz	r1, 1262 <_dma_enable_transaction+0x32>
		hri_dmac_set_SWTRIGCTRL_reg(DMAC, 1 << channel);
    1256:	2301      	movs	r3, #1
    1258:	fa03 f000 	lsl.w	r0, r3, r0
	((Dmac *)hw)->SWTRIGCTRL.reg |= mask;
    125c:	6922      	ldr	r2, [r4, #16]
    125e:	4310      	orrs	r0, r2
    1260:	6120      	str	r0, [r4, #16]
}
    1262:	2000      	movs	r0, #0
    1264:	f85d 4b04 	ldr.w	r4, [sp], #4
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	200000c0 	.word	0x200000c0
    1270:	4100a000 	.word	0x4100a000

00001274 <_dma_get_channel_resource>:
	*resource = &_resources[channel];
    1274:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1278:	008a      	lsls	r2, r1, #2
    127a:	4b02      	ldr	r3, [pc, #8]	; (1284 <_dma_get_channel_resource+0x10>)
    127c:	4413      	add	r3, r2
    127e:	6003      	str	r3, [r0, #0]
}
    1280:	2000      	movs	r0, #0
    1282:	4770      	bx	lr
    1284:	200000c0 	.word	0x200000c0

00001288 <DMAC_0_Handler>:
/**
* \brief DMAC interrupt handler
*/
void DMAC_0_Handler(void)
{
    1288:	b508      	push	{r3, lr}
	_dmac_handler();
    128a:	4b01      	ldr	r3, [pc, #4]	; (1290 <DMAC_0_Handler+0x8>)
    128c:	4798      	blx	r3
    128e:	bd08      	pop	{r3, pc}
    1290:	00000f9d 	.word	0x00000f9d

00001294 <DMAC_1_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_1_Handler(void)
{
    1294:	b508      	push	{r3, lr}
	_dmac_handler();
    1296:	4b01      	ldr	r3, [pc, #4]	; (129c <DMAC_1_Handler+0x8>)
    1298:	4798      	blx	r3
    129a:	bd08      	pop	{r3, pc}
    129c:	00000f9d 	.word	0x00000f9d

000012a0 <DMAC_2_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_2_Handler(void)
{
    12a0:	b508      	push	{r3, lr}
	_dmac_handler();
    12a2:	4b01      	ldr	r3, [pc, #4]	; (12a8 <DMAC_2_Handler+0x8>)
    12a4:	4798      	blx	r3
    12a6:	bd08      	pop	{r3, pc}
    12a8:	00000f9d 	.word	0x00000f9d

000012ac <DMAC_3_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_3_Handler(void)
{
    12ac:	b508      	push	{r3, lr}
	_dmac_handler();
    12ae:	4b01      	ldr	r3, [pc, #4]	; (12b4 <DMAC_3_Handler+0x8>)
    12b0:	4798      	blx	r3
    12b2:	bd08      	pop	{r3, pc}
    12b4:	00000f9d 	.word	0x00000f9d

000012b8 <DMAC_4_Handler>:
}
/**
* \brief DMAC interrupt handler
*/
void DMAC_4_Handler(void)
{
    12b8:	b508      	push	{r3, lr}
	_dmac_handler();
    12ba:	4b01      	ldr	r3, [pc, #4]	; (12c0 <DMAC_4_Handler+0x8>)
    12bc:	4798      	blx	r3
    12be:	bd08      	pop	{r3, pc}
    12c0:	00000f9d 	.word	0x00000f9d

000012c4 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
    12c4:	b570      	push	{r4, r5, r6, lr}
    12c6:	b082      	sub	sp, #8
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
    12c8:	4b2a      	ldr	r3, [pc, #168]	; (1374 <_ext_irq_handler+0xb0>)
    12ca:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
    12cc:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
    12ce:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
    12d0:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
    12d2:	4b29      	ldr	r3, [pc, #164]	; (1378 <_ext_irq_handler+0xb4>)
    12d4:	6818      	ldr	r0, [r3, #0]
    12d6:	22ec      	movs	r2, #236	; 0xec
    12d8:	4928      	ldr	r1, [pc, #160]	; (137c <_ext_irq_handler+0xb8>)
    12da:	3000      	adds	r0, #0
    12dc:	bf18      	it	ne
    12de:	2001      	movne	r0, #1
    12e0:	4b27      	ldr	r3, [pc, #156]	; (1380 <_ext_irq_handler+0xbc>)
    12e2:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
    12e4:	f04f 35ff 	mov.w	r5, #4294967295

	while (flags) {
    12e8:	e035      	b.n	1356 <_ext_irq_handler+0x92>
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
    12ea:	4b26      	ldr	r3, [pc, #152]	; (1384 <_ext_irq_handler+0xc0>)
    12ec:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    12f0:	6875      	ldr	r5, [r6, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
    12f2:	f1b5 3fff 	cmp.w	r5, #4294967295
    12f6:	d003      	beq.n	1300 <_ext_irq_handler+0x3c>
				callback(pin);
    12f8:	4b1f      	ldr	r3, [pc, #124]	; (1378 <_ext_irq_handler+0xb4>)
    12fa:	681b      	ldr	r3, [r3, #0]
    12fc:	4628      	mov	r0, r5
    12fe:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
    1300:	2301      	movs	r3, #1
    1302:	40a3      	lsls	r3, r4
    1304:	9c01      	ldr	r4, [sp, #4]
    1306:	ea24 0403 	bic.w	r4, r4, r3
    130a:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
    130c:	9b01      	ldr	r3, [sp, #4]
    130e:	fa93 f4a3 	rbit	r4, r3
    1312:	fab4 f484 	clz	r4, r4
    1316:	b90b      	cbnz	r3, 131c <_ext_irq_handler+0x58>
    1318:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    131c:	f1b4 3fff 	cmp.w	r4, #4294967295
    1320:	d014      	beq.n	134c <_ext_irq_handler+0x88>
    1322:	2002      	movs	r0, #2
    1324:	2100      	movs	r1, #0
    1326:	e001      	b.n	132c <_ext_irq_handler+0x68>
					upper = middle - 1;
    1328:	3b01      	subs	r3, #1
    132a:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
    132c:	4281      	cmp	r1, r0
    132e:	d8e0      	bhi.n	12f2 <_ext_irq_handler+0x2e>
				middle = (upper + lower) >> 1;
    1330:	1843      	adds	r3, r0, r1
    1332:	f3c3 0347 	ubfx	r3, r3, #1, #8
    1336:	461e      	mov	r6, r3
				if (_map[middle].extint == pos) {
    1338:	4a12      	ldr	r2, [pc, #72]	; (1384 <_ext_irq_handler+0xc0>)
    133a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    133e:	42a2      	cmp	r2, r4
    1340:	d0d3      	beq.n	12ea <_ext_irq_handler+0x26>
				if (_map[middle].extint < pos) {
    1342:	42a2      	cmp	r2, r4
    1344:	daf0      	bge.n	1328 <_ext_irq_handler+0x64>
					lower = middle + 1;
    1346:	3301      	adds	r3, #1
    1348:	b2d9      	uxtb	r1, r3
    134a:	e7ef      	b.n	132c <_ext_irq_handler+0x68>
	return ((Eic *)hw)->INTFLAG.reg;
    134c:	4b09      	ldr	r3, [pc, #36]	; (1374 <_ext_irq_handler+0xb0>)
    134e:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
    1350:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
    1352:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
    1354:	615a      	str	r2, [r3, #20]
	while (flags) {
    1356:	9b01      	ldr	r3, [sp, #4]
    1358:	b14b      	cbz	r3, 136e <_ext_irq_handler+0xaa>
		pos = ffs(flags) - 1;
    135a:	9b01      	ldr	r3, [sp, #4]
    135c:	fa93 f4a3 	rbit	r4, r3
    1360:	fab4 f484 	clz	r4, r4
    1364:	2b00      	cmp	r3, #0
    1366:	d1d9      	bne.n	131c <_ext_irq_handler+0x58>
    1368:	f04f 34ff 	mov.w	r4, #4294967295
		while (-1 != pos) {
    136c:	e7d6      	b.n	131c <_ext_irq_handler+0x58>
	}
}
    136e:	b002      	add	sp, #8
    1370:	bd70      	pop	{r4, r5, r6, pc}
    1372:	bf00      	nop
    1374:	40002800 	.word	0x40002800
    1378:	20000640 	.word	0x20000640
    137c:	00002990 	.word	0x00002990
    1380:	00000e3d 	.word	0x00000e3d
    1384:	00002980 	.word	0x00002980

00001388 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
    1388:	4b32      	ldr	r3, [pc, #200]	; (1454 <_ext_irq_init+0xcc>)
    138a:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
    138c:	f013 0f01 	tst.w	r3, #1
    1390:	d120      	bne.n	13d4 <_ext_irq_init+0x4c>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1392:	4b30      	ldr	r3, [pc, #192]	; (1454 <_ext_irq_init+0xcc>)
    1394:	685b      	ldr	r3, [r3, #4]
    1396:	f013 0f03 	tst.w	r3, #3
    139a:	d1fa      	bne.n	1392 <_ext_irq_init+0xa>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
    139c:	4b2d      	ldr	r3, [pc, #180]	; (1454 <_ext_irq_init+0xcc>)
    139e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
    13a0:	f013 0f02 	tst.w	r3, #2
    13a4:	d00e      	beq.n	13c4 <_ext_irq_init+0x3c>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
    13a6:	4a2b      	ldr	r2, [pc, #172]	; (1454 <_ext_irq_init+0xcc>)
    13a8:	7813      	ldrb	r3, [r2, #0]
    13aa:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    13ae:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    13b0:	4b28      	ldr	r3, [pc, #160]	; (1454 <_ext_irq_init+0xcc>)
    13b2:	685b      	ldr	r3, [r3, #4]
    13b4:	f013 0f03 	tst.w	r3, #3
    13b8:	d1fa      	bne.n	13b0 <_ext_irq_init+0x28>
    13ba:	4b26      	ldr	r3, [pc, #152]	; (1454 <_ext_irq_init+0xcc>)
    13bc:	685b      	ldr	r3, [r3, #4]
    13be:	f013 0f02 	tst.w	r3, #2
    13c2:	d1fa      	bne.n	13ba <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
    13c4:	2201      	movs	r2, #1
    13c6:	4b23      	ldr	r3, [pc, #140]	; (1454 <_ext_irq_init+0xcc>)
    13c8:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    13ca:	4b22      	ldr	r3, [pc, #136]	; (1454 <_ext_irq_init+0xcc>)
    13cc:	685b      	ldr	r3, [r3, #4]
    13ce:	f013 0f03 	tst.w	r3, #3
    13d2:	d1fa      	bne.n	13ca <_ext_irq_init+0x42>
    13d4:	4b1f      	ldr	r3, [pc, #124]	; (1454 <_ext_irq_init+0xcc>)
    13d6:	685b      	ldr	r3, [r3, #4]
    13d8:	f013 0f01 	tst.w	r3, #1
    13dc:	d1fa      	bne.n	13d4 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
    13de:	4a1d      	ldr	r2, [pc, #116]	; (1454 <_ext_irq_init+0xcc>)
    13e0:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
    13e2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
    13e6:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    13e8:	4b1a      	ldr	r3, [pc, #104]	; (1454 <_ext_irq_init+0xcc>)
    13ea:	685b      	ldr	r3, [r3, #4]
    13ec:	f013 0f03 	tst.w	r3, #3
    13f0:	d1fa      	bne.n	13e8 <_ext_irq_init+0x60>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
    13f2:	4b18      	ldr	r3, [pc, #96]	; (1454 <_ext_irq_init+0xcc>)
    13f4:	2200      	movs	r2, #0
    13f6:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
    13f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    13fc:	6099      	str	r1, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
    13fe:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
    1400:	6319      	str	r1, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
    1402:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
    1404:	61da      	str	r2, [r3, #28]
    1406:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    140a:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
    140c:	781a      	ldrb	r2, [r3, #0]
    140e:	f042 0202 	orr.w	r2, r2, #2
    1412:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
    1414:	4b0f      	ldr	r3, [pc, #60]	; (1454 <_ext_irq_init+0xcc>)
    1416:	685b      	ldr	r3, [r3, #4]
    1418:	f013 0f03 	tst.w	r3, #3
    141c:	d1fa      	bne.n	1414 <_ext_irq_init+0x8c>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    141e:	4b0e      	ldr	r3, [pc, #56]	; (1458 <_ext_irq_init+0xd0>)
    1420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    1424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1428:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    142c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1430:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1434:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    143a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    143e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1442:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1446:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    144a:	601a      	str	r2, [r3, #0]
	callback = cb;
    144c:	4b03      	ldr	r3, [pc, #12]	; (145c <_ext_irq_init+0xd4>)
    144e:	6018      	str	r0, [r3, #0]
}
    1450:	2000      	movs	r0, #0
    1452:	4770      	bx	lr
    1454:	40002800 	.word	0x40002800
    1458:	e000e100 	.word	0xe000e100
    145c:	20000640 	.word	0x20000640

00001460 <_ext_irq_enable>:
{
    1460:	b410      	push	{r4}
	uint8_t i      = 0;
    1462:	2300      	movs	r3, #0
	for (; i < ARRAY_SIZE(_map); i++) {
    1464:	2b01      	cmp	r3, #1
    1466:	d80d      	bhi.n	1484 <_ext_irq_enable+0x24>
		if (_map[i].pin == pin) {
    1468:	461c      	mov	r4, r3
    146a:	4a11      	ldr	r2, [pc, #68]	; (14b0 <_ext_irq_enable+0x50>)
    146c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    1470:	6852      	ldr	r2, [r2, #4]
    1472:	4282      	cmp	r2, r0
    1474:	d002      	beq.n	147c <_ext_irq_enable+0x1c>
	for (; i < ARRAY_SIZE(_map); i++) {
    1476:	3301      	adds	r3, #1
    1478:	b2db      	uxtb	r3, r3
    147a:	e7f3      	b.n	1464 <_ext_irq_enable+0x4>
			extint = _map[i].extint;
    147c:	4b0c      	ldr	r3, [pc, #48]	; (14b0 <_ext_irq_enable+0x50>)
    147e:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
			break;
    1482:	e000      	b.n	1486 <_ext_irq_enable+0x26>
	uint8_t extint = INVALID_EXTINT_NUMBER;
    1484:	22ff      	movs	r2, #255	; 0xff
	if (INVALID_EXTINT_NUMBER == extint) {
    1486:	2aff      	cmp	r2, #255	; 0xff
    1488:	d00f      	beq.n	14aa <_ext_irq_enable+0x4a>
	if (enable) {
    148a:	b941      	cbnz	r1, 149e <_ext_irq_enable+0x3e>
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
    148c:	2301      	movs	r3, #1
    148e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
    1490:	4a08      	ldr	r2, [pc, #32]	; (14b4 <_ext_irq_enable+0x54>)
    1492:	60d3      	str	r3, [r2, #12]
	((Eic *)hw)->INTFLAG.reg = mask;
    1494:	6153      	str	r3, [r2, #20]
	return ERR_NONE;
    1496:	2000      	movs	r0, #0
}
    1498:	f85d 4b04 	ldr.w	r4, [sp], #4
    149c:	4770      	bx	lr
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
    149e:	2301      	movs	r3, #1
    14a0:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
    14a2:	4a04      	ldr	r2, [pc, #16]	; (14b4 <_ext_irq_enable+0x54>)
    14a4:	6113      	str	r3, [r2, #16]
	return ERR_NONE;
    14a6:	2000      	movs	r0, #0
    14a8:	e7f6      	b.n	1498 <_ext_irq_enable+0x38>
		return -1;
    14aa:	f04f 30ff 	mov.w	r0, #4294967295
    14ae:	e7f3      	b.n	1498 <_ext_irq_enable+0x38>
    14b0:	00002980 	.word	0x00002980
    14b4:	40002800 	.word	0x40002800

000014b8 <EIC_12_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_12_Handler(void)
{
    14b8:	b508      	push	{r3, lr}
	_ext_irq_handler();
    14ba:	4b01      	ldr	r3, [pc, #4]	; (14c0 <EIC_12_Handler+0x8>)
    14bc:	4798      	blx	r3
    14be:	bd08      	pop	{r3, pc}
    14c0:	000012c5 	.word	0x000012c5

000014c4 <EIC_13_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_13_Handler(void)
{
    14c4:	b508      	push	{r3, lr}
	_ext_irq_handler();
    14c6:	4b01      	ldr	r3, [pc, #4]	; (14cc <EIC_13_Handler+0x8>)
    14c8:	4798      	blx	r3
    14ca:	bd08      	pop	{r3, pc}
    14cc:	000012c5 	.word	0x000012c5

000014d0 <_event_system_init>:
 */
int32_t _event_system_init(void)
{
	uint8_t i;
	/* configure user multiplexers */
	for (i = 0; i < EVSYS_USERS; i++) {
    14d0:	2300      	movs	r3, #0
    14d2:	e008      	b.n	14e6 <_event_system_init+0x16>
		hri_evsys_write_USER_reg(EVSYS, i, user_mux_confs[i]);
    14d4:	4a15      	ldr	r2, [pc, #84]	; (152c <_event_system_init+0x5c>)
    14d6:	5cd0      	ldrb	r0, [r2, r3]
}

static inline void hri_evsys_write_USER_reg(const void *const hw, uint8_t index, hri_evsys_user_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->USER[index].reg = data;
    14d8:	f103 0148 	add.w	r1, r3, #72	; 0x48
    14dc:	4a14      	ldr	r2, [pc, #80]	; (1530 <_event_system_init+0x60>)
    14de:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (i = 0; i < EVSYS_USERS; i++) {
    14e2:	3301      	adds	r3, #1
    14e4:	b2db      	uxtb	r3, r3
    14e6:	2b42      	cmp	r3, #66	; 0x42
    14e8:	d9f4      	bls.n	14d4 <_event_system_init+0x4>
    14ea:	2300      	movs	r3, #0
	}

	/* configure channels */
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    14ec:	2b1f      	cmp	r3, #31
    14ee:	d81b      	bhi.n	1528 <_event_system_init+0x58>
{
    14f0:	b410      	push	{r4}
		hri_evsys_write_CHANNEL_reg(EVSYS, i, channel_confs[i]);
    14f2:	4a0e      	ldr	r2, [pc, #56]	; (152c <_event_system_init+0x5c>)
    14f4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
    14f8:	f8b1 4044 	ldrh.w	r4, [r1, #68]	; 0x44

static inline void hri_evsys_write_CHANNEL_reg(const void *const hw, uint8_t submodule_index,
                                               hri_evsys_channel_reg_t data)
{
	EVSYS_CRITICAL_SECTION_ENTER();
	((Evsys *)hw)->Channel[submodule_index].CHANNEL.reg = data;
    14fc:	490c      	ldr	r1, [pc, #48]	; (1530 <_event_system_init+0x60>)
    14fe:	1d18      	adds	r0, r3, #4
    1500:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
		hri_evsys_write_CHINTEN_reg(EVSYS, i, interrupt_cfg[i]);
    1504:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1508:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
	((Evsys *)hw)->Channel[submodule_index].CHINTENSET.reg = data;
    150c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    1510:	714a      	strb	r2, [r1, #5]
	((Evsys *)hw)->Channel[submodule_index].CHINTENCLR.reg = ~data;
    1512:	43d2      	mvns	r2, r2
    1514:	b2d2      	uxtb	r2, r2
    1516:	710a      	strb	r2, [r1, #4]
	for (i = 0; i < EVSYS_CHANNELS; i++) {
    1518:	3301      	adds	r3, #1
    151a:	b2db      	uxtb	r3, r3
    151c:	2b1f      	cmp	r3, #31
    151e:	d9e8      	bls.n	14f2 <_event_system_init+0x22>
	}

	return ERR_NONE;
}
    1520:	2000      	movs	r0, #0
    1522:	f85d 4b04 	ldr.w	r4, [sp], #4
    1526:	4770      	bx	lr
    1528:	2000      	movs	r0, #0
    152a:	4770      	bx	lr
    152c:	000029a8 	.word	0x000029a8
    1530:	4100e000 	.word	0x4100e000

00001534 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
    1534:	f010 0f01 	tst.w	r0, #1
    1538:	d008      	beq.n	154c <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    153a:	4a17      	ldr	r2, [pc, #92]	; (1598 <_gclk_init_generators_by_fref+0x64>)
    153c:	4b17      	ldr	r3, [pc, #92]	; (159c <_gclk_init_generators_by_fref+0x68>)
    153e:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1540:	4b16      	ldr	r3, [pc, #88]	; (159c <_gclk_init_generators_by_fref+0x68>)
    1542:	685a      	ldr	r2, [r3, #4]
    1544:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1548:	421a      	tst	r2, r3
    154a:	d1f9      	bne.n	1540 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
    154c:	f010 0f02 	tst.w	r0, #2
    1550:	d008      	beq.n	1564 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1552:	4a13      	ldr	r2, [pc, #76]	; (15a0 <_gclk_init_generators_by_fref+0x6c>)
    1554:	4b11      	ldr	r3, [pc, #68]	; (159c <_gclk_init_generators_by_fref+0x68>)
    1556:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1558:	4b10      	ldr	r3, [pc, #64]	; (159c <_gclk_init_generators_by_fref+0x68>)
    155a:	685a      	ldr	r2, [r3, #4]
    155c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1560:	421a      	tst	r2, r3
    1562:	d1f9      	bne.n	1558 <_gclk_init_generators_by_fref+0x24>
		        | (CONF_GCLK_GENERATOR_1_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_1_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_2_CONFIG == 1
	if (bm & (1ul << 2)) {
    1564:	f010 0f04 	tst.w	r0, #4
    1568:	d008      	beq.n	157c <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    156a:	4a0e      	ldr	r2, [pc, #56]	; (15a4 <_gclk_init_generators_by_fref+0x70>)
    156c:	4b0b      	ldr	r3, [pc, #44]	; (159c <_gclk_init_generators_by_fref+0x68>)
    156e:	629a      	str	r2, [r3, #40]	; 0x28
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1570:	4b0a      	ldr	r3, [pc, #40]	; (159c <_gclk_init_generators_by_fref+0x68>)
    1572:	685a      	ldr	r2, [r3, #4]
    1574:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1578:	421a      	tst	r2, r3
    157a:	d1f9      	bne.n	1570 <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
    157c:	f010 0f08 	tst.w	r0, #8
    1580:	d008      	beq.n	1594 <_gclk_init_generators_by_fref+0x60>
	((Gclk *)hw)->GENCTRL[index].reg = data;
    1582:	4a09      	ldr	r2, [pc, #36]	; (15a8 <_gclk_init_generators_by_fref+0x74>)
    1584:	4b05      	ldr	r3, [pc, #20]	; (159c <_gclk_init_generators_by_fref+0x68>)
    1586:	62da      	str	r2, [r3, #44]	; 0x2c
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
    1588:	4b04      	ldr	r3, [pc, #16]	; (159c <_gclk_init_generators_by_fref+0x68>)
    158a:	685a      	ldr	r2, [r3, #4]
    158c:	f643 73fd 	movw	r3, #16381	; 0x3ffd
    1590:	421a      	tst	r2, r3
    1592:	d1f9      	bne.n	1588 <_gclk_init_generators_by_fref+0x54>
    1594:	4770      	bx	lr
    1596:	bf00      	nop
    1598:	00012107 	.word	0x00012107
    159c:	40001c00 	.word	0x40001c00
    15a0:	00022108 	.word	0x00022108
    15a4:	000c2101 	.word	0x000c2101
    15a8:	00012108 	.word	0x00012108

000015ac <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
    15ac:	2201      	movs	r2, #1
    15ae:	4b01      	ldr	r3, [pc, #4]	; (15b4 <_mclk_init+0x8>)
    15b0:	715a      	strb	r2, [r3, #5]
    15b2:	4770      	bx	lr
    15b4:	40000800 	.word	0x40000800

000015b8 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <_osc32kctrl_init_sources+0x10>)
    15ba:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
    15bc:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
    15c0:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
    15c2:	2201      	movs	r2, #1
    15c4:	741a      	strb	r2, [r3, #16]
    15c6:	4770      	bx	lr
    15c8:	40001400 	.word	0x40001400

000015cc <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
    15cc:	4a04      	ldr	r2, [pc, #16]	; (15e0 <_oscctrl_init_sources+0x14>)
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <_oscctrl_init_sources+0x18>)
    15d0:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
    15d2:	4b04      	ldr	r3, [pc, #16]	; (15e4 <_oscctrl_init_sources+0x18>)
    15d4:	691b      	ldr	r3, [r3, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
    15d6:	f013 0f02 	tst.w	r3, #2
    15da:	d0fa      	beq.n	15d2 <_oscctrl_init_sources+0x6>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
    15dc:	4770      	bx	lr
    15de:	bf00      	nop
    15e0:	03002646 	.word	0x03002646
    15e4:	40001000 	.word	0x40001000

000015e8 <_oscctrl_init_referenced_generators>:
	((Gclk *)hw)->PCHCTRL[index].reg = data;
    15e8:	2242      	movs	r2, #66	; 0x42
    15ea:	4b23      	ldr	r3, [pc, #140]	; (1678 <_oscctrl_init_referenced_generators+0x90>)
    15ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    15f0:	2277      	movs	r2, #119	; 0x77
    15f2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    15f6:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    15f8:	4b20      	ldr	r3, [pc, #128]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    15fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    15fc:	f013 0f06 	tst.w	r3, #6
    1600:	d1fa      	bne.n	15f8 <_oscctrl_init_referenced_generators+0x10>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1602:	4b1e      	ldr	r3, [pc, #120]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1604:	f44f 3284 	mov.w	r2, #67584	; 0x10800
    1608:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    160a:	2202      	movs	r2, #2
    160c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1610:	4b1a      	ldr	r3, [pc, #104]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1614:	f013 0f02 	tst.w	r3, #2
    1618:	d1fa      	bne.n	1610 <_oscctrl_init_referenced_generators+0x28>
    161a:	2242      	movs	r2, #66	; 0x42
    161c:	4b16      	ldr	r3, [pc, #88]	; (1678 <_oscctrl_init_referenced_generators+0x90>)
    161e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
    1622:	222f      	movs	r2, #47	; 0x2f
    1624:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
    1628:	649a      	str	r2, [r3, #72]	; 0x48
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    162a:	4b14      	ldr	r3, [pc, #80]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    162e:	f013 0f06 	tst.w	r3, #6
    1632:	d1fa      	bne.n	162a <_oscctrl_init_referenced_generators+0x42>
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
    1634:	4b11      	ldr	r3, [pc, #68]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1636:	f44f 6200 	mov.w	r2, #2048	; 0x800
    163a:	64da      	str	r2, [r3, #76]	; 0x4c
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
    163c:	2202      	movs	r2, #2
    163e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
    1642:	4b0e      	ldr	r3, [pc, #56]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1646:	f013 0f02 	tst.w	r3, #2
    164a:	d1fa      	bne.n	1642 <_oscctrl_init_referenced_generators+0x5a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    164c:	4b0b      	ldr	r3, [pc, #44]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
    1650:	f013 0f01 	tst.w	r3, #1
    1654:	d104      	bne.n	1660 <_oscctrl_init_referenced_generators+0x78>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    1656:	4b09      	ldr	r3, [pc, #36]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    165a:	f013 0f02 	tst.w	r3, #2
    165e:	d0f5      	beq.n	164c <_oscctrl_init_referenced_generators+0x64>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
    1660:	4b06      	ldr	r3, [pc, #24]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    1662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
#endif
#endif

#if CONF_FDPLL1_CONFIG == 1
#if CONF_FDPLL1_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 1) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 1)))
    1664:	f013 0f01 	tst.w	r3, #1
    1668:	d104      	bne.n	1674 <_oscctrl_init_referenced_generators+0x8c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
    166a:	4b04      	ldr	r3, [pc, #16]	; (167c <_oscctrl_init_referenced_generators+0x94>)
    166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    166e:	f013 0f02 	tst.w	r3, #2
    1672:	d0f5      	beq.n	1660 <_oscctrl_init_referenced_generators+0x78>
    1674:	4770      	bx	lr
    1676:	bf00      	nop
    1678:	40001c00 	.word	0x40001c00
    167c:	40001000 	.word	0x40001000

00001680 <_pcc_dma_transfer_done>:
/*!< Pointer to hpl device */
static struct _camera_async_device *_pcc_dev = NULL;

struct _dma_resource *resource;
static void           _pcc_dma_transfer_done(struct _dma_resource *resource)
{
    1680:	b508      	push	{r3, lr}
	struct _camera_async_device *dev = (struct _camera_async_device *)resource->back;
    1682:	6880      	ldr	r0, [r0, #8]
	dev->capture_done(dev, 0);
    1684:	6803      	ldr	r3, [r0, #0]
    1686:	2100      	movs	r1, #0
    1688:	4798      	blx	r3
    168a:	bd08      	pop	{r3, pc}

0000168c <_camera_async_init>:
}

void _camera_async_init(struct _camera_async_device *const device, void *const hw)
{
    168c:	b538      	push	{r3, r4, r5, lr}
    168e:	4604      	mov	r4, r0
	uint32_t data = 0;
	device->hw    = hw;
    1690:	60c1      	str	r1, [r0, #12]
}

static inline void hri_pcc_write_MR_reg(const void *const hw, hri_pcc_mr_reg_t data)
{
	PCC_CRITICAL_SECTION_ENTER();
	((Pcc *)hw)->MR.reg = data;
    1692:	4b07      	ldr	r3, [pc, #28]	; (16b0 <_camera_async_init+0x24>)
    1694:	600b      	str	r3, [r1, #0]
	data = PCC_MR_CID(0x3) | PCC_MR_ISIZE(CONF_PCC_ISIZE) | CONF_PCC_FRSTS << PCC_MR_FRSTS_Pos
	       | CONF_PCC_HALFS << PCC_MR_HALFS_Pos | CONF_PCC_ALWYS << PCC_MR_ALWYS_Pos
	       | CONF_PCC_SCALE << PCC_MR_SCALE_Pos | PCC_MR_DSIZE(CONF_PCC_DSIZE);
	hri_pcc_write_MR_reg(device->hw, data);

	_pcc_dev = device;
    1696:	4b07      	ldr	r3, [pc, #28]	; (16b4 <_camera_async_init+0x28>)
    1698:	6018      	str	r0, [r3, #0]

	_dma_get_channel_resource(&resource, CONF_PCC_DMA_CHANNEL);
    169a:	4d07      	ldr	r5, [pc, #28]	; (16b8 <_camera_async_init+0x2c>)
    169c:	2100      	movs	r1, #0
    169e:	4628      	mov	r0, r5
    16a0:	4b06      	ldr	r3, [pc, #24]	; (16bc <_camera_async_init+0x30>)
    16a2:	4798      	blx	r3
	resource->back                 = device;
    16a4:	682b      	ldr	r3, [r5, #0]
    16a6:	609c      	str	r4, [r3, #8]
	resource->dma_cb.transfer_done = _pcc_dma_transfer_done;
    16a8:	4a05      	ldr	r2, [pc, #20]	; (16c0 <_camera_async_init+0x34>)
    16aa:	601a      	str	r2, [r3, #0]
    16ac:	bd38      	pop	{r3, r4, r5, pc}
    16ae:	bf00      	nop
    16b0:	c0000020 	.word	0xc0000020
    16b4:	20000644 	.word	0x20000644
    16b8:	20025ef4 	.word	0x20025ef4
    16bc:	00001275 	.word	0x00001275
    16c0:	00001681 	.word	0x00001681

000016c4 <_camera_async_enable>:
	_camera_async_disable(device->hw);
}

void _camera_async_enable(struct _camera_async_device *const device)
{
	hri_pcc_set_MR_reg(device->hw, PCC_MR_PCEN);
    16c4:	68c2      	ldr	r2, [r0, #12]
	((Pcc *)hw)->MR.reg |= mask;
    16c6:	6813      	ldr	r3, [r2, #0]
    16c8:	f043 0301 	orr.w	r3, r3, #1
    16cc:	6013      	str	r3, [r2, #0]
    16ce:	4770      	bx	lr

000016d0 <_camera_async_capture_start>:
	hri_pcc_write_MR_reg(device->hw, 0);
}

void _camera_async_capture_start(struct _camera_async_device *const device, uint32_t ch, uint32_t *buf)
{
	if (ch > CAMERA_CHN_NUM_MAX) {
    16d0:	2901      	cmp	r1, #1
    16d2:	d900      	bls.n	16d6 <_camera_async_capture_start+0x6>
    16d4:	4770      	bx	lr
{
    16d6:	b538      	push	{r3, r4, r5, lr}
    16d8:	4614      	mov	r4, r2
    16da:	4605      	mov	r5, r0
		return;
	}
	_dma_set_irq_state(CONF_PCC_DMA_CHANNEL, DMA_TRANSFER_COMPLETE_CB, true);
    16dc:	2201      	movs	r2, #1
    16de:	2100      	movs	r1, #0
    16e0:	4608      	mov	r0, r1
    16e2:	4b0c      	ldr	r3, [pc, #48]	; (1714 <_camera_async_capture_start+0x44>)
    16e4:	4798      	blx	r3

	_dma_set_source_address(CONF_PCC_DMA_CHANNEL, (void *)&(((Pcc *)device->hw)->RHR.reg));
    16e6:	68e9      	ldr	r1, [r5, #12]
    16e8:	3114      	adds	r1, #20
    16ea:	2000      	movs	r0, #0
    16ec:	4b0a      	ldr	r3, [pc, #40]	; (1718 <_camera_async_capture_start+0x48>)
    16ee:	4798      	blx	r3
	_dma_set_destination_address(CONF_PCC_DMA_CHANNEL, buf);
    16f0:	4621      	mov	r1, r4
    16f2:	2000      	movs	r0, #0
    16f4:	4b09      	ldr	r3, [pc, #36]	; (171c <_camera_async_capture_start+0x4c>)
    16f6:	4798      	blx	r3
	_dma_srcinc_enable(CONF_PCC_DMA_CHANNEL, false);
    16f8:	2100      	movs	r1, #0
    16fa:	4608      	mov	r0, r1
    16fc:	4b08      	ldr	r3, [pc, #32]	; (1720 <_camera_async_capture_start+0x50>)
    16fe:	4798      	blx	r3
	_dma_set_data_amount(CONF_PCC_DMA_CHANNEL, CONF_PCC_DMA_FRAME_SIZE);
    1700:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    1704:	2000      	movs	r0, #0
    1706:	4b07      	ldr	r3, [pc, #28]	; (1724 <_camera_async_capture_start+0x54>)
    1708:	4798      	blx	r3
	_dma_enable_transaction(CONF_PCC_DMA_CHANNEL, false);
    170a:	2100      	movs	r1, #0
    170c:	4608      	mov	r0, r1
    170e:	4b06      	ldr	r3, [pc, #24]	; (1728 <_camera_async_capture_start+0x58>)
    1710:	4798      	blx	r3
    1712:	bd38      	pop	{r3, r4, r5, pc}
    1714:	00001129 	.word	0x00001129
    1718:	00001191 	.word	0x00001191
    171c:	0000117d 	.word	0x0000117d
    1720:	000011a5 	.word	0x000011a5
    1724:	000011c9 	.word	0x000011c9
    1728:	00001231 	.word	0x00001231

0000172c <PCC_Handler>:
}

void PCC_Handler(void)
{
    172c:	b500      	push	{lr}
    172e:	b083      	sub	sp, #12
	void *const       hw       = _pcc_dev->hw;
    1730:	4b08      	ldr	r3, [pc, #32]	; (1754 <PCC_Handler+0x28>)
    1732:	6818      	ldr	r0, [r3, #0]
    1734:	68c3      	ldr	r3, [r0, #12]
	return ((Pcc *)hw)->ISR.reg;
    1736:	691a      	ldr	r2, [r3, #16]
	volatile uint32_t int_mask = hri_pcc_read_ISR_reg(hw);
    1738:	9201      	str	r2, [sp, #4]
	((Pcc *)hw)->IDR.reg = PCC_IMR_DRDY;
    173a:	2201      	movs	r2, #1
    173c:	609a      	str	r2, [r3, #8]
	hri_pcc_clear_IMR_DRDY_bit(hw);

	if (int_mask & PCC_ISR_DRDY) {
    173e:	9b01      	ldr	r3, [sp, #4]
    1740:	f013 0f01 	tst.w	r3, #1
    1744:	d003      	beq.n	174e <PCC_Handler+0x22>
		if (_pcc_dev->capture_done) {
    1746:	6803      	ldr	r3, [r0, #0]
    1748:	b10b      	cbz	r3, 174e <PCC_Handler+0x22>
			_pcc_dev->capture_done(_pcc_dev, 0);
    174a:	2100      	movs	r1, #0
    174c:	4798      	blx	r3
		}
	} else {
		return;
	}
}
    174e:	b003      	add	sp, #12
    1750:	f85d fb04 	ldr.w	pc, [sp], #4
    1754:	20000644 	.word	0x20000644

00001758 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
    1758:	b500      	push	{lr}
    175a:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
    175c:	4b0d      	ldr	r3, [pc, #52]	; (1794 <RAMECC_Handler+0x3c>)
    175e:	789b      	ldrb	r3, [r3, #2]
    1760:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
    1762:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
    1764:	9b01      	ldr	r3, [sp, #4]
    1766:	f013 0f02 	tst.w	r3, #2
    176a:	d006      	beq.n	177a <RAMECC_Handler+0x22>
    176c:	4b0a      	ldr	r3, [pc, #40]	; (1798 <RAMECC_Handler+0x40>)
    176e:	681b      	ldr	r3, [r3, #0]
    1770:	b11b      	cbz	r3, 177a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1772:	4a08      	ldr	r2, [pc, #32]	; (1794 <RAMECC_Handler+0x3c>)
    1774:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1776:	4798      	blx	r3
    1778:	e009      	b.n	178e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    177a:	9b01      	ldr	r3, [sp, #4]
    177c:	f013 0f01 	tst.w	r3, #1
    1780:	d005      	beq.n	178e <RAMECC_Handler+0x36>
    1782:	4b05      	ldr	r3, [pc, #20]	; (1798 <RAMECC_Handler+0x40>)
    1784:	685b      	ldr	r3, [r3, #4]
    1786:	b113      	cbz	r3, 178e <RAMECC_Handler+0x36>
    1788:	4a02      	ldr	r2, [pc, #8]	; (1794 <RAMECC_Handler+0x3c>)
    178a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    178c:	4798      	blx	r3
	} else {
		return;
	}
}
    178e:	b003      	add	sp, #12
    1790:	f85d fb04 	ldr.w	pc, [sp], #4
    1794:	41020000 	.word	0x41020000
    1798:	20025ef8 	.word	0x20025ef8

0000179c <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    179c:	b470      	push	{r4, r5, r6}
    179e:	b089      	sub	sp, #36	; 0x24
    17a0:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    17a2:	466c      	mov	r4, sp
    17a4:	4d0c      	ldr	r5, [pc, #48]	; (17d8 <_sercom_get_hardware_index+0x3c>)
    17a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    17a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    17aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    17ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17b2:	2000      	movs	r0, #0
    17b4:	2807      	cmp	r0, #7
    17b6:	d80a      	bhi.n	17ce <_sercom_get_hardware_index+0x32>
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    17b8:	ab08      	add	r3, sp, #32
    17ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    17be:	f853 3c20 	ldr.w	r3, [r3, #-32]
    17c2:	42b3      	cmp	r3, r6
    17c4:	d001      	beq.n	17ca <_sercom_get_hardware_index+0x2e>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    17c6:	3001      	adds	r0, #1
    17c8:	e7f4      	b.n	17b4 <_sercom_get_hardware_index+0x18>
			return i;
    17ca:	b2c0      	uxtb	r0, r0
    17cc:	e000      	b.n	17d0 <_sercom_get_hardware_index+0x34>
		}
	}
	return 0;
    17ce:	2000      	movs	r0, #0
}
    17d0:	b009      	add	sp, #36	; 0x24
    17d2:	bc70      	pop	{r4, r5, r6}
    17d4:	4770      	bx	lr
    17d6:	bf00      	nop
    17d8:	00002aac 	.word	0x00002aac

000017dc <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
    17dc:	b510      	push	{r4, lr}
	void *hw = device->hw;
    17de:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    17e0:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    17e2:	f013 0f01 	tst.w	r3, #1
    17e6:	d003      	beq.n	17f0 <_sercom_usart_interrupt_handler+0x14>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    17e8:	7da3      	ldrb	r3, [r4, #22]
    17ea:	f013 0f01 	tst.w	r3, #1
    17ee:	d112      	bne.n	1816 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    17f0:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    17f2:	f013 0f02 	tst.w	r3, #2
    17f6:	d003      	beq.n	1800 <_sercom_usart_interrupt_handler+0x24>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    17f8:	7da3      	ldrb	r3, [r4, #22]
    17fa:	f013 0f02 	tst.w	r3, #2
    17fe:	d10f      	bne.n	1820 <_sercom_usart_interrupt_handler+0x44>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1800:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1802:	f013 0f04 	tst.w	r3, #4
    1806:	d015      	beq.n	1834 <_sercom_usart_interrupt_handler+0x58>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    1808:	8b63      	ldrh	r3, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
    180a:	f003 0337 	and.w	r3, r3, #55	; 0x37
    180e:	b163      	cbz	r3, 182a <_sercom_usart_interrupt_handler+0x4e>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1810:	23ff      	movs	r3, #255	; 0xff
    1812:	8363      	strh	r3, [r4, #26]
    1814:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1816:	2301      	movs	r3, #1
    1818:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
    181a:	6803      	ldr	r3, [r0, #0]
    181c:	4798      	blx	r3
    181e:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1820:	2302      	movs	r3, #2
    1822:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
    1824:	6883      	ldr	r3, [r0, #8]
    1826:	4798      	blx	r3
    1828:	bd10      	pop	{r4, pc}
		       | SERCOM_USART_STATUS_ISF | SERCOM_USART_STATUS_COLL)) {
			hri_sercomusart_clear_STATUS_reg(hw, SERCOM_USART_STATUS_MASK);
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    182a:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    182c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    182e:	b2c9      	uxtb	r1, r1
    1830:	4798      	blx	r3
    1832:	bd10      	pop	{r4, pc}
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
    1834:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
    1836:	09db      	lsrs	r3, r3, #7
    1838:	d100      	bne.n	183c <_sercom_usart_interrupt_handler+0x60>
    183a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
    183c:	2380      	movs	r3, #128	; 0x80
    183e:	7623      	strb	r3, [r4, #24]
		uint32_t status;

		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
    1840:	68c3      	ldr	r3, [r0, #12]
    1842:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
    1844:	8b63      	ldrh	r3, [r4, #26]
    1846:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1848:	8363      	strh	r3, [r4, #26]
    184a:	e7f6      	b.n	183a <_sercom_usart_interrupt_handler+0x5e>

0000184c <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM1) {
    184c:	4b03      	ldr	r3, [pc, #12]	; (185c <_sercom_init_irq_param+0x10>)
    184e:	4298      	cmp	r0, r3
    1850:	d000      	beq.n	1854 <_sercom_init_irq_param+0x8>
    1852:	4770      	bx	lr
		_sercom1_dev = (struct _usart_async_device *)dev;
    1854:	4b02      	ldr	r3, [pc, #8]	; (1860 <_sercom_init_irq_param+0x14>)
    1856:	6019      	str	r1, [r3, #0]
	}
}
    1858:	e7fb      	b.n	1852 <_sercom_init_irq_param+0x6>
    185a:	bf00      	nop
    185c:	40003400 	.word	0x40003400
    1860:	20000648 	.word	0x20000648

00001864 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1864:	b508      	push	{r3, lr}
	return SERCOM0_0_IRQn + (_sercom_get_hardware_index(hw) << 2);
    1866:	4b04      	ldr	r3, [pc, #16]	; (1878 <_sercom_get_irq_num+0x14>)
    1868:	4798      	blx	r3
    186a:	0080      	lsls	r0, r0, #2
    186c:	b2c0      	uxtb	r0, r0
    186e:	302e      	adds	r0, #46	; 0x2e
}
    1870:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
    1874:	bd08      	pop	{r3, pc}
    1876:	bf00      	nop
    1878:	0000179d 	.word	0x0000179d

0000187c <_get_sercom_index>:
{
    187c:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    187e:	4b0c      	ldr	r3, [pc, #48]	; (18b0 <_get_sercom_index+0x34>)
    1880:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1882:	2300      	movs	r3, #0
    1884:	b143      	cbz	r3, 1898 <_get_sercom_index+0x1c>
	ASSERT(false);
    1886:	f240 226b 	movw	r2, #619	; 0x26b
    188a:	490a      	ldr	r1, [pc, #40]	; (18b4 <_get_sercom_index+0x38>)
    188c:	2000      	movs	r0, #0
    188e:	4b0a      	ldr	r3, [pc, #40]	; (18b8 <_get_sercom_index+0x3c>)
    1890:	4798      	blx	r3
	return 0;
    1892:	2300      	movs	r3, #0
}
    1894:	4618      	mov	r0, r3
    1896:	bd08      	pop	{r3, pc}
		if (_usarts[i].number == sercom_offset) {
    1898:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    189c:	00d1      	lsls	r1, r2, #3
    189e:	4a07      	ldr	r2, [pc, #28]	; (18bc <_get_sercom_index+0x40>)
    18a0:	440a      	add	r2, r1
    18a2:	f892 2020 	ldrb.w	r2, [r2, #32]
    18a6:	4290      	cmp	r0, r2
    18a8:	d0f4      	beq.n	1894 <_get_sercom_index+0x18>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    18aa:	3301      	adds	r3, #1
    18ac:	b2db      	uxtb	r3, r3
    18ae:	e7e9      	b.n	1884 <_get_sercom_index+0x8>
    18b0:	0000179d 	.word	0x0000179d
    18b4:	00002b20 	.word	0x00002b20
    18b8:	00000e3d 	.word	0x00000e3d
    18bc:	00002aac 	.word	0x00002aac

000018c0 <_usart_init>:
{
    18c0:	b538      	push	{r3, r4, r5, lr}
    18c2:	4604      	mov	r4, r0
	uint8_t i = _get_sercom_index(hw);
    18c4:	4b3c      	ldr	r3, [pc, #240]	; (19b8 <_usart_init+0xf8>)
    18c6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
    18c8:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
    18ca:	f013 0f01 	tst.w	r3, #1
    18ce:	d122      	bne.n	1916 <_usart_init+0x56>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
    18d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    18d4:	00da      	lsls	r2, r3, #3
    18d6:	4b39      	ldr	r3, [pc, #228]	; (19bc <_usart_init+0xfc>)
    18d8:	4413      	add	r3, r2
    18da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    18dc:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18e0:	69e3      	ldr	r3, [r4, #28]
    18e2:	f013 0f03 	tst.w	r3, #3
    18e6:	d1fb      	bne.n	18e0 <_usart_init+0x20>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    18e8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    18ea:	f013 0f02 	tst.w	r3, #2
    18ee:	d00b      	beq.n	1908 <_usart_init+0x48>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    18f0:	6823      	ldr	r3, [r4, #0]
    18f2:	f023 0302 	bic.w	r3, r3, #2
    18f6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    18f8:	69e3      	ldr	r3, [r4, #28]
    18fa:	f013 0f03 	tst.w	r3, #3
    18fe:	d1fb      	bne.n	18f8 <_usart_init+0x38>
    1900:	69e3      	ldr	r3, [r4, #28]
    1902:	f013 0f02 	tst.w	r3, #2
    1906:	d1fb      	bne.n	1900 <_usart_init+0x40>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
    1908:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->USART.CTRLA.reg = data;
    190c:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    190e:	69e3      	ldr	r3, [r4, #28]
    1910:	f013 0f03 	tst.w	r3, #3
    1914:	d1fb      	bne.n	190e <_usart_init+0x4e>
    1916:	69e3      	ldr	r3, [r4, #28]
    1918:	f013 0f01 	tst.w	r3, #1
    191c:	d1fb      	bne.n	1916 <_usart_init+0x56>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    191e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1922:	00da      	lsls	r2, r3, #3
    1924:	4b25      	ldr	r3, [pc, #148]	; (19bc <_usart_init+0xfc>)
    1926:	4413      	add	r3, r2
    1928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	((Sercom *)hw)->USART.CTRLA.reg = data;
    192a:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    192c:	69e3      	ldr	r3, [r4, #28]
    192e:	f013 0f03 	tst.w	r3, #3
    1932:	d1fb      	bne.n	192c <_usart_init+0x6c>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    1934:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1938:	00da      	lsls	r2, r3, #3
    193a:	4b20      	ldr	r3, [pc, #128]	; (19bc <_usart_init+0xfc>)
    193c:	4413      	add	r3, r2
    193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	((Sercom *)hw)->USART.CTRLB.reg = data;
    1940:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1942:	69e3      	ldr	r3, [r4, #28]
    1944:	f013 0f1f 	tst.w	r3, #31
    1948:	d1fb      	bne.n	1942 <_usart_init+0x82>
	hri_sercomusart_write_CTRLC_reg(hw, _usarts[i].ctrl_c);
    194a:	0042      	lsls	r2, r0, #1
    194c:	4402      	add	r2, r0
    194e:	00d1      	lsls	r1, r2, #3
    1950:	4b1a      	ldr	r3, [pc, #104]	; (19bc <_usart_init+0xfc>)
    1952:	440b      	add	r3, r1
    1954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	((Sercom *)hw)->USART.CTRLC.reg = data;
    1956:	60a2      	str	r2, [r4, #8]
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
    1958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    195a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    195e:	d10a      	bne.n	1976 <_usart_init+0xb6>
    1960:	f413 4fc0 	tst.w	r3, #24576	; 0x6000
    1964:	d107      	bne.n	1976 <_usart_init+0xb6>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1966:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    196a:	00da      	lsls	r2, r3, #3
    196c:	4b13      	ldr	r3, [pc, #76]	; (19bc <_usart_init+0xfc>)
    196e:	4413      	add	r3, r2
    1970:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
	((Sercom *)hw)->USART.BAUD.reg = data;
    1972:	81a3      	strh	r3, [r4, #12]
    1974:	e00f      	b.n	1996 <_usart_init+0xd6>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
    1976:	0042      	lsls	r2, r0, #1
    1978:	4402      	add	r2, r0
    197a:	00d1      	lsls	r1, r2, #3
    197c:	4b0f      	ldr	r3, [pc, #60]	; (19bc <_usart_init+0xfc>)
    197e:	440b      	add	r3, r1
    1980:	8e19      	ldrh	r1, [r3, #48]	; 0x30
    1982:	89a2      	ldrh	r2, [r4, #12]
    1984:	f361 020c 	bfi	r2, r1, #0, #13
    1988:	81a2      	strh	r2, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
    198a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    198e:	89a3      	ldrh	r3, [r4, #12]
    1990:	f362 334f 	bfi	r3, r2, #13, #3
    1994:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
    1996:	4a09      	ldr	r2, [pc, #36]	; (19bc <_usart_init+0xfc>)
    1998:	0043      	lsls	r3, r0, #1
    199a:	181d      	adds	r5, r3, r0
    199c:	00e9      	lsls	r1, r5, #3
    199e:	460d      	mov	r5, r1
    19a0:	4411      	add	r1, r2
    19a2:	f891 1033 	ldrb.w	r1, [r1, #51]	; 0x33
	((Sercom *)hw)->USART.RXPL.reg = data;
    19a6:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    19a8:	442a      	add	r2, r5
    19aa:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    19ae:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
    19b2:	2000      	movs	r0, #0
    19b4:	bd38      	pop	{r3, r4, r5, pc}
    19b6:	bf00      	nop
    19b8:	0000187d 	.word	0x0000187d
    19bc:	00002aac 	.word	0x00002aac

000019c0 <_get_i2cm_index>:
{
    19c0:	b508      	push	{r3, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    19c2:	4b0d      	ldr	r3, [pc, #52]	; (19f8 <_get_i2cm_index+0x38>)
    19c4:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    19c6:	2300      	movs	r3, #0
    19c8:	b143      	cbz	r3, 19dc <_get_i2cm_index+0x1c>
	ASSERT(false);
    19ca:	f240 32ce 	movw	r2, #974	; 0x3ce
    19ce:	490b      	ldr	r1, [pc, #44]	; (19fc <_get_i2cm_index+0x3c>)
    19d0:	2000      	movs	r0, #0
    19d2:	4b0b      	ldr	r3, [pc, #44]	; (1a00 <_get_i2cm_index+0x40>)
    19d4:	4798      	blx	r3
	return -1;
    19d6:	f04f 30ff 	mov.w	r0, #4294967295
}
    19da:	bd08      	pop	{r3, pc}
		if (_i2cms[i].number == sercom_offset) {
    19dc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    19e0:	00d1      	lsls	r1, r2, #3
    19e2:	4a08      	ldr	r2, [pc, #32]	; (1a04 <_get_i2cm_index+0x44>)
    19e4:	440a      	add	r2, r1
    19e6:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    19ea:	4290      	cmp	r0, r2
    19ec:	d002      	beq.n	19f4 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    19ee:	3301      	adds	r3, #1
    19f0:	b2db      	uxtb	r3, r3
    19f2:	e7e9      	b.n	19c8 <_get_i2cm_index+0x8>
			return i;
    19f4:	b258      	sxtb	r0, r3
    19f6:	bd08      	pop	{r3, pc}
    19f8:	0000179d 	.word	0x0000179d
    19fc:	00002b20 	.word	0x00002b20
    1a00:	00000e3d 	.word	0x00000e3d
    1a04:	00002aac 	.word	0x00002aac

00001a08 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
    1a08:	b538      	push	{r3, r4, r5, lr}
    1a0a:	4605      	mov	r5, r0
    1a0c:	460c      	mov	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1a0e:	4608      	mov	r0, r1
    1a10:	4b33      	ldr	r3, [pc, #204]	; (1ae0 <_i2c_m_sync_init_impl+0xd8>)
    1a12:	4798      	blx	r3
    1a14:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
    1a16:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
    1a18:	f013 0f01 	tst.w	r3, #1
    1a1c:	d122      	bne.n	1a64 <_i2c_m_sync_init_impl+0x5c>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
    1a1e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a22:	00da      	lsls	r2, r3, #3
    1a24:	4b2f      	ldr	r3, [pc, #188]	; (1ae4 <_i2c_m_sync_init_impl+0xdc>)
    1a26:	4413      	add	r3, r2
    1a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1a2a:	f002 021c 	and.w	r2, r2, #28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a2e:	69e3      	ldr	r3, [r4, #28]
    1a30:	f013 0f03 	tst.w	r3, #3
    1a34:	d1fb      	bne.n	1a2e <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1a36:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1a38:	f013 0f02 	tst.w	r3, #2
    1a3c:	d00b      	beq.n	1a56 <_i2c_m_sync_init_impl+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
    1a3e:	6823      	ldr	r3, [r4, #0]
    1a40:	f023 0302 	bic.w	r3, r3, #2
    1a44:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a46:	69e3      	ldr	r3, [r4, #28]
    1a48:	f013 0f03 	tst.w	r3, #3
    1a4c:	d1fb      	bne.n	1a46 <_i2c_m_sync_init_impl+0x3e>
    1a4e:	69e3      	ldr	r3, [r4, #28]
    1a50:	f013 0f02 	tst.w	r3, #2
    1a54:	d1fb      	bne.n	1a4e <_i2c_m_sync_init_impl+0x46>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
    1a56:	f042 0201 	orr.w	r2, r2, #1
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a5a:	6022      	str	r2, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a5c:	69e3      	ldr	r3, [r4, #28]
    1a5e:	f013 0f03 	tst.w	r3, #3
    1a62:	d1fb      	bne.n	1a5c <_i2c_m_sync_init_impl+0x54>
    1a64:	69e3      	ldr	r3, [r4, #28]
    1a66:	f013 0f01 	tst.w	r3, #1
    1a6a:	d1fb      	bne.n	1a64 <_i2c_m_sync_init_impl+0x5c>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
    1a6c:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a70:	00da      	lsls	r2, r3, #3
    1a72:	4b1c      	ldr	r3, [pc, #112]	; (1ae4 <_i2c_m_sync_init_impl+0xdc>)
    1a74:	4413      	add	r3, r2
    1a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1a78:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a7a:	69e3      	ldr	r3, [r4, #28]
    1a7c:	f013 0f03 	tst.w	r3, #3
    1a80:	d1fb      	bne.n	1a7a <_i2c_m_sync_init_impl+0x72>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1a82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    1a86:	00da      	lsls	r2, r3, #3
    1a88:	4b16      	ldr	r3, [pc, #88]	; (1ae4 <_i2c_m_sync_init_impl+0xdc>)
    1a8a:	4413      	add	r3, r2
    1a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1a8e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1a90:	69e3      	ldr	r3, [r4, #28]
    1a92:	f013 0f04 	tst.w	r3, #4
    1a96:	d1fb      	bne.n	1a90 <_i2c_m_sync_init_impl+0x88>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1a98:	0042      	lsls	r2, r0, #1
    1a9a:	4402      	add	r2, r0
    1a9c:	00d1      	lsls	r1, r2, #3
    1a9e:	4b11      	ldr	r3, [pc, #68]	; (1ae4 <_i2c_m_sync_init_impl+0xdc>)
    1aa0:	440b      	add	r3, r1
    1aa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1aa4:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
    1aa6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    1aaa:	f003 0303 	and.w	r3, r3, #3
    1aae:	81ab      	strh	r3, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
    1ab0:	2b01      	cmp	r3, #1
    1ab2:	bf94      	ite	ls
    1ab4:	2300      	movls	r3, #0
    1ab6:	2301      	movhi	r3, #1
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
    1ab8:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
    1aba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
    1abe:	ea42 3383 	orr.w	r3, r2, r3, lsl #14
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
    1ac2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ac4:	69e3      	ldr	r3, [r4, #28]
    1ac6:	f013 0f04 	tst.w	r3, #4
    1aca:	d1fb      	bne.n	1ac4 <_i2c_m_sync_init_impl+0xbc>

	service->trise = _i2cms[i].trise;
    1acc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1ad0:	00c2      	lsls	r2, r0, #3
    1ad2:	4b04      	ldr	r3, [pc, #16]	; (1ae4 <_i2c_m_sync_init_impl+0xdc>)
    1ad4:	4413      	add	r3, r2
    1ad6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
    1ada:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
    1adc:	2000      	movs	r0, #0
    1ade:	bd38      	pop	{r3, r4, r5, pc}
    1ae0:	000019c1 	.word	0x000019c1
    1ae4:	00002aac 	.word	0x00002aac

00001ae8 <_sercom_i2c_sync_send_address>:
{
    1ae8:	b570      	push	{r4, r5, r6, lr}
    1aea:	4605      	mov	r5, r0
	void *             hw    = i2c_dev->hw;
    1aec:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1aee:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1af0:	f3c6 66c0 	ubfx	r6, r6, #27, #1
	ASSERT(i2c_dev);
    1af4:	f240 52cd 	movw	r2, #1485	; 0x5cd
    1af8:	4999      	ldr	r1, [pc, #612]	; (1d60 <_sercom_i2c_sync_send_address+0x278>)
    1afa:	3000      	adds	r0, #0
    1afc:	bf18      	it	ne
    1afe:	2001      	movne	r0, #1
    1b00:	4b98      	ldr	r3, [pc, #608]	; (1d64 <_sercom_i2c_sync_send_address+0x27c>)
    1b02:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
    1b04:	686b      	ldr	r3, [r5, #4]
    1b06:	2b01      	cmp	r3, #1
    1b08:	d057      	beq.n	1bba <_sercom_i2c_sync_send_address+0xd2>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1b0a:	6863      	ldr	r3, [r4, #4]
    1b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    1b10:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b12:	69e3      	ldr	r3, [r4, #28]
    1b14:	f013 0f04 	tst.w	r3, #4
    1b18:	d1fb      	bne.n	1b12 <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
    1b1a:	882b      	ldrh	r3, [r5, #0]
    1b1c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1b20:	d056      	beq.n	1bd0 <_sercom_i2c_sync_send_address+0xe8>
		if (msg->flags & I2C_M_RD) {
    1b22:	886a      	ldrh	r2, [r5, #2]
    1b24:	f012 0f01 	tst.w	r2, #1
    1b28:	d004      	beq.n	1b34 <_sercom_i2c_sync_send_address+0x4c>
			msg->flags |= I2C_M_TEN;
    1b2a:	886a      	ldrh	r2, [r5, #2]
    1b2c:	b292      	uxth	r2, r2
    1b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1b32:	806a      	strh	r2, [r5, #2]
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1b34:	f240 72fe 	movw	r2, #2046	; 0x7fe
    1b38:	ea02 0243 	and.w	r2, r2, r3, lsl #1
    1b3c:	69e3      	ldr	r3, [r4, #28]
    1b3e:	f013 0f04 	tst.w	r3, #4
    1b42:	d1fb      	bne.n	1b3c <_sercom_i2c_sync_send_address+0x54>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1b4a:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
    1b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1b50:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b52:	69e3      	ldr	r3, [r4, #28]
    1b54:	f013 0f04 	tst.w	r3, #4
    1b58:	d1fb      	bne.n	1b52 <_sercom_i2c_sync_send_address+0x6a>
	void *   hw      = i2c_dev->hw;
    1b5a:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1b60:	7e33      	ldrb	r3, [r6, #24]
    1b62:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1b64:	4618      	mov	r0, r3
		if (timeout-- == 0) {
    1b66:	1e51      	subs	r1, r2, #1
    1b68:	b11a      	cbz	r2, 1b72 <_sercom_i2c_sync_send_address+0x8a>
    1b6a:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1b6c:	f013 0f03 	tst.w	r3, #3
    1b70:	d0f6      	beq.n	1b60 <_sercom_i2c_sync_send_address+0x78>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1b72:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    1b74:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1b78:	69e3      	ldr	r3, [r4, #28]
    1b7a:	f013 0f04 	tst.w	r3, #4
    1b7e:	d1fb      	bne.n	1b78 <_sercom_i2c_sync_send_address+0x90>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1b80:	8b63      	ldrh	r3, [r4, #26]
    1b82:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1b84:	f010 0f01 	tst.w	r0, #1
    1b88:	f000 809c 	beq.w	1cc4 <_sercom_i2c_sync_send_address+0x1dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1b8c:	f013 0f02 	tst.w	r3, #2
    1b90:	d032      	beq.n	1bf8 <_sercom_i2c_sync_send_address+0x110>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1b92:	2201      	movs	r2, #1
    1b94:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1b96:	886a      	ldrh	r2, [r5, #2]
    1b98:	b292      	uxth	r2, r2
    1b9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    1b9e:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1ba0:	886a      	ldrh	r2, [r5, #2]
    1ba2:	b292      	uxth	r2, r2
    1ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1ba8:	b292      	uxth	r2, r2
    1baa:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1bac:	f013 0f01 	tst.w	r3, #1
    1bb0:	f000 80d1 	beq.w	1d56 <_sercom_i2c_sync_send_address+0x26e>
				return I2C_ERR_BUS;
    1bb4:	f06f 0004 	mvn.w	r0, #4
    1bb8:	bd70      	pop	{r4, r5, r6, pc}
	if (msg->len == 1 && sclsm) {
    1bba:	2e00      	cmp	r6, #0
    1bbc:	d0a5      	beq.n	1b0a <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1bbe:	6863      	ldr	r3, [r4, #4]
    1bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1bc4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1bc6:	69e3      	ldr	r3, [r4, #28]
    1bc8:	f013 0f04 	tst.w	r3, #4
    1bcc:	d1fb      	bne.n	1bc6 <_sercom_i2c_sync_send_address+0xde>
    1bce:	e7a4      	b.n	1b1a <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
    1bd0:	005b      	lsls	r3, r3, #1
    1bd2:	b2db      	uxtb	r3, r3
    1bd4:	886a      	ldrh	r2, [r5, #2]
    1bd6:	f002 0201 	and.w	r2, r2, #1
    1bda:	431a      	orrs	r2, r3
    1bdc:	69e3      	ldr	r3, [r4, #28]
    1bde:	f013 0f04 	tst.w	r3, #4
    1be2:	d1fb      	bne.n	1bdc <_sercom_i2c_sync_send_address+0xf4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1be4:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
		hri_sercomi2cm_write_ADDR_reg(hw,
    1bea:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1bec:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1bee:	69e3      	ldr	r3, [r4, #28]
    1bf0:	f013 0f04 	tst.w	r3, #4
    1bf4:	d1fb      	bne.n	1bee <_sercom_i2c_sync_send_address+0x106>
    1bf6:	e7b0      	b.n	1b5a <_sercom_i2c_sync_send_address+0x72>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1bf8:	f013 0f04 	tst.w	r3, #4
    1bfc:	d11f      	bne.n	1c3e <_sercom_i2c_sync_send_address+0x156>
			if (msg->flags & I2C_M_TEN) {
    1bfe:	886b      	ldrh	r3, [r5, #2]
    1c00:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1c04:	d039      	beq.n	1c7a <_sercom_i2c_sync_send_address+0x192>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1c06:	882b      	ldrh	r3, [r5, #0]
    1c08:	121b      	asrs	r3, r3, #8
    1c0a:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1c0c:	f003 0206 	and.w	r2, r3, #6
    1c10:	69e3      	ldr	r3, [r4, #28]
    1c12:	f013 0f04 	tst.w	r3, #4
    1c16:	d1fb      	bne.n	1c10 <_sercom_i2c_sync_send_address+0x128>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1c1e:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1c20:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1c24:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c26:	69e3      	ldr	r3, [r4, #28]
    1c28:	f013 0f04 	tst.w	r3, #4
    1c2c:	d1fb      	bne.n	1c26 <_sercom_i2c_sync_send_address+0x13e>
				msg->flags &= ~I2C_M_TEN;
    1c2e:	886b      	ldrh	r3, [r5, #2]
    1c30:	b29b      	uxth	r3, r3
    1c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1c36:	b29b      	uxth	r3, r3
    1c38:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1c3a:	2000      	movs	r0, #0
    1c3c:	bd70      	pop	{r4, r5, r6, pc}
				if (msg->len > 0) {
    1c3e:	686b      	ldr	r3, [r5, #4]
    1c40:	2b00      	cmp	r3, #0
    1c42:	dd04      	ble.n	1c4e <_sercom_i2c_sync_send_address+0x166>
					msg->flags |= I2C_M_FAIL;
    1c44:	886b      	ldrh	r3, [r5, #2]
    1c46:	b29b      	uxth	r3, r3
    1c48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1c4c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1c4e:	886b      	ldrh	r3, [r5, #2]
    1c50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1c54:	d108      	bne.n	1c68 <_sercom_i2c_sync_send_address+0x180>
				msg->flags &= ~I2C_M_BUSY;
    1c56:	886b      	ldrh	r3, [r5, #2]
    1c58:	b29b      	uxth	r3, r3
    1c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c5e:	b29b      	uxth	r3, r3
    1c60:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1c62:	f06f 0001 	mvn.w	r0, #1
    1c66:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1c68:	6863      	ldr	r3, [r4, #4]
    1c6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1c6e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c70:	69e3      	ldr	r3, [r4, #28]
    1c72:	f013 0f04 	tst.w	r3, #4
    1c76:	d1fb      	bne.n	1c70 <_sercom_i2c_sync_send_address+0x188>
    1c78:	e7ed      	b.n	1c56 <_sercom_i2c_sync_send_address+0x16e>
			if (msg->len == 0) {
    1c7a:	6868      	ldr	r0, [r5, #4]
    1c7c:	b998      	cbnz	r0, 1ca6 <_sercom_i2c_sync_send_address+0x1be>
				if (msg->flags & I2C_M_STOP) {
    1c7e:	886b      	ldrh	r3, [r5, #2]
    1c80:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1c84:	d106      	bne.n	1c94 <_sercom_i2c_sync_send_address+0x1ac>
				msg->flags &= ~I2C_M_BUSY;
    1c86:	886b      	ldrh	r3, [r5, #2]
    1c88:	b29b      	uxth	r3, r3
    1c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1c8e:	b29b      	uxth	r3, r3
    1c90:	806b      	strh	r3, [r5, #2]
    1c92:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1c94:	6863      	ldr	r3, [r4, #4]
    1c96:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1c9a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1c9c:	69e3      	ldr	r3, [r4, #28]
    1c9e:	f013 0f04 	tst.w	r3, #4
    1ca2:	d1fb      	bne.n	1c9c <_sercom_i2c_sync_send_address+0x1b4>
    1ca4:	e7ef      	b.n	1c86 <_sercom_i2c_sync_send_address+0x19e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1ca6:	68ab      	ldr	r3, [r5, #8]
    1ca8:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1caa:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1cac:	69e3      	ldr	r3, [r4, #28]
    1cae:	f013 0f04 	tst.w	r3, #4
    1cb2:	d1fb      	bne.n	1cac <_sercom_i2c_sync_send_address+0x1c4>
				msg->buffer++;
    1cb4:	68ab      	ldr	r3, [r5, #8]
    1cb6:	3301      	adds	r3, #1
    1cb8:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1cba:	686b      	ldr	r3, [r5, #4]
    1cbc:	3b01      	subs	r3, #1
    1cbe:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1cc0:	2000      	movs	r0, #0
    1cc2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (flags & SB_FLAG) {
    1cc4:	f010 0f02 	tst.w	r0, #2
    1cc8:	d048      	beq.n	1d5c <_sercom_i2c_sync_send_address+0x274>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1cca:	6869      	ldr	r1, [r5, #4]
    1ccc:	2900      	cmp	r1, #0
    1cce:	d03d      	beq.n	1d4c <_sercom_i2c_sync_send_address+0x264>
    1cd0:	f013 0f04 	tst.w	r3, #4
    1cd4:	d13a      	bne.n	1d4c <_sercom_i2c_sync_send_address+0x264>
			msg->len--;
    1cd6:	3901      	subs	r1, #1
    1cd8:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1cda:	b901      	cbnz	r1, 1cde <_sercom_i2c_sync_send_address+0x1f6>
    1cdc:	b1e2      	cbz	r2, 1d18 <_sercom_i2c_sync_send_address+0x230>
    1cde:	2901      	cmp	r1, #1
    1ce0:	d018      	beq.n	1d14 <_sercom_i2c_sync_send_address+0x22c>
			if (msg->len == 0) {
    1ce2:	686b      	ldr	r3, [r5, #4]
    1ce4:	b94b      	cbnz	r3, 1cfa <_sercom_i2c_sync_send_address+0x212>
				if (msg->flags & I2C_M_STOP) {
    1ce6:	886b      	ldrh	r3, [r5, #2]
    1ce8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1cec:	d11d      	bne.n	1d2a <_sercom_i2c_sync_send_address+0x242>
				msg->flags &= ~I2C_M_BUSY;
    1cee:	886b      	ldrh	r3, [r5, #2]
    1cf0:	b29b      	uxth	r3, r3
    1cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1cf6:	b29b      	uxth	r3, r3
    1cf8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1cfa:	68aa      	ldr	r2, [r5, #8]
    1cfc:	1c53      	adds	r3, r2, #1
    1cfe:	60ab      	str	r3, [r5, #8]
    1d00:	69e3      	ldr	r3, [r4, #28]
    1d02:	f013 0f04 	tst.w	r3, #4
    1d06:	d1fb      	bne.n	1d00 <_sercom_i2c_sync_send_address+0x218>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1d0a:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d0c:	2302      	movs	r3, #2
    1d0e:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    1d10:	2000      	movs	r0, #0
    1d12:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1d14:	2a00      	cmp	r2, #0
    1d16:	d0e4      	beq.n	1ce2 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1d18:	6863      	ldr	r3, [r4, #4]
    1d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    1d1e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d20:	69e3      	ldr	r3, [r4, #28]
    1d22:	f013 0f04 	tst.w	r3, #4
    1d26:	d1fb      	bne.n	1d20 <_sercom_i2c_sync_send_address+0x238>
    1d28:	e7db      	b.n	1ce2 <_sercom_i2c_sync_send_address+0x1fa>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1d2a:	6863      	ldr	r3, [r4, #4]
    1d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1d30:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d32:	69e3      	ldr	r3, [r4, #28]
    1d34:	f013 0f04 	tst.w	r3, #4
    1d38:	d1fb      	bne.n	1d32 <_sercom_i2c_sync_send_address+0x24a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1d3a:	6863      	ldr	r3, [r4, #4]
    1d3c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1d40:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1d42:	69e3      	ldr	r3, [r4, #28]
    1d44:	f013 0f04 	tst.w	r3, #4
    1d48:	d1fb      	bne.n	1d42 <_sercom_i2c_sync_send_address+0x25a>
    1d4a:	e7d0      	b.n	1cee <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d4c:	2302      	movs	r3, #2
    1d4e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1d50:	f06f 0001 	mvn.w	r0, #1
    1d54:	bd70      	pop	{r4, r5, r6, pc}
			return I2C_ERR_BAD_ADDRESS;
    1d56:	f06f 0003 	mvn.w	r0, #3
    1d5a:	bd70      	pop	{r4, r5, r6, pc}
	return I2C_OK;
    1d5c:	2000      	movs	r0, #0
}
    1d5e:	bd70      	pop	{r4, r5, r6, pc}
    1d60:	00002b20 	.word	0x00002b20
    1d64:	00000e3d 	.word	0x00000e3d

00001d68 <_usart_async_init>:
{
    1d68:	b570      	push	{r4, r5, r6, lr}
    1d6a:	460c      	mov	r4, r1
	ASSERT(device);
    1d6c:	4606      	mov	r6, r0
    1d6e:	22cb      	movs	r2, #203	; 0xcb
    1d70:	4918      	ldr	r1, [pc, #96]	; (1dd4 <_usart_async_init+0x6c>)
    1d72:	3000      	adds	r0, #0
    1d74:	bf18      	it	ne
    1d76:	2001      	movne	r0, #1
    1d78:	4b17      	ldr	r3, [pc, #92]	; (1dd8 <_usart_async_init+0x70>)
    1d7a:	4798      	blx	r3
	init_status = _usart_init(hw);
    1d7c:	4620      	mov	r0, r4
    1d7e:	4b17      	ldr	r3, [pc, #92]	; (1ddc <_usart_async_init+0x74>)
    1d80:	4798      	blx	r3
	if (init_status) {
    1d82:	4605      	mov	r5, r0
    1d84:	b108      	cbz	r0, 1d8a <_usart_async_init+0x22>
}
    1d86:	4628      	mov	r0, r5
    1d88:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    1d8a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    1d8c:	4631      	mov	r1, r6
    1d8e:	4620      	mov	r0, r4
    1d90:	4b13      	ldr	r3, [pc, #76]	; (1de0 <_usart_async_init+0x78>)
    1d92:	4798      	blx	r3
	uint8_t irq = _sercom_get_irq_num(hw);
    1d94:	4620      	mov	r0, r4
    1d96:	4b13      	ldr	r3, [pc, #76]	; (1de4 <_usart_async_init+0x7c>)
    1d98:	4798      	blx	r3
	for (uint32_t i = 0; i < 4; i++) {
    1d9a:	2400      	movs	r4, #0
    1d9c:	e016      	b.n	1dcc <_usart_async_init+0x64>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d9e:	0941      	lsrs	r1, r0, #5
    1da0:	f000 021f 	and.w	r2, r0, #31
    1da4:	2301      	movs	r3, #1
    1da6:	4093      	lsls	r3, r2
    1da8:	4a0f      	ldr	r2, [pc, #60]	; (1de8 <_usart_async_init+0x80>)
    1daa:	f101 0620 	add.w	r6, r1, #32
    1dae:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    1db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1db6:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dba:	f101 0660 	add.w	r6, r1, #96	; 0x60
    1dbe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1dc2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		irq++;
    1dc6:	3001      	adds	r0, #1
    1dc8:	b2c0      	uxtb	r0, r0
	for (uint32_t i = 0; i < 4; i++) {
    1dca:	3401      	adds	r4, #1
    1dcc:	2c03      	cmp	r4, #3
    1dce:	d9e6      	bls.n	1d9e <_usart_async_init+0x36>
    1dd0:	e7d9      	b.n	1d86 <_usart_async_init+0x1e>
    1dd2:	bf00      	nop
    1dd4:	00002b20 	.word	0x00002b20
    1dd8:	00000e3d 	.word	0x00000e3d
    1ddc:	000018c1 	.word	0x000018c1
    1de0:	0000184d 	.word	0x0000184d
    1de4:	00001865 	.word	0x00001865
    1de8:	e000e100 	.word	0xe000e100

00001dec <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1dec:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1dee:	6813      	ldr	r3, [r2, #0]
    1df0:	f043 0302 	orr.w	r3, r3, #2
    1df4:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    1df6:	69d3      	ldr	r3, [r2, #28]
    1df8:	f013 0f03 	tst.w	r3, #3
    1dfc:	d1fb      	bne.n	1df6 <_usart_async_enable+0xa>
}
    1dfe:	4770      	bx	lr

00001e00 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1e00:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.DATA.reg = data;
    1e02:	6299      	str	r1, [r3, #40]	; 0x28
    1e04:	4770      	bx	lr

00001e06 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    1e06:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1e08:	2201      	movs	r2, #1
    1e0a:	759a      	strb	r2, [r3, #22]
    1e0c:	4770      	bx	lr

00001e0e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1e0e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1e10:	2202      	movs	r2, #2
    1e12:	759a      	strb	r2, [r3, #22]
    1e14:	4770      	bx	lr
	...

00001e18 <_i2c_m_sync_init>:
{
    1e18:	b538      	push	{r3, r4, r5, lr}
    1e1a:	460d      	mov	r5, r1
	ASSERT(i2c_dev);
    1e1c:	4604      	mov	r4, r0
    1e1e:	f44f 62a8 	mov.w	r2, #1344	; 0x540
    1e22:	4906      	ldr	r1, [pc, #24]	; (1e3c <_i2c_m_sync_init+0x24>)
    1e24:	3000      	adds	r0, #0
    1e26:	bf18      	it	ne
    1e28:	2001      	movne	r0, #1
    1e2a:	4b05      	ldr	r3, [pc, #20]	; (1e40 <_i2c_m_sync_init+0x28>)
    1e2c:	4798      	blx	r3
	i2c_dev->hw = hw;
    1e2e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1e30:	4629      	mov	r1, r5
    1e32:	4620      	mov	r0, r4
    1e34:	4b03      	ldr	r3, [pc, #12]	; (1e44 <_i2c_m_sync_init+0x2c>)
    1e36:	4798      	blx	r3
}
    1e38:	bd38      	pop	{r3, r4, r5, pc}
    1e3a:	bf00      	nop
    1e3c:	00002b20 	.word	0x00002b20
    1e40:	00000e3d 	.word	0x00000e3d
    1e44:	00001a09 	.word	0x00001a09

00001e48 <_i2c_m_sync_enable>:
{
    1e48:	b570      	push	{r4, r5, r6, lr}
	ASSERT(i2c_dev);
    1e4a:	4e1b      	ldr	r6, [pc, #108]	; (1eb8 <_i2c_m_sync_enable+0x70>)
    1e4c:	4604      	mov	r4, r0
    1e4e:	f240 525d 	movw	r2, #1373	; 0x55d
    1e52:	4631      	mov	r1, r6
    1e54:	3000      	adds	r0, #0
    1e56:	bf18      	it	ne
    1e58:	2001      	movne	r0, #1
    1e5a:	4d18      	ldr	r5, [pc, #96]	; (1ebc <_i2c_m_sync_enable+0x74>)
    1e5c:	47a8      	blx	r5
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1e5e:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    1e60:	f240 622d 	movw	r2, #1581	; 0x62d
    1e64:	4631      	mov	r1, r6
    1e66:	1c20      	adds	r0, r4, #0
    1e68:	bf18      	it	ne
    1e6a:	2001      	movne	r0, #1
    1e6c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1e6e:	6823      	ldr	r3, [r4, #0]
    1e70:	f043 0302 	orr.w	r3, r3, #2
    1e74:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1e76:	69e3      	ldr	r3, [r4, #28]
    1e78:	f013 0f03 	tst.w	r3, #3
    1e7c:	d1fb      	bne.n	1e76 <_i2c_m_sync_enable+0x2e>
    1e7e:	2104      	movs	r1, #4
    1e80:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1e84:	69e3      	ldr	r3, [r4, #28]
    1e86:	f013 0f04 	tst.w	r3, #4
    1e8a:	d1fb      	bne.n	1e84 <_i2c_m_sync_enable+0x3c>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1e8c:	8b63      	ldrh	r3, [r4, #26]
    1e8e:	f3c3 1301 	ubfx	r3, r3, #4, #2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1e92:	2b01      	cmp	r3, #1
    1e94:	d00b      	beq.n	1eae <_i2c_m_sync_enable+0x66>
		timeout--;
    1e96:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    1e98:	2a00      	cmp	r2, #0
    1e9a:	dcf3      	bgt.n	1e84 <_i2c_m_sync_enable+0x3c>
			if (--timeout_attempt)
    1e9c:	3901      	subs	r1, #1
    1e9e:	d008      	beq.n	1eb2 <_i2c_m_sync_enable+0x6a>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    1ea0:	2310      	movs	r3, #16
    1ea2:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1ea4:	69e3      	ldr	r3, [r4, #28]
    1ea6:	f013 0f04 	tst.w	r3, #4
    1eaa:	d1fb      	bne.n	1ea4 <_i2c_m_sync_enable+0x5c>
    1eac:	e7e8      	b.n	1e80 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    1eae:	2000      	movs	r0, #0
    1eb0:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1eb2:	f06f 0005 	mvn.w	r0, #5
}
    1eb6:	bd70      	pop	{r4, r5, r6, pc}
    1eb8:	00002b20 	.word	0x00002b20
    1ebc:	00000e3d 	.word	0x00000e3d

00001ec0 <_i2c_m_sync_transfer>:
{
    1ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ec4:	4605      	mov	r5, r0
    1ec6:	460e      	mov	r6, r1
	void *   hw = i2c_dev->hw;
    1ec8:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1eca:	f8df 82a0 	ldr.w	r8, [pc, #672]	; 216c <_i2c_m_sync_transfer+0x2ac>
    1ece:	f44f 62bf 	mov.w	r2, #1528	; 0x5f8
    1ed2:	4641      	mov	r1, r8
    1ed4:	3000      	adds	r0, #0
    1ed6:	bf18      	it	ne
    1ed8:	2001      	movne	r0, #1
    1eda:	4fa2      	ldr	r7, [pc, #648]	; (2164 <_i2c_m_sync_transfer+0x2a4>)
    1edc:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1ede:	6928      	ldr	r0, [r5, #16]
    1ee0:	f240 52f9 	movw	r2, #1529	; 0x5f9
    1ee4:	4641      	mov	r1, r8
    1ee6:	3000      	adds	r0, #0
    1ee8:	bf18      	it	ne
    1eea:	2001      	movne	r0, #1
    1eec:	47b8      	blx	r7
	ASSERT(msg);
    1eee:	f240 52fa 	movw	r2, #1530	; 0x5fa
    1ef2:	4641      	mov	r1, r8
    1ef4:	1c30      	adds	r0, r6, #0
    1ef6:	bf18      	it	ne
    1ef8:	2001      	movne	r0, #1
    1efa:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1efc:	886b      	ldrh	r3, [r5, #2]
    1efe:	f413 7f80 	tst.w	r3, #256	; 0x100
    1f02:	f040 812a 	bne.w	215a <_i2c_m_sync_transfer+0x29a>
	msg->flags |= I2C_M_BUSY;
    1f06:	8873      	ldrh	r3, [r6, #2]
    1f08:	b29b      	uxth	r3, r3
    1f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f0e:	8073      	strh	r3, [r6, #2]
	i2c_dev->service.msg = *msg;
    1f10:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1f14:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1f18:	6863      	ldr	r3, [r4, #4]
    1f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f1e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f20:	69e3      	ldr	r3, [r4, #28]
    1f22:	f013 0f04 	tst.w	r3, #4
    1f26:	d1fb      	bne.n	1f20 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1f28:	4628      	mov	r0, r5
    1f2a:	4b8f      	ldr	r3, [pc, #572]	; (2168 <_i2c_m_sync_transfer+0x2a8>)
    1f2c:	4798      	blx	r3
	if (ret) {
    1f2e:	4603      	mov	r3, r0
    1f30:	2800      	cmp	r0, #0
    1f32:	f000 80b0 	beq.w	2096 <_i2c_m_sync_transfer+0x1d6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1f36:	886a      	ldrh	r2, [r5, #2]
    1f38:	b292      	uxth	r2, r2
    1f3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1f3e:	b292      	uxth	r2, r2
    1f40:	806a      	strh	r2, [r5, #2]
		return ret;
    1f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return I2C_ERR_BUS;
    1f46:	f06f 0004 	mvn.w	r0, #4
    1f4a:	e0b7      	b.n	20bc <_i2c_m_sync_transfer+0x1fc>
			if (msg->flags & I2C_M_STOP) {
    1f4c:	8873      	ldrh	r3, [r6, #2]
    1f4e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1f52:	d107      	bne.n	1f64 <_i2c_m_sync_transfer+0xa4>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1f54:	886b      	ldrh	r3, [r5, #2]
    1f56:	b29b      	uxth	r3, r3
    1f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1f5c:	b29b      	uxth	r3, r3
    1f5e:	806b      	strh	r3, [r5, #2]
			return ret;
    1f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1f64:	6863      	ldr	r3, [r4, #4]
    1f66:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1f6a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1f6c:	69e3      	ldr	r3, [r4, #28]
    1f6e:	f013 0f04 	tst.w	r3, #4
    1f72:	d1fb      	bne.n	1f6c <_i2c_m_sync_transfer+0xac>
    1f74:	e7ee      	b.n	1f54 <_i2c_m_sync_transfer+0x94>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    1f76:	f013 0f04 	tst.w	r3, #4
    1f7a:	d11f      	bne.n	1fbc <_i2c_m_sync_transfer+0xfc>
			if (msg->flags & I2C_M_TEN) {
    1f7c:	886b      	ldrh	r3, [r5, #2]
    1f7e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1f82:	d039      	beq.n	1ff8 <_i2c_m_sync_transfer+0x138>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    1f84:	882b      	ldrh	r3, [r5, #0]
    1f86:	121b      	asrs	r3, r3, #8
    1f88:	005b      	lsls	r3, r3, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    1f8a:	f003 0206 	and.w	r2, r3, #6
    1f8e:	69e3      	ldr	r3, [r4, #28]
    1f90:	f013 0f04 	tst.w	r3, #4
    1f94:	d1fb      	bne.n	1f8e <_i2c_m_sync_transfer+0xce>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    1f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    1f9c:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    1f9e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1fa2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fa4:	69e3      	ldr	r3, [r4, #28]
    1fa6:	f013 0f04 	tst.w	r3, #4
    1faa:	d1fb      	bne.n	1fa4 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_TEN;
    1fac:	886b      	ldrh	r3, [r5, #2]
    1fae:	b29b      	uxth	r3, r3
    1fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    1fb4:	b29b      	uxth	r3, r3
    1fb6:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    1fb8:	2000      	movs	r0, #0
    1fba:	e06b      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
				if (msg->len > 0) {
    1fbc:	686b      	ldr	r3, [r5, #4]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	dd04      	ble.n	1fcc <_i2c_m_sync_transfer+0x10c>
					msg->flags |= I2C_M_FAIL;
    1fc2:	886b      	ldrh	r3, [r5, #2]
    1fc4:	b29b      	uxth	r3, r3
    1fc6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    1fca:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1fcc:	886b      	ldrh	r3, [r5, #2]
    1fce:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1fd2:	d108      	bne.n	1fe6 <_i2c_m_sync_transfer+0x126>
				msg->flags &= ~I2C_M_BUSY;
    1fd4:	886b      	ldrh	r3, [r5, #2]
    1fd6:	b29b      	uxth	r3, r3
    1fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    1fdc:	b29b      	uxth	r3, r3
    1fde:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1fe0:	f06f 0001 	mvn.w	r0, #1
    1fe4:	e056      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1fe6:	6863      	ldr	r3, [r4, #4]
    1fe8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    1fec:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1fee:	69e3      	ldr	r3, [r4, #28]
    1ff0:	f013 0f04 	tst.w	r3, #4
    1ff4:	d1fb      	bne.n	1fee <_i2c_m_sync_transfer+0x12e>
    1ff6:	e7ed      	b.n	1fd4 <_i2c_m_sync_transfer+0x114>
			if (msg->len == 0) {
    1ff8:	6868      	ldr	r0, [r5, #4]
    1ffa:	b998      	cbnz	r0, 2024 <_i2c_m_sync_transfer+0x164>
				if (msg->flags & I2C_M_STOP) {
    1ffc:	886b      	ldrh	r3, [r5, #2]
    1ffe:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    2002:	d106      	bne.n	2012 <_i2c_m_sync_transfer+0x152>
				msg->flags &= ~I2C_M_BUSY;
    2004:	886b      	ldrh	r3, [r5, #2]
    2006:	b29b      	uxth	r3, r3
    2008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    200c:	b29b      	uxth	r3, r3
    200e:	806b      	strh	r3, [r5, #2]
    2010:	e040      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    2012:	6863      	ldr	r3, [r4, #4]
    2014:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2018:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    201a:	69e3      	ldr	r3, [r4, #28]
    201c:	f013 0f04 	tst.w	r3, #4
    2020:	d1fb      	bne.n	201a <_i2c_m_sync_transfer+0x15a>
    2022:	e7ef      	b.n	2004 <_i2c_m_sync_transfer+0x144>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    2024:	68ab      	ldr	r3, [r5, #8]
    2026:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    2028:	62a3      	str	r3, [r4, #40]	; 0x28
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    202a:	69e3      	ldr	r3, [r4, #28]
    202c:	f013 0f04 	tst.w	r3, #4
    2030:	d1fb      	bne.n	202a <_i2c_m_sync_transfer+0x16a>
				msg->buffer++;
    2032:	68ab      	ldr	r3, [r5, #8]
    2034:	3301      	adds	r3, #1
    2036:	60ab      	str	r3, [r5, #8]
				msg->len--;
    2038:	686b      	ldr	r3, [r5, #4]
    203a:	3b01      	subs	r3, #1
    203c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    203e:	2000      	movs	r0, #0
    2040:	e028      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
	} else if (flags & SB_FLAG) {
    2042:	f017 0f02 	tst.w	r7, #2
    2046:	f000 8083 	beq.w	2150 <_i2c_m_sync_transfer+0x290>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    204a:	6869      	ldr	r1, [r5, #4]
    204c:	2900      	cmp	r1, #0
    204e:	d077      	beq.n	2140 <_i2c_m_sync_transfer+0x280>
    2050:	f013 0f04 	tst.w	r3, #4
    2054:	d174      	bne.n	2140 <_i2c_m_sync_transfer+0x280>
			msg->len--;
    2056:	3901      	subs	r1, #1
    2058:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    205a:	b909      	cbnz	r1, 2060 <_i2c_m_sync_transfer+0x1a0>
    205c:	2a00      	cmp	r2, #0
    205e:	d055      	beq.n	210c <_i2c_m_sync_transfer+0x24c>
    2060:	2901      	cmp	r1, #1
    2062:	d051      	beq.n	2108 <_i2c_m_sync_transfer+0x248>
			if (msg->len == 0) {
    2064:	686b      	ldr	r3, [r5, #4]
    2066:	b94b      	cbnz	r3, 207c <_i2c_m_sync_transfer+0x1bc>
				if (msg->flags & I2C_M_STOP) {
    2068:	886b      	ldrh	r3, [r5, #2]
    206a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    206e:	d156      	bne.n	211e <_i2c_m_sync_transfer+0x25e>
				msg->flags &= ~I2C_M_BUSY;
    2070:	886b      	ldrh	r3, [r5, #2]
    2072:	b29b      	uxth	r3, r3
    2074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2078:	b29b      	uxth	r3, r3
    207a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    207c:	68aa      	ldr	r2, [r5, #8]
    207e:	1c53      	adds	r3, r2, #1
    2080:	60ab      	str	r3, [r5, #8]
    2082:	69e3      	ldr	r3, [r4, #28]
    2084:	f013 0f04 	tst.w	r3, #4
    2088:	d1fb      	bne.n	2082 <_i2c_m_sync_transfer+0x1c2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    208a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    208c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    208e:	2302      	movs	r3, #2
    2090:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    2092:	2000      	movs	r0, #0
		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
    2094:	4603      	mov	r3, r0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    2096:	886a      	ldrh	r2, [r5, #2]
    2098:	f412 7f80 	tst.w	r2, #256	; 0x100
    209c:	d05a      	beq.n	2154 <_i2c_m_sync_transfer+0x294>
	void *   hw      = i2c_dev->hw;
    209e:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    20a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    20a4:	7e03      	ldrb	r3, [r0, #24]
    20a6:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    20a8:	461f      	mov	r7, r3
		if (timeout-- == 0) {
    20aa:	1e51      	subs	r1, r2, #1
    20ac:	2a00      	cmp	r2, #0
    20ae:	f43f af4a 	beq.w	1f46 <_i2c_m_sync_transfer+0x86>
    20b2:	460a      	mov	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    20b4:	f013 0f03 	tst.w	r3, #3
    20b8:	d0f4      	beq.n	20a4 <_i2c_m_sync_transfer+0x1e4>
	return I2C_OK;
    20ba:	2000      	movs	r0, #0
		if (ret) {
    20bc:	2800      	cmp	r0, #0
    20be:	f47f af45 	bne.w	1f4c <_i2c_m_sync_transfer+0x8c>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    20c2:	6822      	ldr	r2, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    20c4:	f3c2 62c0 	ubfx	r2, r2, #27, #1
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    20c8:	69e3      	ldr	r3, [r4, #28]
    20ca:	f013 0f04 	tst.w	r3, #4
    20ce:	d1fb      	bne.n	20c8 <_i2c_m_sync_transfer+0x208>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    20d0:	8b63      	ldrh	r3, [r4, #26]
    20d2:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    20d4:	f017 0f01 	tst.w	r7, #1
    20d8:	d0b3      	beq.n	2042 <_i2c_m_sync_transfer+0x182>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    20da:	f013 0f02 	tst.w	r3, #2
    20de:	f43f af4a 	beq.w	1f76 <_i2c_m_sync_transfer+0xb6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    20e2:	2201      	movs	r2, #1
    20e4:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    20e6:	886a      	ldrh	r2, [r5, #2]
    20e8:	b292      	uxth	r2, r2
    20ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    20ee:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    20f0:	886a      	ldrh	r2, [r5, #2]
    20f2:	b292      	uxth	r2, r2
    20f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    20f8:	b292      	uxth	r2, r2
    20fa:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    20fc:	f013 0f01 	tst.w	r3, #1
    2100:	d023      	beq.n	214a <_i2c_m_sync_transfer+0x28a>
				return I2C_ERR_BUS;
    2102:	f06f 0004 	mvn.w	r0, #4
    2106:	e7c5      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    2108:	2a00      	cmp	r2, #0
    210a:	d0ab      	beq.n	2064 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    210c:	6863      	ldr	r3, [r4, #4]
    210e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2112:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2114:	69e3      	ldr	r3, [r4, #28]
    2116:	f013 0f04 	tst.w	r3, #4
    211a:	d1fb      	bne.n	2114 <_i2c_m_sync_transfer+0x254>
    211c:	e7a2      	b.n	2064 <_i2c_m_sync_transfer+0x1a4>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    211e:	6863      	ldr	r3, [r4, #4]
    2120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2124:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2126:	69e3      	ldr	r3, [r4, #28]
    2128:	f013 0f04 	tst.w	r3, #4
    212c:	d1fb      	bne.n	2126 <_i2c_m_sync_transfer+0x266>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    212e:	6863      	ldr	r3, [r4, #4]
    2130:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
    2134:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    2136:	69e3      	ldr	r3, [r4, #28]
    2138:	f013 0f04 	tst.w	r3, #4
    213c:	d1fb      	bne.n	2136 <_i2c_m_sync_transfer+0x276>
    213e:	e797      	b.n	2070 <_i2c_m_sync_transfer+0x1b0>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    2140:	2302      	movs	r3, #2
    2142:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    2144:	f06f 0001 	mvn.w	r0, #1
    2148:	e7a4      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
			return I2C_ERR_BAD_ADDRESS;
    214a:	f06f 0003 	mvn.w	r0, #3
    214e:	e7a1      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
	return I2C_OK;
    2150:	2000      	movs	r0, #0
    2152:	e79f      	b.n	2094 <_i2c_m_sync_transfer+0x1d4>
	return ret;
    2154:	4618      	mov	r0, r3
    2156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return I2C_ERR_BUSY;
    215a:	f06f 0005 	mvn.w	r0, #5
}
    215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2162:	bf00      	nop
    2164:	00000e3d 	.word	0x00000e3d
    2168:	00001ae9 	.word	0x00001ae9
    216c:	00002b20 	.word	0x00002b20

00002170 <SERCOM1_0_Handler>:

/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_0_Handler(void)
{
    2170:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    2172:	4b02      	ldr	r3, [pc, #8]	; (217c <SERCOM1_0_Handler+0xc>)
    2174:	6818      	ldr	r0, [r3, #0]
    2176:	4b02      	ldr	r3, [pc, #8]	; (2180 <SERCOM1_0_Handler+0x10>)
    2178:	4798      	blx	r3
    217a:	bd08      	pop	{r3, pc}
    217c:	20000648 	.word	0x20000648
    2180:	000017dd 	.word	0x000017dd

00002184 <SERCOM1_1_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_1_Handler(void)
{
    2184:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    2186:	4b02      	ldr	r3, [pc, #8]	; (2190 <SERCOM1_1_Handler+0xc>)
    2188:	6818      	ldr	r0, [r3, #0]
    218a:	4b02      	ldr	r3, [pc, #8]	; (2194 <SERCOM1_1_Handler+0x10>)
    218c:	4798      	blx	r3
    218e:	bd08      	pop	{r3, pc}
    2190:	20000648 	.word	0x20000648
    2194:	000017dd 	.word	0x000017dd

00002198 <SERCOM1_2_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_2_Handler(void)
{
    2198:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    219a:	4b02      	ldr	r3, [pc, #8]	; (21a4 <SERCOM1_2_Handler+0xc>)
    219c:	6818      	ldr	r0, [r3, #0]
    219e:	4b02      	ldr	r3, [pc, #8]	; (21a8 <SERCOM1_2_Handler+0x10>)
    21a0:	4798      	blx	r3
    21a2:	bd08      	pop	{r3, pc}
    21a4:	20000648 	.word	0x20000648
    21a8:	000017dd 	.word	0x000017dd

000021ac <SERCOM1_3_Handler>:
}
/**
 * \internal Sercom interrupt handler
 */
void SERCOM1_3_Handler(void)
{
    21ac:	b508      	push	{r3, lr}
	_sercom_usart_interrupt_handler(_sercom1_dev);
    21ae:	4b02      	ldr	r3, [pc, #8]	; (21b8 <SERCOM1_3_Handler+0xc>)
    21b0:	6818      	ldr	r0, [r3, #0]
    21b2:	4b02      	ldr	r3, [pc, #8]	; (21bc <SERCOM1_3_Handler+0x10>)
    21b4:	4798      	blx	r3
    21b6:	bd08      	pop	{r3, pc}
    21b8:	20000648 	.word	0x20000648
    21bc:	000017dd 	.word	0x000017dd

000021c0 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    21c0:	4b03      	ldr	r3, [pc, #12]	; (21d0 <_system_time_init+0x10>)
    21c2:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    21c6:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    21c8:	2205      	movs	r2, #5
    21ca:	601a      	str	r2, [r3, #0]
    21cc:	4770      	bx	lr
    21ce:	bf00      	nop
    21d0:	e000e010 	.word	0xe000e010

000021d4 <_delay_init>:
}
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    21d4:	b508      	push	{r3, lr}
	_system_time_init(hw);
    21d6:	4b01      	ldr	r3, [pc, #4]	; (21dc <_delay_init+0x8>)
    21d8:	4798      	blx	r3
    21da:	bd08      	pop	{r3, pc}
    21dc:	000021c1 	.word	0x000021c1

000021e0 <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    21e0:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    21e2:	e00d      	b.n	2200 <_delay_cycles+0x20>
		SysTick->LOAD = 0xFFFFFF;
    21e4:	4b0d      	ldr	r3, [pc, #52]	; (221c <_delay_cycles+0x3c>)
    21e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    21ea:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    21ec:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    21ee:	4b0b      	ldr	r3, [pc, #44]	; (221c <_delay_cycles+0x3c>)
    21f0:	681b      	ldr	r3, [r3, #0]
    21f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    21f6:	d0fa      	beq.n	21ee <_delay_cycles+0xe>
			;
		buf -= 0xFFFFFF;
    21f8:	f101 417f 	add.w	r1, r1, #4278190080	; 0xff000000
    21fc:	3101      	adds	r1, #1
	while (n--) {
    21fe:	4610      	mov	r0, r2
    2200:	1e43      	subs	r3, r0, #1
    2202:	b2da      	uxtb	r2, r3
    2204:	2800      	cmp	r0, #0
    2206:	d1ed      	bne.n	21e4 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    2208:	4b04      	ldr	r3, [pc, #16]	; (221c <_delay_cycles+0x3c>)
    220a:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    220c:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    220e:	4b03      	ldr	r3, [pc, #12]	; (221c <_delay_cycles+0x3c>)
    2210:	681b      	ldr	r3, [r3, #0]
    2212:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2216:	d0fa      	beq.n	220e <_delay_cycles+0x2e>
		;
}
    2218:	4770      	bx	lr
    221a:	bf00      	nop
    221c:	e000e010 	.word	0xe000e010

00002220 <_tcc_init_irq_param>:
/**
 * \brief Init irq param with the given tcc hardware instance
 */
static void _tcc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TCC0) {
    2220:	4b03      	ldr	r3, [pc, #12]	; (2230 <_tcc_init_irq_param+0x10>)
    2222:	4298      	cmp	r0, r3
    2224:	d000      	beq.n	2228 <_tcc_init_irq_param+0x8>
    2226:	4770      	bx	lr
		_tcc0_dev = (struct _pwm_device *)dev;
    2228:	4b02      	ldr	r3, [pc, #8]	; (2234 <_tcc_init_irq_param+0x14>)
    222a:	6019      	str	r1, [r3, #0]
	}
}
    222c:	e7fb      	b.n	2226 <_tcc_init_irq_param+0x6>
    222e:	bf00      	nop
    2230:	41016000 	.word	0x41016000
    2234:	2000064c 	.word	0x2000064c

00002238 <tcc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tcc_pwm_interrupt_handler(struct _pwm_device *device)
{
    2238:	b538      	push	{r3, r4, r5, lr}
    223a:	4605      	mov	r5, r0
	void *const hw = device->hw;
    223c:	6904      	ldr	r4, [r0, #16]
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_MC5;
}

static inline bool hri_tcc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTFLAG.reg & TCC_INTFLAG_OVF) >> TCC_INTFLAG_OVF_Pos;
    223e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

	if (hri_tcc_get_interrupt_OVF_bit(hw)) {
    2240:	f013 0f01 	tst.w	r3, #1
    2244:	d004      	beq.n	2250 <tcc_pwm_interrupt_handler+0x18>
}

static inline void hri_tcc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_OVF;
    2246:	2301      	movs	r3, #1
    2248:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    224a:	6803      	ldr	r3, [r0, #0]
    224c:	b103      	cbz	r3, 2250 <tcc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    224e:	4798      	blx	r3
	((Tcc *)hw)->INTENSET.reg = TCC_INTENSET_ERR;
}

static inline bool hri_tcc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tcc *)hw)->INTENSET.reg & TCC_INTENSET_ERR) >> TCC_INTENSET_ERR_Pos;
    2250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		}
	}
	if (hri_tcc_get_INTEN_ERR_bit(hw)) {
    2252:	f013 0f08 	tst.w	r3, #8
    2256:	d005      	beq.n	2264 <tcc_pwm_interrupt_handler+0x2c>
	((Tcc *)hw)->INTFLAG.reg = TCC_INTFLAG_ERR;
    2258:	2308      	movs	r3, #8
    225a:	62e3      	str	r3, [r4, #44]	; 0x2c
		hri_tcc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    225c:	686b      	ldr	r3, [r5, #4]
    225e:	b10b      	cbz	r3, 2264 <tcc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    2260:	4628      	mov	r0, r5
    2262:	4798      	blx	r3
    2264:	bd38      	pop	{r3, r4, r5, pc}
	...

00002268 <_get_tcc_cfg>:

static struct tcc_cfg *_get_tcc_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    2268:	2300      	movs	r3, #0
    226a:	b13b      	cbz	r3, 227c <_get_tcc_cfg+0x14>
		if (_cfgs[i].hw == hw) {
			return &(_cfgs[i]);
		}
	}
	return NULL;
    226c:	2000      	movs	r0, #0
    226e:	4770      	bx	lr
			return &(_cfgs[i]);
    2270:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    2274:	0123      	lsls	r3, r4, #4
    2276:	4608      	mov	r0, r1
    2278:	4418      	add	r0, r3
    227a:	e00c      	b.n	2296 <_get_tcc_cfg+0x2e>
{
    227c:	b410      	push	{r4}
		if (_cfgs[i].hw == hw) {
    227e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    2282:	010a      	lsls	r2, r1, #4
    2284:	4905      	ldr	r1, [pc, #20]	; (229c <_get_tcc_cfg+0x34>)
    2286:	588a      	ldr	r2, [r1, r2]
    2288:	4282      	cmp	r2, r0
    228a:	d0f1      	beq.n	2270 <_get_tcc_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_cfgs); i++) {
    228c:	3301      	adds	r3, #1
    228e:	b2db      	uxtb	r3, r3
    2290:	2b00      	cmp	r3, #0
    2292:	d0f4      	beq.n	227e <_get_tcc_cfg+0x16>
	return NULL;
    2294:	2000      	movs	r0, #0
}
    2296:	f85d 4b04 	ldr.w	r4, [sp], #4
    229a:	4770      	bx	lr
    229c:	20000000 	.word	0x20000000

000022a0 <_get_tcc_pwm_cfg>:

static struct tcc_pwm_cfg *_get_tcc_pwm_cfg(void *hw)
{
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    22a0:	2300      	movs	r3, #0
    22a2:	b123      	cbz	r3, 22ae <_get_tcc_pwm_cfg+0xe>
		if (_cfgs_pwm[i].hw == hw) {
			return &(_cfgs_pwm[i]);
		}
	}
	return NULL;
    22a4:	2000      	movs	r0, #0
    22a6:	4770      	bx	lr
			return &(_cfgs_pwm[i]);
    22a8:	4809      	ldr	r0, [pc, #36]	; (22d0 <_get_tcc_pwm_cfg+0x30>)
    22aa:	4408      	add	r0, r1
    22ac:	e00d      	b.n	22ca <_get_tcc_pwm_cfg+0x2a>
{
    22ae:	b410      	push	{r4}
		if (_cfgs_pwm[i].hw == hw) {
    22b0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    22b4:	0091      	lsls	r1, r2, #2
    22b6:	4a07      	ldr	r2, [pc, #28]	; (22d4 <_get_tcc_pwm_cfg+0x34>)
    22b8:	440a      	add	r2, r1
    22ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
    22bc:	4282      	cmp	r2, r0
    22be:	d0f3      	beq.n	22a8 <_get_tcc_pwm_cfg+0x8>
	for (i = 0; i < ARRAY_SIZE(_cfgs_pwm); i++) {
    22c0:	3301      	adds	r3, #1
    22c2:	b2db      	uxtb	r3, r3
    22c4:	2b00      	cmp	r3, #0
    22c6:	d0f3      	beq.n	22b0 <_get_tcc_pwm_cfg+0x10>
	return NULL;
    22c8:	2000      	movs	r0, #0
}
    22ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    22ce:	4770      	bx	lr
    22d0:	20000030 	.word	0x20000030
    22d4:	20000000 	.word	0x20000000

000022d8 <_pwm_init>:
{
    22d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22da:	4607      	mov	r7, r0
    22dc:	460c      	mov	r4, r1
	struct tcc_cfg *cfg = _get_tcc_cfg(hw);
    22de:	4608      	mov	r0, r1
    22e0:	4b60      	ldr	r3, [pc, #384]	; (2464 <_pwm_init+0x18c>)
    22e2:	4798      	blx	r3
	if (cfg == NULL) {
    22e4:	2800      	cmp	r0, #0
    22e6:	f000 80b2 	beq.w	244e <_pwm_init+0x176>
    22ea:	4606      	mov	r6, r0
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    22ec:	4620      	mov	r0, r4
    22ee:	4b5e      	ldr	r3, [pc, #376]	; (2468 <_pwm_init+0x190>)
    22f0:	4798      	blx	r3
	if (cfg_pwm == NULL) {
    22f2:	4605      	mov	r5, r0
    22f4:	2800      	cmp	r0, #0
    22f6:	f000 80ad 	beq.w	2454 <_pwm_init+0x17c>
	device->hw = hw;
    22fa:	613c      	str	r4, [r7, #16]
	return ((Tcc *)hw)->SYNCBUSY.reg & reg;
    22fc:	68a3      	ldr	r3, [r4, #8]
	if (!hri_tcc_is_syncing(hw, TCC_SYNCBUSY_SWRST)) {
    22fe:	f013 0f01 	tst.w	r3, #1
    2302:	d119      	bne.n	2338 <_pwm_init+0x60>
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2304:	68a3      	ldr	r3, [r4, #8]
    2306:	f013 0f03 	tst.w	r3, #3
    230a:	d1fb      	bne.n	2304 <_pwm_init+0x2c>

static inline hri_tcc_ctrla_reg_t hri_tcc_get_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_tcc_wait_for_sync(hw, TCC_SYNCBUSY_SWRST | TCC_SYNCBUSY_ENABLE);
	tmp = ((Tcc *)hw)->CTRLA.reg;
    230c:	6823      	ldr	r3, [r4, #0]
		if (hri_tcc_get_CTRLA_reg(hw, TCC_CTRLA_ENABLE)) {
    230e:	f013 0f02 	tst.w	r3, #2
    2312:	d00b      	beq.n	232c <_pwm_init+0x54>
	((Tcc *)hw)->CTRLA.reg &= ~TCC_CTRLA_ENABLE;
    2314:	6823      	ldr	r3, [r4, #0]
    2316:	f023 0302 	bic.w	r3, r3, #2
    231a:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    231c:	68a3      	ldr	r3, [r4, #8]
    231e:	f013 0f03 	tst.w	r3, #3
    2322:	d1fb      	bne.n	231c <_pwm_init+0x44>
    2324:	68a3      	ldr	r3, [r4, #8]
    2326:	f013 0f02 	tst.w	r3, #2
    232a:	d1fb      	bne.n	2324 <_pwm_init+0x4c>
}

static inline void hri_tcc_write_CTRLA_reg(const void *const hw, hri_tcc_ctrla_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CTRLA.reg = data;
    232c:	2301      	movs	r3, #1
    232e:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2330:	68a3      	ldr	r3, [r4, #8]
    2332:	f013 0f03 	tst.w	r3, #3
    2336:	d1fb      	bne.n	2330 <_pwm_init+0x58>
    2338:	68a3      	ldr	r3, [r4, #8]
    233a:	f013 0f01 	tst.w	r3, #1
    233e:	d1fb      	bne.n	2338 <_pwm_init+0x60>
	hri_tcc_write_CTRLA_reg(hw, cfg->ctrl_a);
    2340:	68b3      	ldr	r3, [r6, #8]
	((Tcc *)hw)->CTRLA.reg = data;
    2342:	6023      	str	r3, [r4, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2344:	68a3      	ldr	r3, [r4, #8]
    2346:	f013 0f03 	tst.w	r3, #3
    234a:	d1fb      	bne.n	2344 <_pwm_init+0x6c>
	hri_tcc_set_CTRLB_reg(hw, cfg->ctrl_b);
    234c:	7b33      	ldrb	r3, [r6, #12]
	((Tcc *)hw)->CTRLBSET.reg = mask;
    234e:	7163      	strb	r3, [r4, #5]
	hri_tcc_write_DBGCTRL_reg(hw, cfg->dbg_ctrl);
    2350:	7b73      	ldrb	r3, [r6, #13]
}

static inline void hri_tcc_write_DBGCTRL_reg(const void *const hw, hri_tcc_dbgctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->DBGCTRL.reg = data;
    2352:	77a3      	strb	r3, [r4, #30]
	hri_tcc_write_EVCTRL_reg(hw, cfg->event_ctrl);
    2354:	6933      	ldr	r3, [r6, #16]
}

static inline void hri_tcc_write_EVCTRL_reg(const void *const hw, hri_tcc_evctrl_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->EVCTRL.reg = data;
    2356:	6223      	str	r3, [r4, #32]
	hri_tcc_write_WAVE_reg(hw, cfg_pwm->wave);
    2358:	692b      	ldr	r3, [r5, #16]
}

static inline void hri_tcc_write_WAVE_reg(const void *const hw, hri_tcc_wave_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->WAVE.reg = data;
    235a:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    235c:	68a3      	ldr	r3, [r4, #8]
    235e:	f3c3 030d 	ubfx	r3, r3, #0, #14
    2362:	2b00      	cmp	r3, #0
    2364:	d1fa      	bne.n	235c <_pwm_init+0x84>
	hri_tcc_write_PER_reg(hw, cfg_pwm->period);
    2366:	68ab      	ldr	r3, [r5, #8]
}

static inline void hri_tcc_write_PER_reg(const void *const hw, hri_tcc_per_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PER.reg = data;
    2368:	6423      	str	r3, [r4, #64]	; 0x40
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    236a:	68a3      	ldr	r3, [r4, #8]
    236c:	f013 0f80 	tst.w	r3, #128	; 0x80
    2370:	d1fb      	bne.n	236a <_pwm_init+0x92>
	cfg->per = cfg_pwm->period;
    2372:	68ab      	ldr	r3, [r5, #8]
    2374:	62f3      	str	r3, [r6, #44]	; 0x2c
	switch (cfg_pwm->sel_ch) {
    2376:	79ab      	ldrb	r3, [r5, #6]
    2378:	2b05      	cmp	r3, #5
    237a:	d86e      	bhi.n	245a <_pwm_init+0x182>
    237c:	e8df f003 	tbb	[pc, r3]
    2380:	4f473f03 	.word	0x4f473f03
    2384:	5f57      	.short	0x5f57
		cfg->cc0 = cfg_pwm->duty_cycle;
    2386:	68eb      	ldr	r3, [r5, #12]
    2388:	6173      	str	r3, [r6, #20]
}

static inline void hri_tcc_write_CC_reg(const void *const hw, uint8_t index, hri_tcc_cc_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CC[index].reg = data;
    238a:	6463      	str	r3, [r4, #68]	; 0x44
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    238c:	68a3      	ldr	r3, [r4, #8]
    238e:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    2392:	d1fb      	bne.n	238c <_pwm_init+0xb4>
	((Tcc *)hw)->CTRLBCLR.reg = TCC_CTRLBSET_LUPD;
    2394:	2302      	movs	r3, #2
    2396:	7123      	strb	r3, [r4, #4]
	_tcc_init_irq_param(hw, (void *)device);
    2398:	4639      	mov	r1, r7
    239a:	4620      	mov	r0, r4
    239c:	4b33      	ldr	r3, [pc, #204]	; (246c <_pwm_init+0x194>)
    239e:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)cfg_pwm->irq);
    23a0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
    23a4:	2b00      	cmp	r3, #0
    23a6:	db0d      	blt.n	23c4 <_pwm_init+0xec>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23a8:	095a      	lsrs	r2, r3, #5
    23aa:	f003 031f 	and.w	r3, r3, #31
    23ae:	2101      	movs	r1, #1
    23b0:	fa01 f303 	lsl.w	r3, r1, r3
    23b4:	3220      	adds	r2, #32
    23b6:	492e      	ldr	r1, [pc, #184]	; (2470 <_pwm_init+0x198>)
    23b8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
    23bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    23c0:	f3bf 8f6f 	isb	sy
	NVIC_ClearPendingIRQ((IRQn_Type)cfg_pwm->irq);
    23c4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
    23c8:	2b00      	cmp	r3, #0
    23ca:	db09      	blt.n	23e0 <_pwm_init+0x108>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23cc:	095a      	lsrs	r2, r3, #5
    23ce:	f003 031f 	and.w	r3, r3, #31
    23d2:	2101      	movs	r1, #1
    23d4:	fa01 f303 	lsl.w	r3, r1, r3
    23d8:	3260      	adds	r2, #96	; 0x60
    23da:	4925      	ldr	r1, [pc, #148]	; (2470 <_pwm_init+0x198>)
    23dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	NVIC_EnableIRQ((IRQn_Type)cfg_pwm->irq);
    23e0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
  if ((int32_t)(IRQn) >= 0)
    23e4:	2b00      	cmp	r3, #0
    23e6:	db3b      	blt.n	2460 <_pwm_init+0x188>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23e8:	0959      	lsrs	r1, r3, #5
    23ea:	f003 031f 	and.w	r3, r3, #31
    23ee:	2201      	movs	r2, #1
    23f0:	fa02 f303 	lsl.w	r3, r2, r3
    23f4:	4a1e      	ldr	r2, [pc, #120]	; (2470 <_pwm_init+0x198>)
    23f6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return ERR_NONE;
    23fa:	2000      	movs	r0, #0
    23fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cfg->cc1 = cfg_pwm->duty_cycle;
    23fe:	68eb      	ldr	r3, [r5, #12]
    2400:	61b3      	str	r3, [r6, #24]
	((Tcc *)hw)->CC[index].reg = data;
    2402:	64a3      	str	r3, [r4, #72]	; 0x48
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2404:	68a3      	ldr	r3, [r4, #8]
    2406:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    240a:	d1fb      	bne.n	2404 <_pwm_init+0x12c>
    240c:	e7c2      	b.n	2394 <_pwm_init+0xbc>
		cfg->cc2 = cfg_pwm->duty_cycle;
    240e:	68eb      	ldr	r3, [r5, #12]
    2410:	61f3      	str	r3, [r6, #28]
	((Tcc *)hw)->CC[index].reg = data;
    2412:	64e3      	str	r3, [r4, #76]	; 0x4c
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2414:	68a3      	ldr	r3, [r4, #8]
    2416:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    241a:	d1fb      	bne.n	2414 <_pwm_init+0x13c>
    241c:	e7ba      	b.n	2394 <_pwm_init+0xbc>
		cfg->cc3 = cfg_pwm->duty_cycle;
    241e:	68eb      	ldr	r3, [r5, #12]
    2420:	6233      	str	r3, [r6, #32]
	((Tcc *)hw)->CC[index].reg = data;
    2422:	6523      	str	r3, [r4, #80]	; 0x50
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2424:	68a3      	ldr	r3, [r4, #8]
    2426:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    242a:	d1fb      	bne.n	2424 <_pwm_init+0x14c>
    242c:	e7b2      	b.n	2394 <_pwm_init+0xbc>
		cfg->cc4 = cfg_pwm->duty_cycle;
    242e:	68eb      	ldr	r3, [r5, #12]
    2430:	6273      	str	r3, [r6, #36]	; 0x24
	((Tcc *)hw)->CC[index].reg = data;
    2432:	6563      	str	r3, [r4, #84]	; 0x54
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2434:	68a3      	ldr	r3, [r4, #8]
    2436:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    243a:	d1fb      	bne.n	2434 <_pwm_init+0x15c>
    243c:	e7aa      	b.n	2394 <_pwm_init+0xbc>
		cfg->cc5 = cfg_pwm->duty_cycle;
    243e:	68eb      	ldr	r3, [r5, #12]
    2440:	62b3      	str	r3, [r6, #40]	; 0x28
	((Tcc *)hw)->CC[index].reg = data;
    2442:	65a3      	str	r3, [r4, #88]	; 0x58
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    2444:	68a3      	ldr	r3, [r4, #8]
    2446:	f413 5f7c 	tst.w	r3, #16128	; 0x3f00
    244a:	d1fb      	bne.n	2444 <_pwm_init+0x16c>
    244c:	e7a2      	b.n	2394 <_pwm_init+0xbc>
		return ERR_NOT_FOUND;
    244e:	f06f 0009 	mvn.w	r0, #9
    2452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NOT_FOUND;
    2454:	f06f 0009 	mvn.w	r0, #9
    2458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ERR_NO_RESOURCE;
    245a:	f06f 001b 	mvn.w	r0, #27
    245e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return ERR_NONE;
    2460:	2000      	movs	r0, #0
}
    2462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2464:	00002269 	.word	0x00002269
    2468:	000022a1 	.word	0x000022a1
    246c:	00002221 	.word	0x00002221
    2470:	e000e100 	.word	0xe000e100

00002474 <_pwm_enable>:
	hri_tcc_set_CTRLA_ENABLE_bit(device->hw);
    2474:	6902      	ldr	r2, [r0, #16]
	((Tcc *)hw)->CTRLA.reg |= TCC_CTRLA_ENABLE;
    2476:	6813      	ldr	r3, [r2, #0]
    2478:	f043 0302 	orr.w	r3, r3, #2
    247c:	6013      	str	r3, [r2, #0]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    247e:	6893      	ldr	r3, [r2, #8]
    2480:	f013 0f03 	tst.w	r3, #3
    2484:	d1fb      	bne.n	247e <_pwm_enable+0xa>
}
    2486:	4770      	bx	lr

00002488 <_pwm_set_param>:
{
    2488:	b570      	push	{r4, r5, r6, lr}
    248a:	460e      	mov	r6, r1
    248c:	4615      	mov	r5, r2
	void *const         hw      = device->hw;
    248e:	6904      	ldr	r4, [r0, #16]
	struct tcc_pwm_cfg *cfg_pwm = _get_tcc_pwm_cfg(hw);
    2490:	4620      	mov	r0, r4
    2492:	4b04      	ldr	r3, [pc, #16]	; (24a4 <_pwm_set_param+0x1c>)
    2494:	4798      	blx	r3
	if (cfg_pwm != NULL) {
    2496:	b120      	cbz	r0, 24a2 <_pwm_set_param+0x1a>
}

static inline void hri_tcc_write_PERBUF_reg(const void *const hw, hri_tcc_perbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->PERBUF.reg = data;
    2498:	66e6      	str	r6, [r4, #108]	; 0x6c
		hri_tcc_write_CCB_reg(hw, cfg_pwm->sel_ch, duty_cycle);
    249a:	7983      	ldrb	r3, [r0, #6]
}

static inline void hri_tcc_write_CCBUF_reg(const void *const hw, uint8_t index, hri_tcc_ccbuf_reg_t data)
{
	TCC_CRITICAL_SECTION_ENTER();
	((Tcc *)hw)->CCBUF[index].reg = data;
    249c:	331c      	adds	r3, #28
    249e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
    24a2:	bd70      	pop	{r4, r5, r6, pc}
    24a4:	000022a1 	.word	0x000022a1

000024a8 <_pwm_is_enabled>:
	return hri_tcc_get_CTRLA_ENABLE_bit(device->hw);
    24a8:	6902      	ldr	r2, [r0, #16]
	while (((Tcc *)hw)->SYNCBUSY.reg & reg) {
    24aa:	6893      	ldr	r3, [r2, #8]
    24ac:	f013 0f03 	tst.w	r3, #3
    24b0:	d1fb      	bne.n	24aa <_pwm_is_enabled+0x2>
	tmp = ((Tcc *)hw)->CTRLA.reg;
    24b2:	6810      	ldr	r0, [r2, #0]
	tmp = (tmp & TCC_CTRLA_ENABLE) >> TCC_CTRLA_ENABLE_Pos;
    24b4:	f3c0 0040 	ubfx	r0, r0, #1, #1
}
    24b8:	4770      	bx	lr

000024ba <_tcc_get_pwm>:
}
    24ba:	2000      	movs	r0, #0
    24bc:	4770      	bx	lr
	...

000024c0 <TCC0_0_Handler>:
{
    24c0:	b508      	push	{r3, lr}
	tcc_pwm_interrupt_handler(_tcc0_dev);
    24c2:	4b02      	ldr	r3, [pc, #8]	; (24cc <TCC0_0_Handler+0xc>)
    24c4:	6818      	ldr	r0, [r3, #0]
    24c6:	4b02      	ldr	r3, [pc, #8]	; (24d0 <TCC0_0_Handler+0x10>)
    24c8:	4798      	blx	r3
    24ca:	bd08      	pop	{r3, pc}
    24cc:	2000064c 	.word	0x2000064c
    24d0:	00002239 	.word	0x00002239

000024d4 <ext_irq_cb_PCC_VSYNC>:
	PCC_SCCB_Buffer[1] = dat;
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
}

static void ext_irq_cb_PCC_VSYNC(void)
{
    24d4:	4770      	bx	lr
	...

000024d8 <config_sensor_ov7670>:
	//Do Nothing
//	asm ("nop");
}

void config_sensor_ov7670(void)
{
    24d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24dc:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24de:	4b5a      	ldr	r3, [pc, #360]	; (2648 <config_sensor_ov7670+0x170>)
    24e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    24e4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    24ec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	uint8_t recv_vid;
	uint8_t recv_pid;
	
	gpio_set_pin_level(PCC_PWDN, false);
	gpio_set_pin_level(PCC_RESET, true);
	delay_ms(10);
    24f0:	200a      	movs	r0, #10
    24f2:	4e56      	ldr	r6, [pc, #344]	; (264c <config_sensor_ov7670+0x174>)
    24f4:	47b0      	blx	r6
	
	i2c_m_sync_get_io_descriptor(&PCC_SCCB, &PCC_SCCB_io);
    24f6:	4c56      	ldr	r4, [pc, #344]	; (2650 <config_sensor_ov7670+0x178>)
    24f8:	4956      	ldr	r1, [pc, #344]	; (2654 <config_sensor_ov7670+0x17c>)
    24fa:	4620      	mov	r0, r4
    24fc:	4b56      	ldr	r3, [pc, #344]	; (2658 <config_sensor_ov7670+0x180>)
    24fe:	4798      	blx	r3
	i2c_m_sync_enable(&PCC_SCCB);
    2500:	4620      	mov	r0, r4
    2502:	4b56      	ldr	r3, [pc, #344]	; (265c <config_sensor_ov7670+0x184>)
    2504:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&PCC_SCCB, OV7670_SLAVE_ADDRESS, I2C_M_SEVEN);
    2506:	f44f 6200 	mov.w	r2, #2048	; 0x800
    250a:	2121      	movs	r1, #33	; 0x21
    250c:	4620      	mov	r0, r4
    250e:	4b54      	ldr	r3, [pc, #336]	; (2660 <config_sensor_ov7670+0x188>)
    2510:	4798      	blx	r3

	PCC_SCCB_Buffer[0] = OV7670_CHIPID_HIGH;
    2512:	270a      	movs	r7, #10
    2514:	ad02      	add	r5, sp, #8
    2516:	f805 7d04 	strb.w	r7, [r5, #-4]!
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 1);
    251a:	3414      	adds	r4, #20
    251c:	2201      	movs	r2, #1
    251e:	4629      	mov	r1, r5
    2520:	4620      	mov	r0, r4
    2522:	f8df 9148 	ldr.w	r9, [pc, #328]	; 266c <config_sensor_ov7670+0x194>
    2526:	47c8      	blx	r9
	io_read(&PCC_SCCB.io, &recv_vid, 1);
    2528:	2201      	movs	r2, #1
    252a:	f10d 0103 	add.w	r1, sp, #3
    252e:	4620      	mov	r0, r4
    2530:	f8df 8144 	ldr.w	r8, [pc, #324]	; 2678 <config_sensor_ov7670+0x1a0>
    2534:	47c0      	blx	r8

	delay_ms(10);
    2536:	4638      	mov	r0, r7
    2538:	47b0      	blx	r6
	PCC_SCCB_Buffer[0] = OV7670_CHIPID_LOW;
    253a:	230b      	movs	r3, #11
    253c:	f88d 3004 	strb.w	r3, [sp, #4]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 1);
    2540:	2201      	movs	r2, #1
    2542:	4629      	mov	r1, r5
    2544:	4620      	mov	r0, r4
    2546:	47c8      	blx	r9
	io_read(&PCC_SCCB.io, &recv_pid, 1);
    2548:	2201      	movs	r2, #1
    254a:	f10d 0102 	add.w	r1, sp, #2
    254e:	4620      	mov	r0, r4
    2550:	47c0      	blx	r8
	delay_ms(10);
    2552:	4638      	mov	r0, r7
    2554:	47b0      	blx	r6
	if(OV7670_CHIPID_VID == recv_vid && OV7670_CHIPID_PID == recv_pid)
    2556:	f89d 3003 	ldrb.w	r3, [sp, #3]
    255a:	2b76      	cmp	r3, #118	; 0x76
    255c:	d005      	beq.n	256a <config_sensor_ov7670+0x92>
		#endif
	}
	else
	{
		#ifdef CAMERA_0_TEST
		io_write(&EDBG_COM.io, Display_Invalid_VID_PID, sizeof(Display_Invalid_VID_PID));
    255e:	2218      	movs	r2, #24
    2560:	4940      	ldr	r1, [pc, #256]	; (2664 <config_sensor_ov7670+0x18c>)
    2562:	4841      	ldr	r0, [pc, #260]	; (2668 <config_sensor_ov7670+0x190>)
    2564:	4b41      	ldr	r3, [pc, #260]	; (266c <config_sensor_ov7670+0x194>)
    2566:	4798      	blx	r3
    2568:	e7fe      	b.n	2568 <config_sensor_ov7670+0x90>
	if(OV7670_CHIPID_VID == recv_vid && OV7670_CHIPID_PID == recv_pid)
    256a:	f89d 3002 	ldrb.w	r3, [sp, #2]
    256e:	2b73      	cmp	r3, #115	; 0x73
    2570:	d1f5      	bne.n	255e <config_sensor_ov7670+0x86>
		io_write(&EDBG_COM.io, Display_Valid_VID_PID, sizeof(Display_Valid_VID_PID));
    2572:	2220      	movs	r2, #32
    2574:	493e      	ldr	r1, [pc, #248]	; (2670 <config_sensor_ov7670+0x198>)
    2576:	483c      	ldr	r0, [pc, #240]	; (2668 <config_sensor_ov7670+0x190>)
    2578:	47c8      	blx	r9
		#endif
		while(1);
	}
	
	PCC_SCCB_Buffer[0] = 0x0C;
    257a:	270c      	movs	r7, #12
    257c:	f88d 7004 	strb.w	r7, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x08;
    2580:	2308      	movs	r3, #8
    2582:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    2586:	4d3b      	ldr	r5, [pc, #236]	; (2674 <config_sensor_ov7670+0x19c>)
    2588:	2202      	movs	r2, #2
    258a:	a901      	add	r1, sp, #4
    258c:	4628      	mov	r0, r5
    258e:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x12;
    2590:	2312      	movs	r3, #18
    2592:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x14;
    2596:	2314      	movs	r3, #20
    2598:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    259c:	2202      	movs	r2, #2
    259e:	a901      	add	r1, sp, #4
    25a0:	4628      	mov	r0, r5
    25a2:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x15;
    25a4:	2315      	movs	r3, #21
    25a6:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x02;
    25aa:	2602      	movs	r6, #2
    25ac:	f88d 6005 	strb.w	r6, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    25b0:	4632      	mov	r2, r6
    25b2:	a901      	add	r1, sp, #4
    25b4:	4628      	mov	r0, r5
    25b6:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x40;
    25b8:	2340      	movs	r3, #64	; 0x40
    25ba:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0xD0;
    25be:	23d0      	movs	r3, #208	; 0xd0
    25c0:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    25c4:	4632      	mov	r2, r6
    25c6:	a901      	add	r1, sp, #4
    25c8:	4628      	mov	r0, r5
    25ca:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x1E;
    25cc:	231e      	movs	r3, #30
    25ce:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x31;
    25d2:	2331      	movs	r3, #49	; 0x31
    25d4:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    25d8:	4632      	mov	r2, r6
    25da:	a901      	add	r1, sp, #4
    25dc:	4628      	mov	r0, r5
    25de:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x3A;
    25e0:	233a      	movs	r3, #58	; 0x3a
    25e2:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x0C;
    25e6:	f88d 7005 	strb.w	r7, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    25ea:	4632      	mov	r2, r6
    25ec:	a901      	add	r1, sp, #4
    25ee:	4628      	mov	r0, r5
    25f0:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x3E;
    25f2:	233e      	movs	r3, #62	; 0x3e
    25f4:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x19;
    25f8:	2319      	movs	r3, #25
    25fa:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    25fe:	4632      	mov	r2, r6
    2600:	a901      	add	r1, sp, #4
    2602:	4628      	mov	r0, r5
    2604:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x73;
    2606:	2373      	movs	r3, #115	; 0x73
    2608:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0xF1;
    260c:	23f1      	movs	r3, #241	; 0xf1
    260e:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    2612:	4632      	mov	r2, r6
    2614:	a901      	add	r1, sp, #4
    2616:	4628      	mov	r0, r5
    2618:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x17;
    261a:	2317      	movs	r3, #23
    261c:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x0B;
    2620:	230b      	movs	r3, #11
    2622:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    2626:	4632      	mov	r2, r6
    2628:	a901      	add	r1, sp, #4
    262a:	4628      	mov	r0, r5
    262c:	47c8      	blx	r9
	
	PCC_SCCB_Buffer[0] = 0x32;
    262e:	2332      	movs	r3, #50	; 0x32
    2630:	f88d 3004 	strb.w	r3, [sp, #4]
	PCC_SCCB_Buffer[1] = 0x80;
    2634:	2380      	movs	r3, #128	; 0x80
    2636:	f88d 3005 	strb.w	r3, [sp, #5]
	io_write(&PCC_SCCB.io, PCC_SCCB_Buffer, 2);
    263a:	4632      	mov	r2, r6
    263c:	a901      	add	r1, sp, #4
    263e:	4628      	mov	r0, r5
    2640:	47c8      	blx	r9

	
}
    2642:	b003      	add	sp, #12
    2644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2648:	41008000 	.word	0x41008000
    264c:	000008c5 	.word	0x000008c5
    2650:	20025ed4 	.word	0x20025ed4
    2654:	20025f0c 	.word	0x20025f0c
    2658:	00000af5 	.word	0x00000af5
    265c:	00000ad9 	.word	0x00000ad9
    2660:	00000ae5 	.word	0x00000ae5
    2664:	20000064 	.word	0x20000064
    2668:	20025e70 	.word	0x20025e70
    266c:	00000afd 	.word	0x00000afd
    2670:	20000044 	.word	0x20000044
    2674:	20025ee8 	.word	0x20025ee8
    2678:	00000b31 	.word	0x00000b31

0000267c <main>:

int main(void)
{
    267c:	b500      	push	{lr}
    267e:	b083      	sub	sp, #12
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    2680:	4b2a      	ldr	r3, [pc, #168]	; (272c <main+0xb0>)
    2682:	4798      	blx	r3
	
	usart_async_enable(&EDBG_COM);
    2684:	482a      	ldr	r0, [pc, #168]	; (2730 <main+0xb4>)
    2686:	4b2b      	ldr	r3, [pc, #172]	; (2734 <main+0xb8>)
    2688:	4798      	blx	r3
	
 	pwm_set_parameters(&PWM_0, 4,2);
    268a:	4c2b      	ldr	r4, [pc, #172]	; (2738 <main+0xbc>)
    268c:	2202      	movs	r2, #2
    268e:	2104      	movs	r1, #4
    2690:	4620      	mov	r0, r4
    2692:	4b2a      	ldr	r3, [pc, #168]	; (273c <main+0xc0>)
    2694:	4798      	blx	r3
 
 	pwm_enable(&PWM_0);		
    2696:	4620      	mov	r0, r4
    2698:	4b29      	ldr	r3, [pc, #164]	; (2740 <main+0xc4>)
    269a:	4798      	blx	r3
			while(_usart_async_is_byte_sent(&EDBG_COM.device) == 0);
			_usart_async_write_byte(&EDBG_COM.device, Display_title[Index]);
		}
	}
#endif
		memset(CAMERA_OV7670_frame_buf.hword,0x30,sizeof(CAMERA_OV7670_frame_buf.hword));
    269c:	f44f 3216 	mov.w	r2, #153600	; 0x25800
    26a0:	2130      	movs	r1, #48	; 0x30
    26a2:	4828      	ldr	r0, [pc, #160]	; (2744 <main+0xc8>)
    26a4:	4b28      	ldr	r3, [pc, #160]	; (2748 <main+0xcc>)
    26a6:	4798      	blx	r3
  		config_sensor_ov7670();
    26a8:	4b28      	ldr	r3, [pc, #160]	; (274c <main+0xd0>)
    26aa:	4798      	blx	r3
		ext_irq_register(PCC_VSYNC, ext_irq_cb_PCC_VSYNC);
    26ac:	4928      	ldr	r1, [pc, #160]	; (2750 <main+0xd4>)
    26ae:	200c      	movs	r0, #12
    26b0:	4b28      	ldr	r3, [pc, #160]	; (2754 <main+0xd8>)
    26b2:	4798      	blx	r3
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    26b4:	4668      	mov	r0, sp
    26b6:	4b28      	ldr	r3, [pc, #160]	; (2758 <main+0xdc>)
    26b8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26ba:	4b28      	ldr	r3, [pc, #160]	; (275c <main+0xe0>)
    26bc:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26be:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26c0:	691c      	ldr	r4, [r3, #16]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    26c2:	4054      	eors	r4, r2
    26c4:	400c      	ands	r4, r1
    26c6:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    26c8:	4668      	mov	r0, sp
    26ca:	4b25      	ldr	r3, [pc, #148]	; (2760 <main+0xe4>)
    26cc:	4798      	blx	r3
  		
 		while(gpio_get_pin_level(PCC_VSYNC) == 0);
    26ce:	f414 5f80 	tst.w	r4, #4096	; 0x1000
    26d2:	d0ef      	beq.n	26b4 <main+0x38>
	CRITICAL_SECTION_ENTER();
    26d4:	a801      	add	r0, sp, #4
    26d6:	4b20      	ldr	r3, [pc, #128]	; (2758 <main+0xdc>)
    26d8:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26da:	4b20      	ldr	r3, [pc, #128]	; (275c <main+0xe0>)
    26dc:	6819      	ldr	r1, [r3, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26de:	6a1a      	ldr	r2, [r3, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26e0:	691c      	ldr	r4, [r3, #16]
	tmp |= hri_port_read_OUT_reg(PORT, port) & dir_tmp;
    26e2:	4054      	eors	r4, r2
    26e4:	400c      	ands	r4, r1
    26e6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26e8:	a801      	add	r0, sp, #4
    26ea:	4b1d      	ldr	r3, [pc, #116]	; (2760 <main+0xe4>)
    26ec:	4798      	blx	r3
 		while(gpio_get_pin_level(PCC_VSYNC) != 0);
    26ee:	f414 5f80 	tst.w	r4, #4096	; 0x1000
    26f2:	d1ef      	bne.n	26d4 <main+0x58>
 *
 * \return Enabling status.
 */
static inline int32_t camera_async_enable(struct camera_async_descriptor *const descr)
{
	ASSERT(descr);
    26f4:	4d1b      	ldr	r5, [pc, #108]	; (2764 <main+0xe8>)
    26f6:	227f      	movs	r2, #127	; 0x7f
    26f8:	4629      	mov	r1, r5
    26fa:	2001      	movs	r0, #1
    26fc:	4c1a      	ldr	r4, [pc, #104]	; (2768 <main+0xec>)
    26fe:	47a0      	blx	r4

	_camera_async_enable(&descr->device);
    2700:	4e1a      	ldr	r6, [pc, #104]	; (276c <main+0xf0>)
    2702:	4630      	mov	r0, r6
    2704:	4b1a      	ldr	r3, [pc, #104]	; (2770 <main+0xf4>)
    2706:	4798      	blx	r3
 * \return Capture start status.
 */
static inline int32_t camera_async_capture_start(struct camera_async_descriptor *const descr, uint32_t ch,
                                                 uint32_t *buf)
{
	ASSERT(descr);
    2708:	22b9      	movs	r2, #185	; 0xb9
    270a:	4629      	mov	r1, r5
    270c:	2001      	movs	r0, #1
    270e:	47a0      	blx	r4
	ASSERT(buf);
    2710:	22ba      	movs	r2, #186	; 0xba
    2712:	4629      	mov	r1, r5
    2714:	2001      	movs	r0, #1
    2716:	47a0      	blx	r4

	_camera_async_capture_start(&descr->device, ch, buf);
    2718:	4a0a      	ldr	r2, [pc, #40]	; (2744 <main+0xc8>)
    271a:	2100      	movs	r1, #0
    271c:	4630      	mov	r0, r6
    271e:	4b15      	ldr	r3, [pc, #84]	; (2774 <main+0xf8>)
    2720:	4798      	blx	r3
 		camera_async_enable(&CAMERA_OV7670);
 		camera_async_capture_start(&CAMERA_OV7670, 0, (uint32_t *) &CAMERA_OV7670_frame_buf.hword[0]);

		
 		flag_frame_captured = 0;
    2722:	2200      	movs	r2, #0
    2724:	4b14      	ldr	r3, [pc, #80]	; (2778 <main+0xfc>)
    2726:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    272a:	e7fe      	b.n	272a <main+0xae>
    272c:	000002d1 	.word	0x000002d1
    2730:	20025e70 	.word	0x20025e70
    2734:	00000e11 	.word	0x00000e11
    2738:	20025e54 	.word	0x20025e54
    273c:	00000bf9 	.word	0x00000bf9
    2740:	00000bbd 	.word	0x00000bbd
    2744:	20000650 	.word	0x20000650
    2748:	000027c5 	.word	0x000027c5
    274c:	000024d9 	.word	0x000024d9
    2750:	000024d5 	.word	0x000024d5
    2754:	00000969 	.word	0x00000969
    2758:	00000851 	.word	0x00000851
    275c:	41008000 	.word	0x41008000
    2760:	0000085f 	.word	0x0000085f
    2764:	00002b3c 	.word	0x00002b3c
    2768:	00000e3d 	.word	0x00000e3d
    276c:	20025ec0 	.word	0x20025ec0
    2770:	000016c5 	.word	0x000016c5
    2774:	000016d1 	.word	0x000016d1
    2778:	20025838 	.word	0x20025838

0000277c <__libc_init_array>:
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	4e0d      	ldr	r6, [pc, #52]	; (27b4 <__libc_init_array+0x38>)
    2780:	4c0d      	ldr	r4, [pc, #52]	; (27b8 <__libc_init_array+0x3c>)
    2782:	1ba4      	subs	r4, r4, r6
    2784:	10a4      	asrs	r4, r4, #2
    2786:	2500      	movs	r5, #0
    2788:	42a5      	cmp	r5, r4
    278a:	d109      	bne.n	27a0 <__libc_init_array+0x24>
    278c:	4e0b      	ldr	r6, [pc, #44]	; (27bc <__libc_init_array+0x40>)
    278e:	4c0c      	ldr	r4, [pc, #48]	; (27c0 <__libc_init_array+0x44>)
    2790:	f000 f9e6 	bl	2b60 <_init>
    2794:	1ba4      	subs	r4, r4, r6
    2796:	10a4      	asrs	r4, r4, #2
    2798:	2500      	movs	r5, #0
    279a:	42a5      	cmp	r5, r4
    279c:	d105      	bne.n	27aa <__libc_init_array+0x2e>
    279e:	bd70      	pop	{r4, r5, r6, pc}
    27a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    27a4:	4798      	blx	r3
    27a6:	3501      	adds	r5, #1
    27a8:	e7ee      	b.n	2788 <__libc_init_array+0xc>
    27aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    27ae:	4798      	blx	r3
    27b0:	3501      	adds	r5, #1
    27b2:	e7f2      	b.n	279a <__libc_init_array+0x1e>
    27b4:	00002b6c 	.word	0x00002b6c
    27b8:	00002b6c 	.word	0x00002b6c
    27bc:	00002b6c 	.word	0x00002b6c
    27c0:	00002b70 	.word	0x00002b70

000027c4 <memset>:
    27c4:	4402      	add	r2, r0
    27c6:	4603      	mov	r3, r0
    27c8:	4293      	cmp	r3, r2
    27ca:	d100      	bne.n	27ce <memset+0xa>
    27cc:	4770      	bx	lr
    27ce:	f803 1b01 	strb.w	r1, [r3], #1
    27d2:	e7f9      	b.n	27c8 <memset+0x4>
    27d4:	682f2e2e 	.word	0x682f2e2e
    27d8:	732f6c61 	.word	0x732f6c61
    27dc:	682f6372 	.word	0x682f6372
    27e0:	635f6c61 	.word	0x635f6c61
    27e4:	72656d61 	.word	0x72656d61
    27e8:	73615f61 	.word	0x73615f61
    27ec:	2e636e79 	.word	0x2e636e79
    27f0:	00000063 	.word	0x00000063
    27f4:	682f2e2e 	.word	0x682f2e2e
    27f8:	732f6c61 	.word	0x732f6c61
    27fc:	682f6372 	.word	0x682f6372
    2800:	695f6c61 	.word	0x695f6c61
    2804:	6d5f6332 	.word	0x6d5f6332
    2808:	6e79735f 	.word	0x6e79735f
    280c:	00632e63 	.word	0x00632e63
    2810:	682f2e2e 	.word	0x682f2e2e
    2814:	732f6c61 	.word	0x732f6c61
    2818:	682f6372 	.word	0x682f6372
    281c:	695f6c61 	.word	0x695f6c61
    2820:	00632e6f 	.word	0x00632e6f
    2824:	682f2e2e 	.word	0x682f2e2e
    2828:	732f6c61 	.word	0x732f6c61
    282c:	682f6372 	.word	0x682f6372
    2830:	705f6c61 	.word	0x705f6c61
    2834:	632e6d77 	.word	0x632e6d77
    2838:	00000000 	.word	0x00000000
    283c:	682f2e2e 	.word	0x682f2e2e
    2840:	732f6c61 	.word	0x732f6c61
    2844:	682f6372 	.word	0x682f6372
    2848:	755f6c61 	.word	0x755f6c61
    284c:	74726173 	.word	0x74726173
    2850:	7973615f 	.word	0x7973615f
    2854:	632e636e 	.word	0x632e636e
    2858:	00000000 	.word	0x00000000
    285c:	682f2e2e 	.word	0x682f2e2e
    2860:	752f6c61 	.word	0x752f6c61
    2864:	736c6974 	.word	0x736c6974
    2868:	6372732f 	.word	0x6372732f
    286c:	6974752f 	.word	0x6974752f
    2870:	725f736c 	.word	0x725f736c
    2874:	62676e69 	.word	0x62676e69
    2878:	65666675 	.word	0x65666675
    287c:	00632e72 	.word	0x00632e72

00002880 <_cfgs>:
    2880:	00205000 0a1ec500 00000000 00000000     .P .............
	...

00002980 <_map>:
    2980:	0000000c 0000000c 0000000d 0000000d     ................
    2990:	682f2e2e 652f6c70 682f6369 655f6c70     ../hpl/eic/hpl_e
    29a0:	632e6369 00000000                       ic.c....

000029a8 <user_mux_confs>:
    29a8:	00000200 00000200 00000000 00000000     ................
	...

000029ec <channel_confs>:
    29ec:	051e0000 00000000 00000000 00000000     ................
	...

00002a2c <interrupt_cfg>:
	...
    2aac:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    2abc:	43000000 43000400 43000800 43000c00     ...C...C...C...C

00002acc <_usarts>:
    2acc:	00000001 40100004 00030000 00700002     .......@......p.
    2adc:	0000e08a 00000000                       ........

00002ae4 <_i2cms>:
    2ae4:	00000007 30100014 00000100 0000e6e5     .......0........
    2af4:	00d70000 02dc6c00                       .....l..

00002afc <_i2css>:
	...

00002b0c <sercomspi_regs>:
	...
    2b20:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    2b30:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    2b40:	692f6c61 756c636e 682f6564 635f6c61     al/include/hal_c
    2b50:	72656d61 73615f61 2e636e79 00000068     amera_async.h...

00002b60 <_init>:
    2b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b62:	bf00      	nop
    2b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b66:	bc08      	pop	{r3}
    2b68:	469e      	mov	lr, r3
    2b6a:	4770      	bx	lr

00002b6c <__init_array_start>:
    2b6c:	00000289 	.word	0x00000289

00002b70 <_fini>:
    2b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b72:	bf00      	nop
    2b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b76:	bc08      	pop	{r3}
    2b78:	469e      	mov	lr, r3
    2b7a:	4770      	bx	lr

00002b7c <__fini_array_start>:
    2b7c:	00000265 	.word	0x00000265
